using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using GITProtocol;
using System.IO;
using Akka.Actor;
using Newtonsoft.Json;
using Akka.Configuration;

namespace SlotGamesNode.GameLogics
{
    class LuckyEgyptLinkedGameLogic : BaseAmaticSlotGame
    {
        #region 게임고유속성값
        protected override string SymbolName
        {
            get
            {
                return "LuckyEgyptLinked";
            }
        }
        protected override long[] BettingButton
        {
            get
            {
                return new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 25, 30, 35, 40, 45, 50, 60, 70, 80, 90, 100, 150, 200, 250, 300, 350, 400, 450, 500, 600, 700, 800, 900, 1000 };
            }
        }
        protected override long[] LINES
        {
            get
            {
                return new long[] { 50 };
            }
        }
        protected override string InitString
        {
            get
            {
                return "05240020808080707020305050f1011040107070205050104000a0b030808090206060102121308080103020707070105050207070702010808010908080402010505240060601040c0d0e01040302000a0b0304090606060c0d0e0104050503040f1011040308080103040603060609070702000a0b04030606121304030707030401022400606020505040c0d0e04010305050606030104030f10050501040808000a0b0401060609040207071112130606020409020104030102030c0d0e0606030402032400707030c0d0e01040206060203050502070701040f101102030505010203040606090808030c0d0e0505030412130707010606000a0b030808030908080302012560709040c0d0e02030808040f10110707030402030401060602090808010505020606000a0b0205051213080801040707030104020707010505030606020401060602070702040907020408080505000a0b010403020752500207040f10110807090602040c0d0e060803060701040708060203000a0b05080403070108060905030706040c0d0e010702040307020509060703061213040803060501070403060c0d0e0705020401250080709060204080701060f10110803060701040c0d0e0203000a0b05080403060708060905030706040c0d0e0107020403070205090607030604080306121305010704030c0d0e07080502040102070425007090602040c0d0e060803060701040708060203000a0b05080403070108060905030706040c0d0e0107020403070205090607030612130408030605010704030c0d0e0408050204010207040f1011082500306070c0d0e08060203000a0b05080403070108060905030706040c0d0e0107020403070205090607030604080306121305010704030c0d0e040805020401020704080709060204050701060f1011082500207040807090602040c0d0e060803060701040708060203050f1011080403070108060905030706040c0d0e01070212130403070205090607030604000a0b08030605010704030c0d0e08050102040103010101010101042710100023231f432101010101010103232321100101010101000000000000000000a1112131415161718191a331010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010102380802051c080108180105071200050413050004150300011b0806070f04020816040500190607011403060510030602110408011a07060017238070603150503041206010016070602100801021404000418030405130803081a0206051b0603080f030706190706011c0207031105000817238040308160702061c00010510020506180004011a0806081b04080513060307190803070f0300071700010014070405120203011505010211238080607160203011003010518020506110700051c020001150500030f040801140200011a0603081701030112080301130801081b00050319238030704150607011803020019040001110800031002070013030506140104061b0003081a0408011c0700021707040612020705160204030f2380805001706080418000800110803051b040502120702031306000310020701140204031a0608020f0801071901070815060200160708031c2380601081b02030711010203180004021c08010517080402130508051a00020715000305140801050f000401120506021001020416060100192380705021b0706041a0706071305040010060102160406011903020615010204140002030f0501021c070001180206021205020511070104172380504051900050118060703110607080f070506130801021b000501100805081404010017070100120405031a05020115040603160100051c238080304150208041407040618050005190203020f05060211050403160701001c060800120103061a04000517010300100601051b04080713238040104100804010f0501081b0008071c0007041500060214050604180601081a0605081307020511080402120708041605040719030006172380107001a02060511030408190600031c08030813020506160406021405030812020405180204021b04030015050604170004030f060700102380407031302030410010503170400081a0100071901030111040607150401051b0704031c0703011207010616050400140702070f000503182380401021101080714030504130500031c0100081a0107031008050618040002150008011b0508041905030217050107160201020f040708122380104081206080716040305170703050f070401150801051c0100061103060214070005180105061a0105061004030013020705190700081b101010101010101010101010101010101010101012001501020304051501020304051501020304051501020304051501020304051e00000000000000000000000000001f000000000000000000000000000000101010101010101010101010101010";
            }
        }
        protected override int ReelSetBitNum => 2;
        protected string ExtraString => "101010101010101010101010101010101010101012001501020304051501020304051501020304051501020304051501020304051e00000000000000000000000000001f000000000000000000000000000000101010101010101010101010101010";
        protected string ExtraReelsetString => "2380802051c080108180105071200050413050004150300011b0806070f04020816040500190607011403060510030602110408011a07060017238070603150503041206010016070602100801021404000418030405130803081a0206051b0603080f030706190706011c0207031105000817238040308160702061c00010510020506180004011a0806081b04080513060307190803070f0300071700010014070405120203011505010211238080607160203011003010518020506110700051c020001150500030f040801140200011a0603081701030112080301130801081b00050319238030704150607011803020019040001110800031002070013030506140104061b0003081a0408011c0700021707040612020705160204030f2380805001706080418000800110803051b040502120702031306000310020701140204031a0608020f0801071901070815060200160708031c2380601081b02030711010203180004021c08010517080402130508051a00020715000305140801050f000401120506021001020416060100192380705021b0706041a0706071305040010060102160406011903020615010204140002030f0501021c070001180206021205020511070104172380504051900050118060703110607080f070506130801021b000501100805081404010017070100120405031a05020115040603160100051c238080304150208041407040618050005190203020f05060211050403160701001c060800120103061a04000517010300100601051b04080713238040104100804010f0501081b0008071c0007041500060214050604180601081a0605081307020511080402120708041605040719030006172380107001a02060511030408190600031c08030813020506160406021405030812020405180204021b04030015050604170004030f060700102380407031302030410010503170400081a0100071901030111040607150401051b0704031c0703011207010616050400140702070f000503182380401021101080714030504130500031c0100081a0107031008050618040002150008011b0508041905030217050107160201020f040708122380104081206080716040305170703050f070401150801051c0100061103060214070005180105061a0105061004030013020705190700081b";
        #endregion

        public LuckyEgyptLinkedGameLogic()
        {
            _gameID     = GAMEID.LuckyEgyptLinked;
            GameName    = "LuckyEgyptLinked";
        }
        protected override string buildInitString(string strGlobalUserID, double balance, Currencies currency)
        {
            string initString = base.buildInitString(strGlobalUserID, balance, currency);
            BaseAmaticExtra21InitPacket extraInitPacket = new BaseAmaticExtra21InitPacket(initString, Cols, FreeCols, ReelSetColBitNum, ReelSetBitNum, ExtraString);

            if (_dicUserBetInfos.ContainsKey(strGlobalUserID) && _dicUserResultInfos.ContainsKey(strGlobalUserID))
            {
                BaseAmaticSlotBetInfo       betInfo     = _dicUserBetInfos[strGlobalUserID];
                BaseAmaticSlotSpinResult    spinResult  = _dicUserResultInfos[strGlobalUserID];
                
                BaseAmaticExtra21Packet     amaPacket   = new BaseAmaticExtra21Packet(spinResult.ResultString, Cols, FreeCols);
                extraInitPacket.extrastr = amaPacket.extrastr;
            }

            AmaticEncrypt encrypt = new AmaticEncrypt();
            initString = encrypt.WriteLeftHexString(initString, ExtraReelsetString + extraInitPacket.extrastr);
            return initString;
        }
        protected override string buildResMsgString(string strGlobalUserID, double balance, double betMoney, BaseAmaticSlotBetInfo betInfo, string spinString, AmaticMessageType type)
        {
            BaseAmaticExtra21Packet packet = null;
            double pointUnit = getPointUnit(betInfo);

            if (!string.IsNullOrEmpty(spinString))
            {
                packet = new BaseAmaticExtra21Packet(spinString, Cols, FreeCols);
                
                packet.betstep = betInfo.PlayBet;
                packet.balance = (long)Math.Round(((balance - betMoney) / pointUnit));
                convertWinsByBet(balance, packet, betInfo);
            }
            else
            {
                packet = new BaseAmaticExtra21Packet(Cols, FreeCols, (int)type, (int)LINES.Last(), ExtraString);

                packet.balance  = (long)Math.Round(balance / pointUnit, 0);
                packet.betstep  = 0;
                packet.betline  = LINES.Last();

                if (_dicUserBetInfos.ContainsKey(strGlobalUserID) && _dicUserResultInfos.ContainsKey(strGlobalUserID))
                {
                    BaseAmaticSlotSpinResult spinResult = _dicUserResultInfos[strGlobalUserID];

                    BaseAmaticExtra21Packet oldPacket = new BaseAmaticExtra21Packet(spinResult.ResultString, Cols, FreeCols);
                    packet.betstep          = oldPacket.betstep;
                    packet.betline          = oldPacket.betline;
                    packet.reelstops        = oldPacket.reelstops;
                    packet.freereelstops    = oldPacket.freereelstops;

                    if (type == AmaticMessageType.HeartBeat)
                    {
                        int cnt = oldPacket.linewins.Count;
                        packet.linewins     = new List<long>();
                        for(int i = 0; i < cnt; i++)
                        {
                            packet.linewins.Add(0);
                        }
                    }
                    else if(type == AmaticMessageType.Collect)
                    {
                        packet.totalfreecnt = oldPacket.totalfreecnt;
                        packet.curfreecnt   = oldPacket.curfreecnt;
                        packet.curfreewin   = oldPacket.curfreewin;
                        packet.freeunparam1 = oldPacket.freeunparam1;
                        packet.freeunparam2 = oldPacket.freeunparam2;
                        packet.totalfreewin = oldPacket.totalfreewin;

                        int cnt = oldPacket.linewins.Count;
                        packet.linewins     = new List<long>();
                        for(int i = 0; i < cnt; i++)
                        {
                            packet.linewins.Add(0);
                        }
                    }

                    packet.extrastr = oldPacket.extrastr;
                }
            }

            return buildSpinString(packet);
        }
        protected override string buildSpinString(AmaticPacket packet)
        {
            string newSpinString = base.buildSpinString(packet);

            BaseAmaticExtra21Packet extraWildPacket = null;
            if (packet is BaseAmaticExtra21Packet)
                extraWildPacket = packet as BaseAmaticExtra21Packet;
            else
                extraWildPacket = new BaseAmaticExtra21Packet(Cols, FreeCols, (int)packet.messagetype, (int)LINES.Last(), ExtraString);

            AmaticEncrypt encrypt = new AmaticEncrypt();
            newSpinString = encrypt.WriteLeftHexString(newSpinString, extraWildPacket.extrastr);
            return newSpinString;
        }
    }
}
