using GITProtocol;
using PCGSharp;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SlotGamesNode.GameLogics
{
    class EscapeThePyramidFireIceGameLogic : BasePPSlotGame
    {
        #region 게임고유속성값
        protected override string SymbolName
        {
            get
            {
                return "vs10fireice";
            }
        }
        protected override int ClientReqLineCount
        {
            get { return 10; }
        }
        protected override int ServerResLineCount
        {
            get { return 10; }
        }
        protected override int ROWS
        {
            get
            {
                return 6;
            }
        }
        protected override string InitDataString
        {
            get
            {
                return "def_s=7,9,11,11,4,12,6,10,5,5,5,8,7,9,7,7,4,11,5,8,6,8,5,8,4,12,11,4,4,10,6,8,7,9,7,8&cfgs=1&ver=3&def_sb=4,9,8,4,5,12&reel_set_size=9&def_sa=6,8,11,8,6,12&scatters=1~0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0~0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0~1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1;3~0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0~0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0~1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1&rt=d&gameInfo={rtps:{ante:\"96.51\",purchase:\"96.55\",regular:\"96.50\"},props:{max_rnd_sim:\"1\",max_rnd_hr:\"26993323\",max_rnd_win:\"5000\",max_rnd_sim_a:\"1\",max_rnd_win_a:\"2500\",max_rnd_hr_a:\"7042419\"}}&wl_i=tbm~5000;tbm_a~2500&sc=20.00,40.00,60.00,80.00,100.00,200.00,300.00,400.00,500.00,750.00,1000.00,1500.00,2500.00,5000.00,7500.00,10000.00&defc=100.00&purInit_e=1&wilds=2~10000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0~1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1&bonuses=0&bls=10,20&ntp=0.00&paytable=0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;5000,2000,2000,2000,2000,750,750,750,750,750,750,300,300,300,300,300,300,100,100,100,100,100,100,20,20,20,20,20,20,0,0,0,0,0,0,0;2500,1000,1000,1000,1000,500,500,500,500,500,500,200,200,200,200,200,200,80,80,80,80,80,80,15,15,15,15,15,15,0,0,0,0,0,0,0;2000,750,750,750,750,400,400,400,400,400,400,150,150,150,150,150,150,60,60,60,60,60,60,12,12,12,12,12,12,0,0,0,0,0,0,0;1500,600,600,600,600,250,250,250,250,250,250,120,120,120,120,120,120,50,50,50,50,50,50,10,10,10,10,10,10,0,0,0,0,0,0,0;1200,500,500,500,500,200,200,200,200,200,200,100,100,100,100,100,100,40,40,40,40,40,40,5,5,5,5,5,5,0,0,0,0,0,0,0;1000,400,400,400,400,150,150,150,150,150,150,80,80,80,80,80,80,20,20,20,20,20,20,4,4,4,4,4,4,0,0,0,0,0,0,0;800,300,300,300,300,120,120,120,120,120,120,60,60,60,60,60,60,15,15,15,15,15,15,3,3,3,3,3,3,0,0,0,0,0,0,0;600,250,250,250,250,100,100,100,100,100,100,50,50,50,50,50,50,12,12,12,12,12,12,2,2,2,2,2,2,0,0,0,0,0,0,0;500,200,200,200,200,80,80,80,80,80,80,40,40,40,40,40,40,10,10,10,10,10,10,1,1,1,1,1,1,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0&total_bet_max=10,000,000.00&reel_set0=12,7,10,12,10,8,11,1,6,9,11,9,6,11,11,11,8,8,11,12,10,5,9,6,8,8,12,4,6,5,12,12,12,6,8,5,12,11,9,10,11,9,11,10,8,5,6,6,6,9,8,12,6,10,7,6,10,6,4,10,9,8,1,4,7,7,7,1,8,10,7,7,4,11,11,7,8,1,5,4,10,8,8,8,11,11,5,12,6,12,7,12,12,8,9,11,4,10,10,10,6,11,9,4,11,11,10,7,7,12,10,9,6,9,5,9~7,10,7,6,9,6,5,10,12,12,12,5,7,8,9,4,8,7,12,5,5,5,6,8,10,9,6,11,5,6,5,7,7,7,4,10,4,12,8,7,7,5,5,8,8,8,6,8,11,12,5,7,7,8,12,9,9,9,8,9,11,4,9,12,6,9,6,9,5~10,12,7,11,5,9,11,11,11,12,4,10,10,8,11,9,12,12,12,6,7,9,8,11,7,5,7,7,7,6,9,6,5,12,4,12,8,8,8,5,10,7,8,4,7,9,9,9,12,12,9,11,10,4,10,10,10,11,12,8,11,10,9,6,10,9~6,9,9,5,8,4,12,12,12,10,6,10,11,4,7,11,5,5,5,12,6,11,6,4,10,5,6,6,6,11,12,4,7,4,6,9,7,7,7,8,5,5,7,11,12,9,9,9,12,9,5,9,7,4,12,10,10,10,7,12,6,5,4,6,12~4,10,9,5,11,10,12,11,10,10,4,11,11,11,6,8,7,5,9,5,12,6,5,12,8,6,6,6,11,8,7,4,5,9,4,10,7,4,5,7,7,7,8,4,9,11,12,10,8,10,12,4,11,4,8,8,8,10,8,6,6,10,5,7,10,11,12,11,11,10,10,10,8,11,12,9,4,5,10,9,6,4,7,10,8,11~5,12,7,6,4,12,8,12,6,7,11,12,5,4,11,11,11,8,7,5,4,7,10,6,7,6,4,11,10,11,9,7,9,6,6,6,4,5,11,9,12,5,6,11,11,7,6,11,11,4,6&accInit=[{id:0,mask:\"fm\"}]&reel_set2=10,8,10,5,5,7,11,11,11,5,11,11,4,10,11,7,8,4,4,4,5,11,11,12,9,8,6,5,5,5,4,8,10,11,7,7,6,7,7,7,6,4,9,12,7,9,6,10,9,9,9,7,8,12,6,12,5,9,10,10,10,11,4,9,4,12,10,9,9,4~12,10,5,10,11,10,4,7,8,12,4,11,4,11,8,8,8,6,7,9,9,4,12,5,8,4,12,7,10,9,9,6,9,9,9,11,9,7,5,11,6,10,9,10,5,11,10,4,11,10,9,10,10,10,11,8,9,9,12,10,8,11,10,10,7,4,8,12,4,12,9,12~4,12,6,8,12,12,12,5,4,6,7,5,5,7,5,5,5,9,11,6,12,10,10,11,7,7,7,8,12,10,7,7,8,6,8,8,8,4,9,5,9,7,8,10,10,10,8,11,10,11,7,5,7~4,9,10,7,6,11,7,7,4,8,6,6,6,9,11,8,10,6,7,12,9,5,6,7,7,7,6,5,9,11,10,6,6,7,7,4,9,5,9,9,9,10,5,6,6,7,5,4,6,10,9,9,6,10,10,10,4,9,7,12,10,9,7,12,7,7,11,4,12,11~11,10,11,12,12,4,10,9,12,12,12,7,5,12,11,10,12,12,5,10,5,5,5,4,7,12,7,6,9,8,7,6,6,6,5,9,11,10,4,10,7,8,6,8,8,8,12,6,5,10,9,5,5,4,10,10,10,7,6,7,8,7,5,6,10,6,5,12~12,4,4,8,6,7,12,12,12,9,10,5,10,10,11,10,8,4,4,4,5,6,12,11,6,9,10,4,5,5,5,9,11,7,4,9,11,8,12,6,6,6,5,7,12,7,10,8,10,11,7,7,7,3,4,5,12,9,11,6,8,8,8,7,4,4,6,5,4,8,12,10,10,10,5,11,8,11,10,8,12,3,5&reel_set1=1,12,10,6,12,12,10,9,4,11,9,11,11,11,9,5,12,9,4,11,4,7,8,6,10,4,7,8,12,12,12,6,8,9,1,5,12,9,8,5,4,6,4,1,9,6,6,6,10,10,9,4,6,8,10,7,9,12,5,8,6,11,7,7,7,10,1,6,7,11,7,11,11,7,8,10,9,4,9,10,10,10,6,10,11,5,7,10,11,10,12,11,6,7,11,12,5,12~9,5,6,9,7,4,12,8,5,10,11,6,12,12,12,7,12,10,7,8,12,8,11,4,9,12,7,11,5,7,7,7,12,9,7,5,6,5,4,7,7,9,6,4,11~10,9,12,9,4,12,10,12,9,9,6,11,11,11,4,4,9,11,4,8,5,11,8,11,4,9,4,4,4,8,7,5,11,5,7,4,11,10,9,7,8,8,8,12,9,8,10,6,8,6,9,9,8,4,9,9,9,4,6,10,7,10,12,10,11,8,4,11,6,11,11,8~12,4,6,11,5,10,7,8,12,6,9,5,5,5,8,7,7,12,6,7,6,5,8,7,7,10,6,6,6,12,8,4,6,7,4,7,8,11,5,5,7,7,7,8,7,6,6,11,4,9,8,12,8,5,4,8,8,8,6,7,5,5,9,5,9,11,7,4,6,8,10,5~6,8,9,12,8,8,11,9,7,5,8,9,7,8,5,6,8,8,8,11,8,10,8,6,7,5,6,8,6,12,10,6,10,4,11,10,10,10,12,7,6,5,4,10,4,10,5,7,5,10,9,7,6,12,10,7,11,5~7,5,8,10,6,6,11,7,5,5,5,4,5,6,10,12,4,5,4,7,6,6,6,7,9,5,8,6,9,9,10,12,10,7,7,7,11,8,10,10,11,7,9,9,9,7,4,10,9,10,11,6,8,5,10,10,10,11,12,10,10,6,9,11,7,6,10,4&reel_set4=1,10,12,12,9,10,12,4,12,10,7,12,12,12,10,6,1,7,12,11,12,11,10,9,9,5,12,8,8,8,10,9,11,4,5,9,4,8,10,9,8,6,11,9,9,9,11,9,7,11,8,8,6,12,12,8,11,11,9,10,10,10,7,6,9,9,6,10,5,10,11,8,8,5,10,5~9,10,6,11,4,10,7,12,12,12,10,9,10,9,4,6,7,12,7,4,4,4,5,6,4,11,10,7,6,11,6,6,6,9,5,11,5,6,8,11,8,12,8,8,8,9,4,5,9,6,4,12,8,6,9,9,9,10,5,8,12,12,4,9,10,12,10,10,10,12,9,8,4,11,12,6,12,12,11~9,6,9,10,12,12,5,11,6,10,11,11,11,4,11,12,7,12,9,7,12,12,6,9,12,12,12,10,4,7,8,7,9,6,12,10,4,6,6,6,8,5,6,4,11,9,4,11,9,10,5,7,7,7,12,10,6,9,8,4,11,8,5,4,9,9,9,7,5,8,9,11,4,11,7,12,7,12,9~7,11,12,12,10,6,11,11,11,4,7,11,8,11,11,7,12,12,12,8,12,11,12,12,9,5,5,5,10,9,10,12,8,8,5,7,7,7,8,10,5,9,6,5,10,8,8,8,9,10,9,8,11,5,4,9,9,9,10,8,7,10,4,5,10,10,10,4,5,7,7,9,12,11,11,9~6,5,11,9,12,8,4,12,12,12,10,7,9,10,11,4,12,12,6,6,6,5,12,7,7,8,10,11,10,7,7,7,5,9,8,6,12,9,10,8,8,8,12,4,10,12,10,11,6,6,10,10,10,6,8,8,7,7,4,10,11,9~8,7,9,6,4,6,12,10,11,11,11,4,5,3,5,11,10,8,11,8,12,12,12,6,9,12,6,10,8,10,11,11,6,6,6,5,8,11,10,12,10,11,12,4,8,8,8,3,9,10,7,11,7,10,8,10,10,10,6,12,12,10,6,9,7,10,12,9,7&purInit=[{bet:1000}]&reel_set3=12,9,11,10,7,10,6,6,11,11,11,9,5,8,6,9,5,12,11,12,11,4,4,4,7,8,4,7,9,8,4,10,4,4,5,5,5,10,9,11,9,7,11,6,4,9,10,4,6,6,6,10,8,9,8,10,12,11,9,4,7,7,7,9,5,6,6,11,4,5,5,12,10,8,10,10,10,4,12,10,7,5,5,10,6,5,10,4,8~7,10,9,7,9,9,12,5,5,5,6,4,10,11,12,10,11,6,8,8,8,4,8,9,10,4,8,10,9,9,9,8,8,10,12,4,5,5,12,11,10,10,10,11,5,9,9,11,10,12,7,8~7,7,5,7,7,12,7,8,6,6,4,5,6,5,6,12,9,5,4,10,6,6,6,5,4,5,4,6,7,8,9,11,4,5,12,11,6,8,7,4,11,9,10,7,7,7,12,8,12,5,7,6,9,10,7,5,9,12,6,7,5,6,6,10,6,7,4,5~12,9,8,10,6,7,11,9,5,7,11,11,11,10,6,10,11,12,8,10,8,4,10,4,10,11,8,8,8,6,9,5,11,8,7,12,4,9,12,10,10,10,11,5,11,6,10,8,11,9,4,8,4,10,7,5~7,5,7,6,5,6,12,5,4,6,6,6,12,5,10,9,9,10,11,7,4,6,6,7,7,7,12,6,9,4,9,8,5,11,6,11,8,8,8,9,7,6,6,4,10,4,10,12,4,9,9,9,12,5,6,7,8,9,12,10,8,7,6,10,10,10,9,8,7,9,7,4,7,6,5,11,7,12~9,12,4,5,12,6,9,7,11,6,11,11,11,5,6,4,10,11,10,12,8,7,12,7,6,6,6,12,6,8,10,5,7,5,8,6,10,11,7,7,7,4,8,4,3,9,10,11,11,4,7,8,8,8,11,8,11,12,5,6,4,10,7,3,9,9,9,3,5,6,8,9,7,9,5,4,11,9,4,6&reel_set6=9,9,7,12,9,7,11,10,6,11,5,12,11,11,11,5,7,11,11,7,9,6,5,10,9,10,8,12,12,12,5,10,6,9,10,12,12,4,5,12,9,8,5,5,5,11,12,8,6,7,12,10,11,9,12,11,9,12,9,9,9,10,11,8,7,4,8,4,9,6,9,11,11,5,4,5~7,4,12,7,5,8,11,10,7,12,8,8,8,6,4,6,12,8,5,12,4,6,10,10,9,4,9,9,9,8,5,10,9,12,5,11,9,6,12,9,11,10,10,10,12,4,8,9,11,7,8,6,10,12,11,7~11,10,9,12,9,12,10,8,12,11,11,11,8,10,11,5,6,4,10,8,4,7,12,12,12,6,6,4,7,4,9,11,12,7,6,6,6,5,7,6,12,7,11,6,5,10,9,9,9,11,9,12,8,7,8,9,10,11,6~10,9,8,12,11,7,10,11,10,6,8,9,12,8,4,4,4,12,4,10,4,12,7,9,4,6,7,6,10,5,11,6,6,6,5,7,9,6,5,10,11,7,7,11,9,10,8,9,5,7,7,7,4,12,9,6,8,11,7,4,12,8,6,4,6,12,9,9,9,11,12,6,5,12,4,8,11,6,4,7,4,12,9,11,5~8,4,5,7,11,4,11,11,11,12,10,5,8,10,11,4,6,11,12,12,12,11,12,6,10,10,12,9,9,9,7,6,7,11,6,12,9,6,10,10,10,9,12,7,12,8,6,8,11,8,5~12,6,10,7,12,8,12,6,5,4,11,7,6,11,11,11,10,5,9,11,8,7,7,9,8,11,11,10,12,9,5,5,5,11,8,10,6,7,4,7,4,11,12,8,4,9,11,8,7,7,7,9,7,10,5,12,9,5,11,8,9,5,7&reel_set5=1,11,11,10,10,12,9,1,11,11,11,5,5,6,4,7,6,10,12,12,12,9,7,9,4,7,10,8,12,10,9,5,5,5,10,12,4,9,10,4,12,5,9,9,9,8,12,8,7,5,4,10,11,12,10,10,10,11,5,8,7,10,11,10,9,11,6~4,11,7,11,12,12,12,5,10,9,7,9,7,6,6,6,5,10,6,12,8,10,8,7,7,7,12,6,11,10,5,9,9,9,6,6,4,5,12,12,10,10,10,11,12,9,8,9,7,10,4~11,11,10,12,7,11,10,11,11,11,7,5,7,9,5,6,8,5,9,12,12,12,9,4,12,7,6,11,12,7,7,7,9,11,8,4,5,6,4,10,8,8,8,11,7,12,10,10,4,8,12,9,9,9,7,6,7,11,4,8,10,9,5,10,10,10,12,4,8,9,10,8,9,4,12~6,8,10,12,5,7,12,4,12,8,11,11,11,10,9,8,5,4,5,5,8,12,9,12,9,12,12,12,6,7,4,12,9,6,12,11,4,10,5,5,5,9,10,10,12,9,9,6,11,9,12,10,11,9,9,9,8,11,12,12,5,8,11,10,11,12,6,10,10,10,4,9,9,7,10,11,6,8,9,11,9,5~10,7,6,6,8,4,11,5,11,12,10,11,11,11,9,4,12,9,11,9,11,4,7,8,7,12,12,12,9,12,10,5,12,4,9,8,10,5,10,8,6,6,6,12,6,5,7,10,12,11,10,11,11,6,4,10,10,10,8,11,7,9,10,12,9,11,11,10,6,6,8~8,11,11,9,12,12,5,5,3,11,11,11,5,4,9,10,9,11,4,11,8,10,12,12,12,7,5,8,6,12,4,10,7,12,4,4,4,11,9,12,9,4,4,8,7,5,5,11,7,5,5,5,11,5,6,7,11,8,11,4,12,8,6,8,8,8,12,12,9,12,4,8,6,9,10,8,12,10,10,10,12,10,8,10,9,5,9,12,11,4,3&reel_set8=5,8,7,6,8,8,7,6,4,4,4,9,7,5,5,4,5,11,10,8,6,6,6,10,6,9,11,4,7,9,5,1,4,7,7,7,4,10,6,10,4,11,7,1,7,8,8,8,4,1,7,6,5,4,12,5,8,6,11~6,7,5,10,6,12,12,12,5,12,10,12,11,6,10,4,4,4,11,9,11,10,5,8,12,6,6,6,5,7,10,4,5,8,7,7,7,4,4,5,4,4,9,12,8,8,8,7,10,12,7,7,6,8,10,10,10,7,6,4,4,9,4,11,8~5,12,4,10,11,9,11,4,4,4,6,12,9,8,12,4,11,6,11,5,5,5,9,5,5,4,7,8,11,7,5,6,6,6,5,9,12,5,10,8,4,7,7,7,4,5,9,12,7,10,7,6,8,9,9,9,7,4,9,6,4,4,7,6,4,10,10,10,6,4,7,6,4,5,6,10,10,8~9,5,7,4,7,4,6,8,4,4,4,7,10,5,8,7,5,5,6,5,6,5,5,5,8,10,11,6,8,9,7,4,5,6,6,6,8,4,8,8,7,11,12,5,6,7,7,7,4,6,8,7,6,4,11,4,8,8,8,4,7,9,9,4,11,9,12,6,7,9,9,9,5,4,6,12,11,12,5,9,9,7~8,5,5,8,6,4,4,4,5,10,9,8,6,7,4,5,5,5,12,9,11,9,5,7,10,6,6,6,7,11,4,5,8,4,7,8,8,8,11,10,7,6,4,8,12,9,9,9,6,9,6,9,11,5,10,10,10,6,12,10,6,4,4,5,12,5~5,6,10,4,4,12,7,8,12,12,12,4,6,12,6,7,8,9,8,4,4,4,8,4,12,7,5,10,6,9,5,5,5,4,7,8,5,4,12,3,7,7,7,6,8,11,10,7,4,4,11,8,8,8,9,3,4,11,8,7,9,3,10,10,10,5,11,5,10,6,5,8,4,12,7&reel_set7=4,10,8,7,7,6,12,4,4,4,11,5,11,4,10,12,5,12,9,6,6,6,10,9,4,11,6,7,8,11,4,7,7,7,5,9,7,9,11,5,8,6,12,6,9,9,9,6,12,9,11,8,6,7,12,10,8~6,9,7,10,4,10,6,8,7,12,8,11,11,11,6,6,12,5,10,4,11,5,7,11,6,5,12,12,12,9,4,6,9,9,10,7,11,11,6,4,9,6,6,6,8,12,11,5,8,6,8,12,5,12,12,9,9,9,10,11,6,12,10,4,7,9,8,10,12,11,7~5,12,8,9,7,12,4,7,10,9,7,6,11,11,11,6,11,10,9,7,9,5,11,12,8,7,7,9,5,4,5,5,5,12,6,4,9,10,6,8,11,10,8,4,11,5,7,7,7,11,8,9,5,12,9,11,8,4,10,12,6,11,10,11~10,7,5,6,10,12,6,10,8,4,8,6,5,7,6,11,11,11,9,10,7,6,8,10,11,12,5,11,5,12,11,12,11,8,12,12,12,8,7,5,4,6,12,4,11,9,4,8,9,9,8,10,12,9,9,9,12,6,11,8,9,4,6,11,12,4,10,10,11,5,9,6,10,10,10,6,12,10,11,12,12,7,11,11,8,5,9,12,6,9,10,7~11,12,11,9,4,5,9,7,4,7,9,11,11,11,9,6,8,7,6,11,10,6,4,12,12,12,4,8,9,6,11,9,9,12,7,11,11,5,5,5,12,5,10,5,7,10,12,5,8,10,11,10,9,9,9,8,4,12,5,9,10,11,9,12,11,5,12~11,12,11,10,7,11,9,6,7,10,8,12,4,8,8,8,9,5,4,7,4,12,5,9,12,8,7,11,10,9,9,9,11,10,9,9,6,5,4,8,9,6,11,4,5,6,10,10,10,11,7,8,10,8,5,11,6,7,12,6,10,4,12,8,10&total_bet_min=200.00";
            }
        }
	
        protected override double PurchaseFreeMultiple
        {
            get { return 100; }
        }
        protected override bool SupportPurchaseFree
        {
            get { return true; }
        }
        protected override bool HasPurEnableOption
        {
            get { return true; }
        }
	
	
        protected override double MoreBetMultiple
        {
            get { return 2; }
        }
        protected override bool SupportMoreBet
        {
            get { return true; }
        }
	
        #endregion
        public EscapeThePyramidFireIceGameLogic()
        {
            _gameID = GAMEID.EscapeThePyramidFireIce;
            GameName = "EscapeThePyramidFireIce";
        }
        protected override void setupDefaultResultParams(Dictionary<string, string> dicParams, double userBalance, int index, int counter, string initString)
        {
            base.setupDefaultResultParams(dicParams, userBalance, index, counter, initString);
	    	dicParams["reel_set"] = "0";
	        dicParams["st"] = "rect";
	        dicParams["sw"] = "6";
	        dicParams["bl"] = "0";
        }
        protected override void convertWinsByBet(Dictionary<string, string> dicParams, float currentBet)
        {
            if (dicParams.ContainsKey("rs_iw"))
            {
                string[] strParts = dicParams["rs_iw"].Split(new string[] { "," }, StringSplitOptions.None);

                for (int i = 0; i < strParts.Length; i++) 
                {
                    strParts[i] = convertWinByBet(strParts[i], currentBet);
                }
                dicParams["rs_iw"] = string.Join(",", strParts);
            }

            if (dicParams.ContainsKey("rs_win"))
            {
                string[] strParts = dicParams["rs_win"].Split(new string[] { "," }, StringSplitOptions.None);

                for (int i = 0; i < strParts.Length; i++)
                {
                    try
                    {
                        strParts[i] = convertWinByBet(strParts[i], currentBet);
                    }
                    catch
                    {
                        strParts[i] = string.Empty;
                    }
                }
                dicParams["rs_win"] = string.Join(",", strParts);
            }


            base.convertWinsByBet(dicParams, currentBet);
        }
	
        protected override void readBetInfoFromMessage(GITMessage message, string strGlobalUserID, Currencies currency)
        {
            try
            {
                string strInitString = ChipsetManager.Instance.convertTo(currency, this.InitDataString, this.SymbolName);
                var dicParams = splitResponseToParams(strInitString);

                double minChip = 0.0, maxChip = 0.0;
                getMinMaxChip(dicParams["sc"], ref minChip, ref maxChip);


                BasePPSlotBetInfo betInfo = new BasePPSlotBetInfo();
                betInfo.BetPerLine = (float)message.Pop();
                betInfo.LineCount = (int)message.Pop();
		
                int bl = (int)message.Pop();
                if (bl == 0)
                    betInfo.MoreBet = false;
                else
                    betInfo.MoreBet = true;
		
		
                if (message.DataNum >= 3)
                    betInfo.PurchaseFree = true;
                else
                    betInfo.PurchaseFree = false;
		
                if (betInfo.BetPerLine <= 0.0f)
                {
                    _logger.Error("{0} betInfo.BetPerLine <= 0 in EscapeThePyramidFireIceGameLogic::readBetInfoFromMessage {1}", strGlobalUserID, betInfo.BetPerLine);
                    return;
                }
		
                if (betInfo.MoreBet && betInfo.PurchaseFree)
                {
                    _logger.Error("{0} betInfo.MoreBet and  PurchasedFreeSpin is same time true in EscapeThePyramidFireIceGameLogic::readBetInfoFromMessage", strGlobalUserID);
                    return;
                }
		
                if (!isNotIntergerMultipleBetPerLine(betInfo.BetPerLine, minChip))
                {
                    _logger.Error("{0} betInfo.BetPerLine is illegual: {1} != {2} * integer", strGlobalUserID, betInfo.BetPerLine, minChip);
                    return;
                }

                if (betInfo.LineCount != this.ClientReqLineCount)
                {
                    _logger.Error("{0} betInfo.LineCount is not matched {1} != {2}", strGlobalUserID, betInfo.LineCount, this.ClientReqLineCount);
                    return;
                }
                BasePPSlotBetInfo oldBetInfo = null;
                if (_dicUserBetInfos.TryGetValue(strGlobalUserID, out oldBetInfo))
                {
                    if (oldBetInfo.HasRemainResponse)
                        return;

                    oldBetInfo.BetPerLine   = betInfo.BetPerLine;
                    oldBetInfo.LineCount    = betInfo.LineCount;
                    oldBetInfo.MoreBet      = betInfo.MoreBet;
                    oldBetInfo.PurchaseFree = betInfo.PurchaseFree;
                }
                else
                {
                    _dicUserBetInfos.Add(strGlobalUserID, betInfo);
                }
            }
            catch (Exception ex)
            {
                _logger.Error("Exception has been occurred in EscapeThePyramidFireIceGameLogic::readBetInfoFromMessage {0}", ex);
            }
        }
	
    }
}
