using GITProtocol;
using PCGSharp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SlotGamesNode.GameLogics
{
    class SnakesAndLaddersSnakeEyesGameLogic : BasePPSlotGame
    {
        #region 게임고유속성값
        protected override string SymbolName
        {
            get
            {
                return "vs10snakeeyes";
            }
        }
        protected override bool SupportReplay
        {
            get
            {
                return true;
            }
        }
        protected override int ClientReqLineCount
        {
            get { return 10; }
        }
        protected override int ServerResLineCount
        {
            get { return 10; }
        }
        protected override int ROWS
        {
            get
            {
                return 3;
            }
        }
        protected override string InitDataString
        {
            get
            {
                return "def_s=4,10,8,4,9,5,8,5,5,6,3,9,6,3,9&cfgs=6702&ver=3&mo_s=2&mo_v=1,2,3&def_sb=3,11,11,3,8&reel_set_size=3&def_sa=3,7,10,4,11&scatters=1~0,0,0,0,0~0,0,0,0,0~1,1,1,1,1&rt=d&gameInfo={props:{max_rnd_sim:\"1\",max_rnd_hr:\"3623188\",max_rnd_win:\"5300\"}}&wl_i=tbm~5300&sc=20.00,40.00,60.00,80.00,100.00,200.00,300.00,400.00,500.00,750.00,1000.00,1500.00,2500.00,5000.00,7500.00,10000.00&defc=100.00&wilds=2~500,250,100,0,0~1,1,1,1,1&bonuses=0&paytable=0,0,0,0,0;0,0,0,0,0;0,0,0,0,0;500,250,100,0,0;200,100,50,0,0;200,100,50,0,0;150,75,30,0,0;100,40,15,0,0;100,40,15,0,0;50,15,5,0,0;50,15,5,0,0;50,15,5,0,0;0,0,0,0,0;0,0,0,0,0;0,0,0,0,0;0,0,0,0,0&reel_set0=6,5,8,6,10,3,5,4,3,4,9,5,9,2,5,11,4,8,8,10,7,3,7,4,8,8,4,8,11,4,6,11,6,9,7,4,5,9,3,11,7,3,4,8,5,6,9,9,8,9,1,6,4,7,1,10,11,1,4,10,4,6,1,5,1,8,5,3,8,6,10,11,7,6,7,6,10,9,11,5,7,6,10,6,11,5,3,1,3,5,7,8,10,7,5,7,2,6,9,11,3,11,11,7,8,8,11,9,1,11,4,8,8,9,5,8,7,9,7,8,11,6,5,7,8,5,3,6,11,9,9,5,9,10,8,7,10,4,5,7,6,8,6,1,10,11,8,9,6,9,4,1,3,6,9,3,10,3,11,8,11,7,8,7~8,7,9,5,11,9,8,4,5,10,3,7,8,5,3,8,11,10,6,8,4,8,5,6,8,10,6,3,6,3,10,7,1,10,3,6,8,1,6,1,11,10,5,6,11,10,5,1,4,11,4,11,8,8,10,11,1,7,4,9,4,5,11,4,6,8,9,8,7,3,10,1,4,11,8,10,4,5,7,4,7,8,3,4,8,5,9,10,3,10,11,7,3,11,7,9,3,10,9,10,6,11,7,9,5,6,9,11,6,1,5,7,5,8,5,1,7,1,3,7,8,11,10,5,7,5,9,3,9,11,4,3,7,4,8,2,8,11,7,10,6,11,6,11,9,4,8,9,5,3,10,7,8,5,9,6,4,11,2,5,8,5,10,8,8,6,8,1,6,11,6,8,4,6,8,4,10,6,8~7,5,7,8,5,6,4,10,7,6,8,10,8,6,5,4,9,11,9,11,10,7,10,8,6,4,10,3,4,9,8,5,8,7,5,7,4,8,4,11,6,8,10,5,11,8,4,11,7,3,6,7,6,7,3,6,3,7,11,10,6,10,3,5,8,6,9,10,11,10,5,11,3,10,6,10,8,4,3,1,10,5,7,9,10,7,8,9,7,6,8,2,4,9,5,10,8,7,11,7,5,8,4,6,4,3,10,7,11,9,8,10,9,8,10,4,6,8,11,7,4,6,8,11,5,4,5,7,6,10,1,8,4,5,8,7,6,11,8,9,7,11,7,8,3,4,3,7,9,7,8,6,7,9,5,3,2,8,4,11,9,6~9,10,11,5,3,10,6,7,10,5,4,10,7,11,6,7,9,11,4,9,11,11,9,3,8,9,4,7,9,11,10,8,3,11,10,11,10,4,6,9,10,3,6,8,9,7,10,8,9,7,5,7,1,2,7,10,5,1,11,2,11,10,4,11,7,10,9,11,10,8,7,10,9,4,10,3,11,7,10,8,7,9,4,7,8,7,11,9,6,10,6,7,4,5,8,3,10,9,4,11,5,6,8,8,10,5,8,9,3,1,7,6,11,9,10,11,11,1,7,5,10,6,1,3,11,11,7,11,10,3,8,6,7,11,3,9,7,9,11,5,10,4,11,10,8,9,10,11~3,6,10,9,4,9,8,9,7,3,5,2,7,7,8,11,10,5,7,8,11,7,11,11,7,8,9,11,3,6,10,8,10,4,9,7,10,6,10,10,11,6,8,11,7,5,7,7,8,11,11,10,6,10,7,8,9,8,4,1,7,11,9,10,6,4,7,7,10,10,10,8,7,9,11,5,8,4,1,6,11,7,4,10,3,7,8,10,8,11,8,9,7,5,11,8,10,9,3,8,3,8,9,10,8,4,3,7,11,8,9,10,5,3,7,10,11,1,8,6,8,7,10,5,7,5,3,9,8,9,7,10,3,2,11,11,8,7,5,6,9,6,11&accInit=[{id:0,mask:\"d\"}]&reel_set2=11,9,7,9,11,8,6,8,1,3,9,11,4,3,8,5,9,8,7,4,11,11,9,1,3,6,8,4,5,6,8,7,11,7,10,8,1,11,10,6,5,11,11,8,1,9,7,7,8,4,11,8,6,11,9,1,10,5,4,5,11,2,5,4,5,10,2,1,8,5,7,3,7,8,8,10,5,9,10,1,7,7,8,6,10,9,8,10,1,5,6,11,5,11,4,7,6,3,8,9,6,8,1,4,6,5,6,10,9,11,9,7,3,5,1,11,5,4,7,10,7,7,11~5,2,10,9,4,10,7,8,7,3,6,5,8,1,7,6,3,7,8,10,2,10,11,11,8,8,6,1,8,9,8,10,4,6,7,9,8,9,7,11,7,9,4,7,8,5,11,8,7,4,1,6,4,11,3,10,8,7,8,7,8,4,3,10,6,8,8,4,8,1,9,3,11,7,11,11,5,4,5,10,8,1,10,9,8,4,9,6,5,6,10,7,5,11,8,4,9,5,11,7,1,6,10,5,6,3,10,7,3,11,6,5,3,11,1,10,8,4,11,5,8,10,4,8,7,11,3,5,7,5,9,10,1,8,9,5,3,8,10,11,11,9,11,6,5,9,1,11,5,10,6,4,7,8,8,3,11,8,7,10,5,1,9,10,6,10,4,11,5,3,11,5,4,8,10,6,1,7,11,10,3,11,8,3,10,6~3,6,7,10,4,6,11,4,9,8,5,7,9,1,8,4,3,7,4,5,9,11,4,10,7,6,8,6,4,1,7,9,8,3,8,7,2,10,7,4,7,10,7,11,10,4,7,5,10,8,3,1,9,6,8,5,8,10,7,3,6,8,4,8,6,11,4,6,1,8,6,5,8,5,6,3,5,4,8,7,5,9,3,5,8,1,10,7,10,8,7,10,11,3,8,11,4,10,6,11,1,8,11,5,8,6,10,9,10,7,8,6,4,10,5,1,7,10,5,9,11,3,11,7,11,8,9,10,6,4,7,8,6,5,1,3,5,6,7,9,11,9,8,2,8,6,5,1,10,7,3,10,5,9,3,7,10,11,7,11~5,4,9,7,10,11,3,10,10,9,6,5,1,10,7,10,9,11,4,7,9,4,8,10,6,10,1,7,3,11,11,10,7,8,7,11,9,2,6,5,2,8,10,6,7,11,3,7,1,10,10,11,8,9,7,9,9,10,11,10,10,3,11,1,5,8,11,11,7,11,10,7,11,7,4,1,7,9,9,11,11,6,9,6,3,11,10,10,11,11,9,8,1,11,7,9,10,4,6,7,6,3,11,11,3,7,8,1,8,7,9,8,11,5,10,4,3,10,5,9,5,6,3,4,8,10,1,7,11,10,10,5,9,7,4,7,11,1,8,10,9,6~8,3,5,10,5,11,10,9,6,9,7,11,1,7,7,9,11,5,7,11,6,11,10,11,4,5,1,10,7,9,11,5,8,3,10,11,7,11,10,9,4,8,3,10,8,11,3,1,8,10,8,10,6,7,6,4,10,8,6,3,8,7,6,11,1,7,5,2,11,3,7,10,10,7,3,9,7,7,11,8,1,10,8,10,10,3,6,10,7,8,6,4,10,4,10,1,10,10,10,5,9,8,11,3,11,5,11,7,8,7,1,11,7,5,9,8,7,8,7,8,7,10,7,7,10,8,9,9,7,1,4,10,7,9,11,3,11,6,10,10,9,11,5,1,8,9,5,4,7,5,7,8,5,9,11,4,8,3,6,1,7,8,7,11,9,11,9,11,9,10,4,8,6,1,5,10,7,6,11,7,7,11,9,7,4,7,7,10,1,8,11,11,8,3,8,2,10,9,8,9&reel_set1=7,4,8,8,7,6,8,7,9,3,8,11,6,8,5,11,6,10,8,4,3,9,8,3,5,11,11,10,8,5,9,11,7,8,5,7,10,8,5,4,6,7,8,4,9,11,4,8,11,11,9,5,3,10,8,8,6,7,10,4,8,10,8,8,10,9,9,11,6,3,4,7,3,11,11,4,8,5,10,11,7,8,3,6,5,7,4,9,10,3,6,9,11,9,9,6,8,10,9,7,4,11,5,4,10,9,8,6,5,7,6,11,5,11,5,7~4,7,8,11,10,8,5,9,11,7,4,8,6,11,6,4,5,10,6,7,8,3,8,8,6,8,8,9,3,6,4,9,4,11,7,11,8,11,7,3,5,8,9,3,6,4,3,9,8,6,3,8,5,6,7,8,10,4,8,10,11,8,7,5,6,5,10,5,10,3,8,8,11,10,9,5,9,7,11,8,7,10,5,3,10,9,4,9,10,5,8,6,11,7,10,4,8,4,11,8,11,8,7,6,5,9,6,11,3,9~8,4,8,11,7,8,11,4,7,4,5,11,7,10,6,10,7,10,8,7,4,6,9,7,9,7,6,10,7,11,9,6,8,9,7,9,8,7,5,10,4,8,3,6,3,5,11,8,6,9,9,5,6,7,8,10,9,7,5,4,6,11,4,11,8,6,3,8,5,10,5,4,6,3,11,3,4,5,9,11,4,7,3,4,5,6,7,6,8,9,7,5,7,11,10,5,8,7,9,3,5,6,4,10,8,6,10,5,7,11,7,8,9,8,4,10,8,10,4,5,8,3,7,10,8,5,4,7,5,7,10,9,4,8,10,8,7,3,10,11,8,11,3,8,6,3,8,10,3,8,7,6,11,7,10,5,8,3,10,11,7,3,8,7,4,11,8,6~11,3,3,10,11,10,7,3,7,10,7,4,9,4,9,8,11,10,5,7,6,11,7,3,10,9,8,7,3,4,9,11,4,10,9,5,11,8,11,7,9,7,11,9,9,10,7,6,3,10,6,9,8,11,9,4,11,8,11,6,5,6,10,7,10,7,3,8,8,11,11,10,8,6,10,8,7,11,10,11,9,5,7,9,4,10,9,3,6,10,5,11,8,7,11,8,9,11,4,6,5,11,9,7,10,4,6,11,11,7,11,7,9,10,11,8,10,9,7,9,10,3,7,3,5,9~3,10,7,7,3,9,7,11,10,7,10,11,8,10,3,7,7,9,11,11,10,10,9,7,8,3,8,7,6,11,11,7,11,5,8,4,5,7,6,3,7,9,9,10,8,9,7,11,11,5,7,11,8,7,6,8,7,11,10,7,8,10,11,5,10,9,9,7,9,8,6,8,9,3,10,8,10,10,10,3,8,5,11,7,6,8,11,8,11,7,7,8,3,7,11,7,11,9,8,11,9,6,9,11,4,10,8,9,10,10,7,10,4,9,11,5,11,4,10,8,6,7,5,6,8,7,5,3,7,10,3,4,6,4,10,8,11,4,8,10,3,8,10,9,7,11,6,7,9,3,7,9";
            }
        }
	
	
        #endregion
        public SnakesAndLaddersSnakeEyesGameLogic()
        {
            _gameID = GAMEID.SnakesAndLaddersSnakeEyes;
            GameName = "SnakesAndLaddersSnakeEyes";
        }
        protected override void setupDefaultResultParams(Dictionary<string, string> dicParams, double userBalance, int index, int counter, string initString)
        {
            base.setupDefaultResultParams(dicParams, userBalance, index, counter, initString);
	    	dicParams["reel_set"] = "0";
	        dicParams["g"] = "{respin:{def_s:\"12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12\",def_sa:\"12,12,12,12,12,12,12,12,12,12,12,12\",def_sb:\"12,12,12,12,12,12,12,12,12,12,12,12\",s:\"12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12\",sa:\"12,12,12,12,12,12,12,12,12,12,12,12\",sb:\"12,12,12,12,12,12,12,12,12,12,12,12\",sh:\"12\",st:\"rect\",sw:\"12\"}}";
	        dicParams["st"] = "rect";
	        dicParams["sw"] = "5";
        }
        protected override void convertWinsByBet(Dictionary<string, string> dicParams, float currentBet)
        {
            base.convertWinsByBet(dicParams, currentBet);
            if (dicParams.ContainsKey("mo_tw"))
                dicParams["mo_tw"] = convertWinByBet(dicParams["mo_tw"], currentBet);

        }
        protected override void supplementInitResult(Dictionary<string, string> dicParams, BasePPSlotBetInfo betInfo, BasePPSlotSpinResult spinResult)
        {
            base.supplementInitResult(dicParams, betInfo, spinResult);
            if (!dicParams.ContainsKey("reel_set"))
                dicParams["reel_set"] = "0";
        }

    }
}
