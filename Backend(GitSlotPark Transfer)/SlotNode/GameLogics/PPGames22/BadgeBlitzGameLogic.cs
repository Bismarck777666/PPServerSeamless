using GITProtocol;
using PCGSharp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SlotGamesNode.GameLogics
{
    class BadgeBlitzGameLogic : BasePPSlotGame
    {
        #region 게임고유속성값
        protected override string SymbolName
        {
            get
            {
                return "vs25badge";
            }
        }
        protected override int ClientReqLineCount
        {
            get { return 25; }
        }
        protected override int ServerResLineCount
        {
            get { return 25; }
        }
        protected override int ROWS
        {
            get
            {
                return 3;
            }
        }
        protected override string InitDataString
        {
            get
            {
                return "def_s=5,9,11,6,9,4,13,4,7,13,6,11,11,5,12&cfgs=1&ver=3&def_sb=5,9,9,8,9&reel_set_size=5&def_sa=4,9,7,7,11&scatters=1~0,0,0,0,0~0,0,0,0,0~1,1,1,1,1;3~0,0,0,0,0~0,0,0,0,0~1,1,1,1,1&rt=d&gameInfo={rtps:{purchase:\"96.52\",regular:\"96.50\"},props:{max_rnd_sim:\"1\",max_rnd_hr:\"4001284\",max_rnd_win:\"3000\"}}&wl_i=tbm~3000&sc=8.00,16.00,24.00,32.00,40.00,80.00,120.00,160.00,200.00,300.00,400.00,600.00,1000.00,2000.00,3000.00,4000.00&defc=40.00&purInit_e=1&wilds=2~0,0,0,0,0~1,1,1,1,1&bonuses=0&ntp=0.00&paytable=0,0,0,0,0;0,0,0,0,0;0,0,0,0,0;0,0,0,0,0;200,50,10,2,0;150,40,5,0,0;150,25,5,0,0;150,25,5,0,0;100,20,5,0,0;75,8,5,0,0;75,8,5,0,0;50,8,5,0,0;50,8,5,0,0;0,0,0,0,0;0,0,0,0,0&total_bet_max=10,000,000.00&reel_set0=7,11,7,12,11,6,12,13,6,11,9,7,11,13,7,12,9,5,11,12,13,12,9,7,5,9,11,9,11,10,13,5,8,9,12,9,4,9,12,10,8,9,7,12,11,5,9,4,6,13,13,13,5,11,4,7,12,8,13,10,13,7,12,13,11,10,11,6,11,8,4,12,9,11,9,8,12,6,11,10,7,12,13,7,5,11,12,11,12,5,4,7,12,7,10,12,11,7,9,11,12,13,11,9,12,7,5,13,13~10,7,4,13,2,8,5,4,2,8,10,6,2,8,6,2,8,1,13,11,6,10,13,13,13,9,10,11,6,10,4,12,10,11,6,2,6,10,2,4,8,2,8,10,13,6,4,2,2,2,2,9,6,11,8,13,11,7,6,10,13,10,8,10,6,11,8,6,11,10,13,4,5,8,1~13,8,6,8,1,10,7,9,5,8,10,6,2,5,10,12,4,6,2,6,7,10,8,12,5,8,10,5,6,10,7,8,2,6,5,13,9,11,13,6,10,8,2,10,8,2,9,6,10,7,5,2,1,4,6,1,9,4,7,8,2,4,8,13,10,2,2,2,7,13,9,6,1,8,10,13,1,10,6,9,6,1,10,6,5,4,6,13,9,2,5,8,8,10,8,10,6,2,13,8,8,4,2,9,2,9,6,11,5,7,5,8,7,2,6,13,10,4,10,8,5,10,8,10,9,6,10,5,1,6,9,8,8,13,6,5,13,5,10~6,5,12,7,8,11,12,6,9,10,2,9,5,2,9,7,13,6,7,12,8,6,8,11,9,10,9,13,7,10,13,9,11,8,9,6,8,6,2,2,2,13,9,6,8,13,6,5,7,6,2,10,11,12,9,12,1,8,13,5,6,10,11,6,8,8,6,5,2,12,4,2,7,11,6,10,9,6,10,9,5~4,8,2,8,11,6,5,11,8,12,8,9,6,8,11,10,6,12,5,7,11,13,12,8,9,10,6,8,8,9,5,9,7,8,11,13,11,11,10,12,11,8,10,8,8,8,11,6,12,7,12,4,8,6,11,7,9,8,10,9,13,6,11,5,7,2,5,8,13,8,2,13,8,4,9,4,5,12,11,7,6,7,8,8,10,8,2,7,13,9,12,8,8,11&reel_set2=11,12,10,11,9,10,12,7,11,9,5,9,12,7,4,11,4,12,11,5,9,11,7,10,5,6,4,13,12,5,7,11,6,12,11,9,11,13,13,13,7,8,7,11,7,8,12,7,13,12,13,4,9,5,11,9,13,13,9,12,11,6,8,12,8,10,9,12,9,13,9,12,9,11,10,5,10,12,11~12,11,5,6,7,4,10,4,10,7,10,6,12,4,2,11,6,10,5,11,4,7,11,6,6,11,13,6,6,8,6,6,8,12,6,10,4,9,12,11,10,11,10,8,12,13,10,9,10,11,8,10,8,13,6,13,12,11,13,8,13,13,13,4,10,6,6,12,11,2,12,7,6,6,9,6,9,8,13,13,11,10,8,11,10,11,10,13,10,13,11,9,4,7,11,13,6,11,12,8,6,10,8,7,8,13,8,2,10,2,10,9,8,2,4,10,5,8,2,10~8,5,4,6,2,6,10,13,5,8,9,10,8,4,8,7,8,7,9,6,10,9,7,10,4,8,2,10,7,12,10,5,8,5,8,13,13,13,9,5,6,13,6,11,8,13,6,9,13,4,6,10,6,10,5,2,10,7,9,6,9,8,10,4,9,5,8,10,9,7,5,6,10,8,6,9,6~6,10,12,6,6,4,9,11,10,7,8,9,7,9,12,9,2,6,8,10,6,8,10,13,5,10,9,12,9,10,12,2,13,12,11,2,7,6,11,13,8,5,13,10,8,12,8,12,7,6,11,9,8,7,2,12,8,8,10,5,6,9,11,9,5,9,6,6,11,4,9,13,6,10,6,6,12,11,7,13,7,10,7,5,7,9,5,6,6,10,6,5,8,6,11,8,6,6,2,7,13,8,5,8,6,6,11,9,13,8,10,6,6,9,13,7,8,7,5,9,8,5,9,13,6,8,9,13,6,10,9,7,11,5,12,8,10~5,13,8,9,2,5,11,8,13,6,8,6,13,7,8,8,10,8,13,8,11,8,8,11,9,6,11,9,11,11,10,5,9,13,8,5,12,7,12,5,8,7,12,8,11,9,12,10,2,13,13,13,5,7,10,11,12,10,13,8,12,11,12,8,10,2,8,5,9,8,12,4,11,8,7,12,11,9,2,6,8,13,8,13,4,11,4,11,4,11,7,6,8,6,2,12,6,8,13,13,12,6,8,8,8,11,11,12,8,7,8,2,7,13,7,8,6,12,13,8,13,4,6,12,7,8,11,10,2,8,8,11,9,10,9,10,11,9,13,7,13,6,10,5,2,7,11,5,12,11,8,7,13,5,9&reel_set1=12,7,12,5,12,6,5,11,13,11,5,12,5,9,12,7,11,9,11,9,7,12,11,8,7,8,9,7,12,7,9,13,13,13,4,5,10,9,13,11,9,7,8,7,10,13,9,12,11,13,9,11,10,13,10,4,6,12,11,13,11,12,4,7,13,6,12,11~10,6,2,4,13,10,6,10,2,11,8,2,11,4,11,9,8,10,13,8,4,6,10,13,13,13,2,10,12,2,8,7,10,5,11,8,1,13,6,13,8,6,11,10,8,7,13,6,8,13,1,9,11,2,2,2,2,5,1,8,10,13,6,8,6,10,4,7,2,2,4,11,10,4,6,10,8,6,11,10,2,10,8~7,2,10,6,10,6,13,7,2,10,6,13,8,10,4,5,10,2,1,10,5,6,4,6,12,9,8,4,9,8,5,9,7,6,10,1,8,7,11,5,8,8,2,1,8,5,9,1,2,2,2,6,13,6,2,5,8,2,10,11,6,10,6,5,10,13,2,7,8,5,4,8,2,10,8,10,5,8,12,10,6,4,2,1,6,10,4,8,9,8,9,7,10,13,13,5,13,6,8,1,9,13~9,6,6,9,5,12,10,8,8,7,11,7,13,9,5,2,12,9,11,12,2,11,13,6,5,10,7,6,9,7,11,7,6,9,13,8,6,8,6,10,7,10,6,8,9,10,4,6,11,12,9,6,2,6,2,2,2,8,6,11,5,9,2,11,10,11,9,6,6,5,10,13,6,8,8,13,13,12,13,13,8,6,7,9,5,7,2,6,8,9,11,8,9,10,12,6,9,4,6,2,7,6,9,12,10,9,10,9,7,12,8~reel_set4=13,11,13,4,6,9,13,9,13,8,13,12,9,13,13,6,4,12,13,11,13,13,10,13,11,13,10,9,13,13,13,7,11,7,5,9,11,13,11,13,13,5,13,12,13,6,8,12,13,5,11,7,13,11,4,13,4,12,13,7,11~13,4,8,13,11,8,13,10,13,8,2,6,2,10,8,13,6,7,13,13,2,13,11,13,13,2,13,8,10,2,6,13,2,7,10,6,8,10,13,5,13,6,2,2,1,8,11,6,13,8,9,13,13,13,2,12,13,9,13,5,4,8,5,13,2,6,13,8,13,1,13,2,10,6,13,8,10,11,13,11,13,13,2,12,10,11,4,2,13,7,13,10,6,13,13,8,7,13,9,13,13,4,13,7,13,2,13,2,6~8,11,13,13,7,5,13,8,13,13,6,13,13,11,12,7,13,5,2,13,6,13,13,10,2,6,4,13,8,13,13,6,12,13,9,2,13,13,7,5,13,10,11,9,13,13,10,2,2,8,10,8,2,13,8,4,13,13,5,13,13,7,8,13,13,8,2,13,13,9,5,10,2,5,13,4,13,10,13,13,6,11,1,13,2,4,13,9,12,2,13,13,1,2,8,2,13,7,6,5,13,2~12,10,7,13,6,11,13,9,13,7,8,5,10,13,2,6,9,11,7,10,4,13,13,6,13,12,13,13,5,10,12,13,11,13,13,11,13,10,7,4,13,8,11,13,7,13,8,13,8,13,11,2,9,13,13,7,13,8,12,13,10,9,13,7,13,8,6,13,13,6,13,13,8,13,13,9,2,13,6,13,9,4,5,11,8,7,2,7,13,4,13,10,13,10,13,13,11,13,10,13,12,13,13,9,4,10,8,13,11,13,9,13,13,9,10,12,13,9,4,5,13,13,6,13,13,12,7,13,8~13,8,12,13,13,11,13,13,13,9,13,13,13,13,13,2,13,10,13,13,13,13,13,6,5,13,13,7,4&purInit=[{bet:2500,type:\"default\"}]&reel_set3=13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13~8,2,13,11,10,12,10,6,2,11,4,10,1,2,2,10,8,6,2,6,2,2,2,2,6,4,13,6,5,7,12,8,13,6,11,4,10,11,10,6,8,2,10,9,2,8,13,13,13,4,10,8,1,11,7,4,10,1,11,12,5,7,8,6,8,10,6,11,4,9,6,10~9,6,5,13,6,10,6,10,8,10,13,10,9,7,10,8,7,2,8,7,10,1,8,8,6,9,6,4,8,9,2,8,9,1,6,8,10,5,8,10,1,9,6,5,2,8,10,5,6,9,8,9,10,1,8,4,10,2,2,5,8,8,4,5,8,6,1,2,2,2,12,9,4,5,2,8,4,6,7,9,6,5,1,10,6,7,1,6,10,6,5,10,9,7,12,2,10,6,10,2,10,4,2,5,6,8,2,10,8,9,4,11,8,2,10,8,10,5,9,7,6,7,10,11,6,12,9,13,2,10,6,5,8,9,4,7,6~9,6,5,9,6,7,8,9,11,6,6,2,2,8,10,6,8,11,5,9,6,6,9,12,6,6,11,9,6,13,12,5,10,11,8,10,5,6,7,6,10,11,7,6,12,8,12,5,10,12,9,10,9,8,10,12,10,9,11,10,9,8,9,13,10,5,2,2,2,12,6,2,6,13,4,2,9,6,13,13,12,8,9,6,7,11,10,9,5,8,2,5,9,10,11,6,8,9,12,13,7,9,5,12,7,11,13,8,8,5,6,8,2,2,6,2,11,9,6,9,6,4,12,11,13,5,9,5,7,8,9,7,9,7,10,12,6,8~total_bet_min=200.00";
            }
        }
        protected override double PurchaseFreeMultiple
        {
            get { return 100; }
        }
        protected override bool SupportPurchaseFree
        {
            get { return true; }
        }
        protected override bool HasPurEnableOption
        {
            get { return true; }
        }
        #endregion
        
        public BadgeBlitzGameLogic()
        {
            _gameID     = GAMEID.BadgeBlitz;
            GameName    = "BadgeBlitz";
        }
        protected override void setupDefaultResultParams(Dictionary<string, string> dicParams, double userBalance, int index, int counter, string initString)
        {
            base.setupDefaultResultParams(dicParams, userBalance, index, counter, initString);
	    	dicParams["reel_set"] = "0";
	        dicParams["st"] = "rect";
	        dicParams["sw"] = "5";
        }
        protected override void convertWinsByBet(Dictionary<string, string> dicParams, float currentBet)
        {
            base.convertWinsByBet(dicParams, currentBet);
            if (dicParams.ContainsKey("rs_win"))
                dicParams["rs_win"] = convertWinByBet(dicParams["rs_win"], currentBet);
        }
        protected override void readBetInfoFromMessage(GITMessage message, string strUserID)
        {
            try
            {
                BasePPSlotBetInfo betInfo = new BasePPSlotBetInfo();
                betInfo.BetPerLine = (float)message.Pop();
                betInfo.LineCount = (int)message.Pop();
		
		
                if (message.DataNum >= 3)
                    betInfo.PurchaseFree = true;
                else
                    betInfo.PurchaseFree = false;
		
                if (betInfo.BetPerLine <= 0.0f)
                {
                    _logger.Error("{0} betInfo.BetPerLine <= 0 in vs25badgeGameLogic::readBetInfoFromMessage {1}", strUserID, betInfo.BetPerLine);
                    return;
                }
		
                if (betInfo.LineCount != this.ClientReqLineCount)
                {
                    _logger.Error("{0} betInfo.LineCount is not matched {1}", strUserID, betInfo.LineCount);
                    return;
                }

                BasePPSlotBetInfo oldBetInfo = null;
                if (_dicUserBetInfos.TryGetValue(strUserID, out oldBetInfo))
                {
                    if (oldBetInfo.HasRemainResponse)
                        return;

                    oldBetInfo.BetPerLine   = betInfo.BetPerLine;
                    oldBetInfo.LineCount    = betInfo.LineCount;
                    oldBetInfo.MoreBet      = betInfo.MoreBet;
                    oldBetInfo.PurchaseFree = betInfo.PurchaseFree;
                }
                else
                {
                    _dicUserBetInfos.Add(strUserID, betInfo);
                }
            }
            catch (Exception ex)
            {
                _logger.Error("Exception has been occurred in vs25badgeGameLogic::readBetInfoFromMessage {0}", ex);
            }
        }
        protected override void overrideSomeParams(BasePPSlotBetInfo betInfo, Dictionary<string, string> dicParams)
        {
            base.overrideSomeParams(betInfo, dicParams);
            if (!dicParams.ContainsKey("reel_set"))
                dicParams["reel_set"] = "0";
        }
    }
}
