using Akka.Event;
using GITProtocol;
using PCGSharp;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SlotGamesNode.GameLogics
{
    class TreesOfTreasureGameLogic : BasePPSlotGame
    {
        #region 게임고유속성값
        protected override string SymbolName
        {
            get
            {
                return "vs20treesot";
            }
        }
        protected override bool SupportReplay
        {
            get
            {
                return true;
            }
        }
        protected override int ClientReqLineCount
        {
            get { return 20; }
        }
        protected override int ServerResLineCount
        {
            get { return 20; }
        }
        protected override int ROWS
        {
            get
            {
                return 3;
            }
        }
        protected override string InitDataString
        {
            get
            {
                return "def_s=6,7,2,4,9,5,12,8,6,7,3,8,10,5,10&cfgs=9515&ver=3&def_sb=6,10,4,3,9&reel_set_size=13&def_sa=6,11,6,3,10&scatters=1~0,0,0,0,0~0,0,0,0,0~1,1,1,1,1&rt=d&gameInfo={props:{max_rnd_sim:\"1\",max_rnd_hr:\"126507399\",max_rnd_win:\"15000\",max_rnd_win_a:\"10000\",max_rnd_hr_a:\"53604831\"}}&wl_i=tbm~15000;tbm_a~10000&reel_set10=6,1,8,10,8,1,6,12,12,1,12,1,6,6,1,12,1,12,4,4,1,12,8,1,4,1,8,1,12,10,12,12,4,4,8,1,12,8,12,4,4,1,6,10,10,1,10,1,4,6,1,4~1,11,3,1,5,3,5,7,1,7,5,5,1,9,11,9,7,11,1,7,11,1,11,1,7,3,3,5,1,11,1,3,11,3,11,1,11,1,9,1,5,3,9,1,11,1,3~12,1,10,1,10,1,12,4,4,1,8,1,6,8,1,12,8,8,12,6,10,8,10,8,1,4,1,10,4,1,12,1,12,1,12,6,4,4,1,12,1,6,1,6,4,12,12,4,1,12,12,1,6,4,6~11,11,3,7,7,5,3,9,3,9,11,5,5,7,5,11,3,9,11,11,7,9,3,5,5,11,9,3,11,7,3,11,3,11,11,7,7,3,7,5,11,3,9,5~1,12,1,4,10,8,1,12,6,12,12,4,1,6,12,1,4,8,8,6,6,10,1,4,6,1,4,10,4,1,12,1,12,12,1,12,6,1,4,4,1,8,1,12,1,8,10&sc=10.00,20.00,30.00,40.00,50.00,100.00,150.00,200.00,250.00,375.00,500.00,750.00,1250.00,2500.00,3750.00,5000.00&defc=50.00&reel_set11=7,3,1,11,1,3,5,11,1,9,1,11,7,11,1,3,1,5,11,11,7,3,1,9,5,7,1,5,9,3,1,11~8,4,1,12,1,10,1,8,6,6,12,4,1,12,1,12,1,12,8,4,6,1,4,8,12,1,10,10,6,12,4~9,11,3,1,3,5,3,3,1,9,3,11,5,5,11,11,5,5,11,1,11,1,7,1,9,1,7,7,11,3,11,1,7,1,3,1,7,11,3,1,5,1,9,1,11~1,6,12,1,6,12,8,8,12,4,1,6,1,10,6,4,8,4,12,8,1,10,12,4,1,10,12,4,1,12,1~7,7,1,9,3,1,7,5,1,5,1,11,9,3,11,1,3,5,11,3,11,3,1,9,1,11,5,1,7,11,11,3,1&reel_set12=10,1,10,1,12,1,6,10,1,12,8,1,12,6,4,4,6,1,8,6,1,10,8,12,1,12,4,4,1,4,12,12,8,1,6,4,12,1,12,1,4,1,8,1,4,12~3,1,5,1,9,11,5,3,11,1,11,1,11,3,1,5,9,7,11,5,1,7,11,1,11,1,3,9,1,7,11,1,3,3,1,3,9,1,3,5,11,11,7,1,7,1,5~1,12,1,12,12,10,1,12,1,4,1,8,12,6,8,10,8,4,4,10,1,12,4,8,12,6,1,6,1,6,4,1,4~3,9,3,7,11,1,5,3,1,9,1,7,1,3,7,1,5,1,11,3,11,11,5,1,9,11,5,3,11,1,11,7~1,6,6,1,10,1,12,6,8,10,4,12,8,1,10,6,1,12,1,12,1,8,1,4,10,1,10,12,4,1,12,4,8,12,6,4,6,4,4,8,1,12,1,4,12,4,8,1,12,1,12&wilds=2~5000,600,400,200,0~1,1,1,1,1&bonuses=0&bls=20,30&paytable=0,0,0,0,0;0,0,0,0,0;0,0,0,0,0;2000,600,400,200,0;800,320,160,80,0;320,160,80,0,0;240,80,40,0,0;160,60,20,0,0;160,60,20,0,0;80,40,15,0,0;80,40,10,0,0;40,20,10,0,0;40,20,10,0,0;0,0,0,0,0;0,0,0,0,0;0,0,0,0,0;0,0,0,0,0&reel_set0=5,11,10,2,9,6,12,11,7,12,6,9,7,8,11,7,5,7,8,12,9,5,9,5,9,12,10,11,6,10,9,7,10,11,8,3,7,6,11,4,11~10,7,6,8,7,5,6,12,3,9,8,6,12,6,5,8,7,2,10,5,7,4,11,10,11,6,8,12,9,6,11,9,10,11,10,9~7,11,5,7,4,11,5,6,12,10,7,10,11,6,9,12,9,8,7,11,9,11,7,12,3,7,6,8,9,8,10,11,5,9,10,9,5,2,8,6,9~3,5,8,6,7,8,10,6,11,8,11,6,4,10,12,10,9,10,11,9,12,6,8,12,10,7,11,9,10,11,5,7,12,10,12,6,9,6,9,8,5,12,2,12,7~5,9,12,9,10,8,11,9,11,6,8,11,2,11,8,12,10,6,11,7,5,7,6,12,5,9,3,7,4,7,10&reel_set2=4,4,10,12,10,8,6,10,12,4,8,12,8,12,12,6,12,6,6,12,4,12,6,6,6,8,10,4,6,12,12,6,6,8,10,6,4,8,6,4,4,12,10,8,6,6,8,10,10,12~5,5,11,7,3,3,11,11,9,5,5,7,9,9,11,3,9,5,11,7,5,5,5,9,5,7,3,3,11,11,7,3,9,7,11,5,5,11,11,5,5,11,9,3,3,7~10,6,6,4,12,8,12,10,12,6,6,10,6,10,12,4,6,12,6,6,4,8,4,4,6,12,6,6,6,8,10,4,4,12,12,4,6,8,8,12,12,4,10,8,12,10,12,10,6,6,12,8,12,10,6,4,8,8~9,11,5,5,3,11,7,11,5,11,11,3,7,5,9,5,9,9,11,9,7,11,11,3,11,5,7,5,9,5,5,5,3,3,11,7,5,7,5,11,7,3,5,9,7,3,3,9,7,11,9,9,11,5,11,7,3,5,11,5,3,3,5~6,6,4,10,8,10,6,4,12,6,12,4,8,10,12,10,6,10,6,8,8,4,12,10,12,4,12,4,4,6,6,6,12,8,8,10,10,12,6,6,4,4,12,6,10,6,10,8,4,6,6,4,8,12,12,6,12,12,8,6,12,8,12&reel_set1=11,11,5,7,5,11,11,5,5,7,11,3,7,9,11,11,9,3,5,3,7,5,3,5,9,9,5,5,5,11,5,7,3,11,11,5,7,7,5,5,3,3,11,5,11,11,9,3,7,9,9,11,5,3,3,7,3,9~12,4,6,10,12,6,10,4,12,4,6,8,8,12,4,4,8,10,6,8,10,6,6,6,10,4,12,4,4,12,12,6,12,12,6,6,8,6,8,4,6,12,6,8,10,12,10~11,7,3,3,5,9,11,9,11,5,5,11,9,5,11,3,5,11,5,5,5,7,11,3,9,7,5,3,5,11,7,3,5,11,9,7,7,3,3,11,5,9~4,8,6,10,8,12,4,12,8,12,4,4,12,12,10,6,10,4,4,10,8,12,4,4,6,12,8,10,6,6,6,10,4,6,4,6,6,8,6,10,10,4,8,12,6,8,6,12,6,12,12,10,6,12,8,12,12,6,4,8,12,6~5,11,7,3,11,7,11,3,11,7,3,5,5,3,9,5,5,5,9,3,9,5,5,9,11,7,11,11,7,3,11,5,3,9,5&reel_set4=9,3,9,5,11,11,9,7,5,3,1,5,7,5,9,1,7,3,1,11,11,1,11,9,3,3,1,3,9,3,5,7,11,3,11,5,11,11,7,7,3,11,5,7~8,12,8,12,12,8,8,6,4,4,12,4,8,10,4,12,8,10,10,1,8,4,12,4,12,12,10,6,12,12,10,1,6,4,1,8,4,6,6,4,10,4,1,6,10,8,10,6,6,12,4,4,12,1,6,12~5,7,9,1,5,3,11,5,7,11,5,5,7,11,3,5,11,11,3,3,7,7,9,11,9,1,7,9,11,3,1,9,3,11,9,5,3,11,1,3,7,11,3,7,1,5,11,3~12,8,10,8,4,12,6,1,12,6,8,4,4,12,4,12,1,12,6,6,10,8,10,4,1,8,10,4,6,1,10,12,4,12,12,4,8,6~3,3,11,11,7,9,1,3,11,3,11,3,1,11,9,3,5,11,5,5,9,7,7,1,9,5,7,7,5,7,11,3,9,5,11,9,5,3,5,5,11,11,3,7,7,3,9,7,9,11,11,1,11,3,11,3,11&reel_set3=11,3,10,11,12,9,3,3,3,7,12,11,8,6,5,4,4,4,7,3,4,12,3,4,11,11,5,5,5,8,4,6,7,9,7,6,6,6,7,5,6,3,12,9,8,10,7,7,7,12,12,4,7,11,4,10,8,8,8,11,9,12,5,10,7,5,5,9,9,9,7,9,9,7,4,12,4,10,10,10,6,7,8,10,6,7,9,5,11,11,11,8,6,8,10,12,10,3,12,12,12,6,8,5,11,9,7,11,8,11~10,3,7,7,8,3,3,3,4,9,12,11,5,6,7,4,4,4,11,9,7,9,6,11,5,5,5,10,5,3,4,9,12,11,6,6,6,8,6,5,8,4,3,7,7,7,10,6,3,12,6,5,12,8,8,8,7,5,10,6,7,5,9,9,9,7,11,4,11,8,8,11,10,10,10,9,9,12,7,7,4,11,11,11,12,8,7,10,11,6,8,12,12,12,9,4,11,4,12,7,12,10~10,4,7,12,11,3,3,3,4,4,10,12,11,7,4,4,4,6,12,8,9,10,4,3,5,5,5,9,12,6,11,4,7,6,6,6,11,4,6,3,8,8,7,7,7,10,9,5,5,7,3,8,8,8,6,4,7,7,9,12,11,9,9,9,10,7,12,5,12,8,10,10,10,8,9,8,8,11,7,5,11,11,11,6,5,11,11,9,7,12,12,12,11,9,6,6,10,5,12,3~6,4,5,11,10,3,3,3,4,8,6,11,12,8,10,4,4,4,9,10,6,5,8,11,5,5,5,7,12,4,11,9,7,11,6,6,6,11,3,4,11,12,7,7,7,4,9,8,6,3,6,12,8,8,8,3,7,7,10,3,7,9,9,9,6,8,9,11,4,8,7,10,10,10,7,10,7,12,7,9,11,11,11,12,4,10,5,8,12,11,12,12,12,9,5,12,6,5,7,9,5~9,11,6,6,4,3,3,3,6,9,9,11,8,4,11,4,4,4,12,7,12,7,10,3,5,5,5,11,6,12,6,6,7,8,6,6,6,10,8,10,4,11,8,7,7,7,9,10,7,4,8,3,11,8,8,8,9,10,5,9,7,3,9,9,9,8,4,11,12,12,5,7,10,10,10,7,4,11,3,7,12,11,11,11,7,7,4,6,12,5,9,12,12,12,7,5,10,5,5,8,11,12&reel_set6=16,16,16~16,16,16~16,16,16~16,16,16~16,16,16&reel_set5=1,12,4,1,10,10,8,4,6,4,12,10,8,6,1,4,6,4,12,1,8,4,8,10,6,1,6,10,10,10,1,10,4,1,12,1,10,6,4,6,8,4,1,8,4,12,4,6,12,1,6,6,1,10,8,12,1,6,12~7,1,9,9,5,7,7,5,1,5,1,9,5,3,11,3,3,1,11,1,7,9,1,7,7,9,9,9,3,9,3,7,5,11,5,1,11,5,3,5,1,11,5,3,9,1,5,9,11,3,9,3,1,11,1,11,1,3~1,10,8,1,6,12,6,4,12,1,12,6,8,4,10,6,4,6,10,4,1,10,4,12,1,8,1,12,10,10,10,6,4,1,6,8,12,6,1,12,6,10,1,4,1,10,6,4,4,10,10,8,12,1,8,6,4,1,8,1,4~3,9,1,7,1,5,5,1,5,3,1,11,1,11,3,9,9,9,1,3,1,3,5,9,1,11,5,5,7,7,11,9,11,1,7,3,9~1,6,12,10,12,10,10,1,10,1,4,10,12,4,12,6,6,4,8,1,6,8,12,1,6,10,10,10,4,1,8,1,10,1,8,4,4,1,6,6,10,1,12,1,6,12,1,8,4,6,4,6,8,4,1,4&reel_set8=12,12,1,12,1,12,6,1,4,6,1,6,10,10,6,4,1,8,1,4,12,1,4,12,8,1,12,8,12,12,4,1,6,10,4,4,1,4,8,10,1,10,8,1,4,1,12,6,1,12,8~9,7,3,9,11,7,3,3,11,5,7,7,5,5,9,3,5,11,11,3,5,7,11,11,3,11,3,9,11,3,11,9,9,5,11,11,5,3,5,9,3,7,11,7,11,11,3,7,7,5,3,5,7~10,1,6,12,4,4,8,6,12,12,4,1,8,10,4,1,4,8,1,6,12,1,8,12,1,12,1,4,6,1,10,1,12~7,11,9,11,11,3,7,7,3,5,3,7,3,11,3,9,11,9,11,5,7,5,5,3,7,3,9,7,11,3,11,3,9,3,5,5,11,9,3,11,5,9,7,5,11,5,3,7,5,11,11,3,11,7~1,4,12,1,10,10,4,1,6,1,12,4,8,4,1,8,12,4,1,8,12,1,8,12,6,6,12,1,4,12,10,12,1,6&reel_set7=1,5,3,5,1,7,11,1,7,5,3,1,9,11,11,1,3,1,3,1,11,1,11,9,7,11,9,1,11,3,7,5,11,1,3~12,10,12,12,4,10,12,8,6,10,4,8,6,12,12,4,6,12,4,6,10,12,10,12,8,4,6,12,4,4,6,6,8,4,4,10,8,4,4,6,4,4,10,12,8,6,12,8,8,12,12,6,12,10,8,8~3,7,1,5,1,3,9,1,11,11,1,3,1,3,1,5,11,11,7,1,7,3,1,11,1,11,3,9,9,7,1,9,7,11,3,7,1,5,1,3,5,3,5,1,9,11,11,3,11,11,1,5,11,5,1~6,10,8,10,4,10,12,12,4,12,10,12,6,6,10,12,6,4,12,4,4,8,6,4,12,8,8,6,4,8,8,6,4,12,12,8~3,3,7,11,3,9,1,11,1,9,1,5,11,1,7,1,7,1,11,1,11,11,1,5,5,1,9,3,7,5,3,11,1,7,11,11,9,5,1,3,11,3,1,3,1,5,5,1,11,3,9,7,3,11,1&reel_set9=11,1,7,7,3,1,5,7,1,3,11,3,11,9,3,1,3,3,1,9,1,9,1,7,11,3,1,7,1,5,11,11,1,5,1,3,1,11,5,11,1,3,9,11,1,5,1,11,11,5,9,7,1~10,8,10,6,10,4,8,12,4,12,12,4,4,6,6,12,8,10,4,8,4,6,10,12,6,12,6,8,10,12,6,12,8,12,8,8,6,4,4,12,12,4,4~5,3,1,7,11,1,11,11,3,1,7,1,5,1,3,1,9,11,1,5,11,3,9,11,3,11,5,11,5,1,7,3,3,5,7,9,1,9,7,1,11,1,3,11~1,4,6,1,4,10,12,6,8,4,10,8,4,1,8,12,4,1,4,1,12,1,12,6,1,12,10,1,12,8,12,4,1,12,6,1,12,4,1,6,12,6,1,10,8,1~7,1,11,11,3,1,3,5,5,1,11,1,9,11,3,11,11,3,5,1,7,7,11,5,9,1,5,1,3,7,1,3,3,1,7,9,1,5,1,9,3,1,11,1,11,1,11";
            }
        }	
        protected override double MoreBetMultiple
        {
            get { return 1.5; }
        }
        protected override bool SupportMoreBet
        {
            get { return true; }
        }
	
        #endregion
        public TreesOfTreasureGameLogic()
        {
            _gameID = GAMEID.TreesOfTreasure;
            GameName = "TreesOfTreasure";
        }
        protected override void setupDefaultResultParams(Dictionary<string, string> dicParams, double userBalance, int index, int counter, string initString)
        {
            base.setupDefaultResultParams(dicParams, userBalance, index, counter, initString);
	    	dicParams["reel_set"] = "0";
	        dicParams["st"] = "rect";
	        dicParams["sw"] = "5";
	        dicParams["bl"] = "0";
        }
        protected override void convertWinsByBet(Dictionary<string, string> dicParams, float currentBet)
        {
            base.convertWinsByBet(dicParams, currentBet);
            if (dicParams.ContainsKey("mo_tw"))
                dicParams["mo_tw"] = convertWinByBet(dicParams["mo_tw"], currentBet);

            if (dicParams.ContainsKey("pw"))
                dicParams["pw"] = convertWinByBet(dicParams["pw"], currentBet);
        }
        
        protected override void readBetInfoFromMessage(GITMessage message, string strUserID)
        {
            try
            {
                BasePPSlotBetInfo betInfo       = new BasePPSlotBetInfo();
                betInfo.BetPerLine              = (float)message.Pop();
                betInfo.LineCount               = (int)message.Pop();
		
                int bl = (int)message.Pop();
                if (bl == 0)
                    betInfo.MoreBet = false;
                else
                    betInfo.MoreBet = true;
		
		
                if (betInfo.BetPerLine <= 0.0f)
                {
                    _logger.Error("{0} betInfo.BetPerLine <= 0 in TreesOfTreasureGameLogic::readBetInfoFromMessage {1}", strUserID, betInfo.BetPerLine);
                    return;
                }
		
                if (betInfo.LineCount != this.ClientReqLineCount)
                {
                    _logger.Error("{0} betInfo.LineCount is not matched {1}", strUserID, betInfo.LineCount);
                    return;
                }

                BasePPSlotBetInfo oldBetInfo = null;
                if (_dicUserBetInfos.TryGetValue(strUserID, out oldBetInfo))
                {
                    if (oldBetInfo.HasRemainResponse)
                        return;

                    oldBetInfo.BetPerLine   = betInfo.BetPerLine;
                    oldBetInfo.LineCount    = betInfo.LineCount;
                    oldBetInfo.MoreBet      = betInfo.MoreBet;
                    oldBetInfo.PurchaseFree = betInfo.PurchaseFree;
                }
                else
                {
                    _dicUserBetInfos.Add(strUserID, betInfo);
                }
            }
            catch (Exception ex)
            {
                _logger.Error("Exception has been occurred in TreesOfTreasureGameLogic::readBetInfoFromMessage {0}", ex);
            }
        }
	
    }
}
