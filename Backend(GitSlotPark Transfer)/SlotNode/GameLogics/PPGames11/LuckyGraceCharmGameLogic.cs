using GITProtocol;
using PCGSharp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SlotGamesNode.GameLogics
{
    class LuckyGraceCharmGameLogic : BasePPSlotGame
    {
        #region 게임고유속성값
        protected override string SymbolName
        {
            get
            {
                return "vs10luckcharm";
            }
        }
        protected override bool SupportReplay
        {
            get
            {
                return true;
            }
        }
        protected override int ClientReqLineCount
        {
            get { return 10; }
        }
        protected override int ServerResLineCount
        {
            get { return 10; }
        }
        protected override int ROWS
        {
            get
            {
                return 3;
            }
        }
        protected override string InitDataString
        {
            get
            {
                return "def_s=13,12,5,13,13,11,10,11,9,9,7,7,9,5,5&screenOrchInit={type:\"mini_slots\"}&cfgs=4321&ver=2&def_sb=12,8,3,12,12&reel_set_size=6&def_sa=7,7,13,5,5&scatters=1~500,20,5,2,0~12,12,12,0,0~1,1,1,1,1&gmb=0,0,0&rt=d&gameInfo={props:{max_rnd_sim:\"1\",max_rnd_hr:\"4946010\",max_rnd_win:\"10000\"}}&wl_i=tbm~10000&sc=20.00,40.00,60.00,80.00,100.00,200.00,300.00,400.00,500.00,750.00,1000.00,1500.00,2500.00,5000.00,7500.00,10000.00&defc=100.00&wilds=2~9000,2500,250,10,0~2,2,2,2,2&bonuses=0;14&fsbonus=&paytable=0,0,0,0,0;0,0,0,0,0;9000,2500,250,10,0;750,125,25,2,0;750,125,25,2,0;250,75,15,0,0;250,75,15,0,0;400,100,20,0,0;125,50,10,0,0;125,50,10,0,0;100,25,5,0,0;100,25,5,0,0;100,25,5,0,0;100,25,5,2,0;0,0,0,0,0;0,0,0,0,0&reel_set0=11,9,5,11,9,5,13,1,11,7,13,11,7,12,9,5,11,9,5,13,11,6,8,9,4,11,9,1,11,9,3,11,9,2,13,11,10,9,11,14,14,14~10,8,6,10,1,8,6,12,10,7,12,10,7,8,10,6,8,10,6,13,12,5,11,10,1,8,10,3,11,10,4,9,8,2,12,10,8,14,14~5,11,9,5,11,9,5,11,1,13,5,11,9,3,11,9,3,13,11,5,13,11,5,13,9,7,13,9,7,11,13,1,11,9,2,11,9,7,11,9,7,13,3,5,14,14,14,12,4,6,10,8~11,9,5,11,9,5,13,1,9,5,13,9,5,12,10,4,12,10,4,11,9,4,11,8,3,11,13,1,11,10,7,11,13,2,11,12,3,11,9,7,11,8,6,14,14,14,14~11,9,5,11,1,9,5,13,9,5,13,9,5,12,10,4,12,10,4,11,9,4,11,8,3,11,13,1,11,10,7,11,1,13,2,11,12,3,11,9,7,11,8,6,14,14,14&accInit=[{id:0,mask:\"cp;tp;lvl;sc;cl\"},{id:1,mask:\"cp;tp;lvl;sc;cl\"}]&reel_set2=11,9,5,11,9,5,13,1,11,7,13,11,7,12,9,5,11,9,5,13,11,6,8,9,4,11,9,1,11,9,3,11,9,2,13,11,10,9,11,14,14,14~10,8,6,10,1,8,6,12,10,7,12,10,7,8,10,6,8,10,6,13,12,5,11,10,1,8,10,3,11,10,4,9,8,2,12,10,8,14,14~5,11,9,5,11,9,5,11,1,13,5,11,9,3,11,9,3,13,11,5,13,11,5,13,9,7,13,9,7,11,13,1,11,9,2,11,9,7,11,9,7,13,3,5,14,14,14,12,4,6,10,8~11,9,5,11,9,5,13,1,9,5,13,9,5,12,10,4,12,10,4,11,9,4,11,8,3,11,13,1,11,10,7,11,13,2,11,12,3,11,9,7,11,8,6,14,14,14,14~11,9,5,11,1,9,5,13,9,5,13,9,5,12,10,4,12,10,4,11,9,4,11,8,3,11,13,1,11,10,7,11,1,13,2,11,12,3,11,9,7,11,8,6,14,14,14&reel_set1=11,9,5,11,9,5,13,1,11,7,13,11,7,12,9,5,11,9,5,13,11,6,8,9,4,11,9,1,11,9,3,11,9,2,13,11,10,9,11,14,14,14~10,8,6,10,1,8,6,12,10,7,12,10,7,8,10,6,8,10,6,13,12,5,11,10,1,8,10,3,11,10,4,9,8,2,12,10,8,14,14~5,11,9,5,11,9,5,11,1,13,5,11,9,3,11,9,3,13,11,5,13,11,5,13,9,7,13,9,7,11,13,1,11,9,2,11,9,7,11,9,7,13,3,5,14,14,14,12,4,6,10,8~11,9,5,11,9,5,13,1,9,5,13,9,5,12,10,4,12,10,4,11,9,4,11,8,3,11,13,1,11,10,7,11,13,2,11,12,3,11,9,7,11,8,6,14,14,14,14~11,9,5,11,1,9,5,13,9,5,13,9,5,12,10,4,12,10,4,11,9,4,11,8,3,11,13,1,11,10,7,11,1,13,2,11,12,3,11,9,7,11,8,6,14,14,14&reel_set4=13,12,7,11,10,6,9,8,1,13,10,7,12,8,5,11,9,7,13,9,1,10,12,1,6,8,11,5,13,12,4,11,9,3,10,8,2,1~12,10,6,12,10,1,12,8,6,12,10,5,8,10,6,10,8,1,12,10,5,12,10,6,12,8,6,12,10,5,12,10,5,12,10,8,1,4,2,13,11,9,7,3~13,11,7,13,11,7,13,11,4,13,9,3,11,13,1,11,9,4,11,1,13,9,7,11,9,4,13,11,3,13,9,7,11,9,3,1,2,12,10,8,6,5~13,12,7,11,10,6,9,8,3,11,12,5,13,8,1,9,10,7,11,12,1,13,9,3,10,12,4,13,9,2,11,8,5,11,8,6,13,10,7,1~13,12,7,11,1,10,6,9,8,3,13,9,1,8,10,7,12,8,5,11,9,2,13,9,1,8,10,4,13,11,5,12,10,7,12,11,6,1&reel_set3=11,9,5,11,9,5,13,1,11,7,13,11,7,12,9,5,11,9,5,13,11,6,8,9,4,11,9,1,11,9,3,11,9,2,13,11,10,9,11,14,14,14~10,8,6,10,1,8,6,12,10,7,12,10,7,8,10,6,8,10,6,13,12,5,11,10,1,8,10,3,11,10,4,9,8,2,12,10,8,14,14~5,11,9,5,11,9,5,11,1,13,5,11,9,3,11,9,3,13,11,5,13,11,5,13,9,7,13,9,7,11,13,1,11,9,2,11,9,7,11,9,7,13,3,5,14,14,14,12,4,6,10,8~11,9,5,11,9,5,13,1,9,5,13,9,5,12,10,4,12,10,4,11,9,4,11,8,3,11,13,1,11,10,7,11,13,2,11,12,3,11,9,7,11,8,6,14,14,14,14~11,9,5,11,1,9,5,13,9,5,13,9,5,12,10,4,12,10,4,11,9,4,11,8,3,11,13,1,11,10,7,11,1,13,2,11,12,3,11,9,7,11,8,6,14,14,14&reel_set5=13,12,7,11,10,6,9,8,1,13,10,7,12,8,5,11,9,7,13,9,1,10,12,1,6,8,11,5,13,12,4,11,9,3,10,8,2,1~12,10,6,12,10,1,12,8,6,12,10,5,8,10,6,10,8,1,12,10,5,12,10,6,12,8,6,12,10,5,12,10,5,12,10,8,1,4,2,13,11,9,7,3~13,11,7,13,11,7,13,11,4,13,9,3,11,13,1,11,9,4,11,1,13,9,7,11,9,4,13,11,3,13,9,7,11,9,3,1,2,12,10,8,6,5~13,12,7,11,10,6,9,8,3,11,12,5,13,8,1,9,10,7,11,12,1,13,9,3,10,12,4,13,9,2,11,8,5,11,8,6,13,10,7,1~13,12,7,11,1,10,6,9,8,3,13,9,1,8,10,7,12,8,5,11,9,2,13,9,1,8,10,4,13,11,5,12,10,7,12,11,6,1";
            }
        }
	
	
        #endregion
        public LuckyGraceCharmGameLogic()
        {
            _gameID = GAMEID.LuckyGraceCharm;
            GameName = "LuckyGraceCharm";
        }
        protected override void setupDefaultResultParams(Dictionary<string, string> dicParams, double userBalance, int index, int counter, string initString)
        {
            base.setupDefaultResultParams(dicParams, userBalance, index, counter, initString);
	    	dicParams["reel_set"] = "0";
	        dicParams["g"] = "{respin_screen:{def_s:\"15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15\",def_sa:\"15,15,15,15,15\",def_sb:\"15,15,15,15,15\",s:\"15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15\",sa:\"15,15,15,15,15\",sb:\"15,15,15,15,15\",sh:\"20\",st:\"rect\",sw:\"5\"}}";
	        dicParams["st"] = "rect";
	        dicParams["sw"] = "5";
        }
        protected override void convertWinsByBet(Dictionary<string, string> dicParams, float currentBet)
        {
            base.convertWinsByBet(dicParams, currentBet);
            if (dicParams.ContainsKey("mo_tw"))
                dicParams["mo_tw"] = convertWinByBet(dicParams["mo_tw"], currentBet);
        }
        protected override void supplementInitResult(Dictionary<string, string> dicParams, BasePPSlotBetInfo betInfo, BasePPSlotSpinResult spinResult)
        {
            base.supplementInitResult(dicParams, betInfo, spinResult);
            if (!dicParams.ContainsKey("s"))
                dicParams["s"] = "13,12,5,13,13,11,10,11,9,9,7,7,9,5,5";
            if (!dicParams.ContainsKey("sa"))
                dicParams["sa"] = "7,7,13,5,5";
            if (!dicParams.ContainsKey("sb"))
                dicParams["sb"] = "12,8,3,12,12";
        }

    }
}
