using Akka.Event;
using GITProtocol;
using PCGSharp;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SlotGamesNode.GameLogics
{
    class HokkaidoWolfBetInfo : BasePPSlotBetInfo
    {
        public override float TotalBet
        {
            get { return this.BetPerLine * 25.0f; }
        }
    }
    class HokkaidoWolfGameLogic : BasePPSlotGame
    {
        #region 게임고유속성값
        protected override string SymbolName
        {
            get
            {
                return "vs576hokkwolf";
            }
        }
        protected override bool SupportReplay
        {
            get
            {
                return true;
            }
        }
        protected override int ClientReqLineCount
        {
            get { return 576; }
        }
        protected override int ServerResLineCount
        {
            get { return 25; }
        }
        protected override int ROWS
        {
            get
            {
                return 4;
            }
        }
        protected override string InitDataString
        {
            get
            {
                return "def_s=7,8,6,11,11,7,7,6,8,11,2,9,6,8,11,13,13,6,8,3&nas=13&cfgs=4232&ver=2&mo_s=12&def_sb=10,2,1,5,3&mo_v=25,50,75,100,125,150,200,250,375,625,1250,2500,12500&reel_set_size=3&def_sa=4,8,11,12,11&mo_jp=1250;2500;12500&scatters=1~0,0,0,0,0~0,0,0,0,0~1,1,1,1,1&gmb=0,0,0&rt=d&mo_jp_mask=jp3;jp2;jp1&sc=8.00,16.00,24.00,32.00,40.00,80.00,120.00,160.00,200.00,300.00,400.00,600.00,1000.00,2000.00,3000.00,4000.00&defc=40.00&wilds=2~0,0,0,0,0~1,1,1,1,1&bonuses=0&fsbonus=&bls=25,30&paytable=0,0,0,0,0;0,0,0,0,0;0,0,0,0,0;200,75,50,0,0;100,50,20,0,0;50,25,10,0,0;25,10,8,0,0;20,8,4,0,0;15,8,4,0,0;10,5,2,0,0;10,5,2,0,0;10,5,2,0,0;0,0,0,0,0;0,0,0,0,0&total_bet_max=120,000.00&reel_set0=11,11,11,5,5,8,8,3,9,8,8,5,5,7,6,6,9,9,2,10,9,8,6,6,7,7,5,5,10,6,10,11,2,8,8,9,4,4,7,10,10,7,10,4,7,7,5,5,11,5,11,11,9,9,11,2,7,11,7,7,6,6,11,10,10,2,10,4,4,11,6,11,4,11,9,9,3,3,11,9,2,11,8,9,11,7,9,9,10,3,3,10,9,8,10,8,8,2,8,9,4,9,8,8,2,8,4,4,10,9,7,10,7,7,2,7,5,5,11,11,5,5,10,10,7,2,7,7,6,7,10,6,6,10,10,2,4,10,9,4,11,11,7,8,8,3,3,11,5,7,7,6,9,6,10,4,10,10,6,10,4,11,3,11,11,4,11,9,9,3,9,8,9,11,9,9,11,9,9,3,8,7,9,10,7,8,10,5,10,9,8,2,10,11,7,8,9,4,10,8,5,10,7,10~7,7,8,8,5,5,7,7,2,8,8,11,11,3,5,9,4,11,6,11,11,9,2,6,10,3,9,6,6,8,8,11,9,9,6,6,10,10,7,5,5,10,7,11,11,11,2,9,9,5,5,7,9,6,6,7,7,4,7,7,9,6,8,2,9,8,8,3,6,9,11,10,11,2,9,9,6,10,2,10,10,6,6,4,4,7,2,7,7,4,4,6,6,10,10,2,10,10,11,11,11,3,11,10,9,5,4,9,5,3,11,8,9,2,11,3,6,10,11,7,10,2,7,8,9~11,10,3,11,4,12,12,12,12,10,11,6,6,6,6,1,7,10,3,3,3,3,10,7,10,9,9,10,12,10,9,12,12,6,8,12,12,8,11,3,3,3,3,12,7,5,5,12,11,3,4,11,7,8,3,10,9,9,5,4,7,12,12,7,3,3,10,6,11,1,7,4,5,3,3,3,7,12,12,12,10,7,10,10,4,5,3,3,3,7,12,12,12,12,8,12,12~7,7,12,12,12,12,6,6,11,11,11,12,12,7,7,12,12,4,4,9,9,12,6,6,6,6,12,12,10,10,12,8,8,4,4,4,12,12,12,10,8,8,8,5,5,5,5,10,10,10,12,12,12,3,3,8,8,8,12,12,9,9,9,9,11,11,11,5,5,5,5,12,12,12,12,4,4,4,4,7,7,7,7,6,6,6,12,12,9,9,12,12,12,4,4,11,11,11,12,12,6,6,6,8,8,12,12,3,3,3,3,8,8,12,12,12,7,12,12,5,5,5,5,7,7,7,12,12,8,8,8,12,12,12,10,8,12,12,12,12,8,5,6,7,3,8,5,4,8,3,6,8,3,5,6,9,11,12,12,12,7,4,7,5,8,7,3,8,5,6,3,8,10,9,6,8,4,7,11,6,5,11,6,3,8,9,7,5,9,12,12,12,12,12,12,12,12,9,5,6,9~11,11,11,11,3,3,3,3,8,8,8,8,10,10,10,9,9,9,9,12,12,12,12,4,4,4,4,7,7,7,7,9,5,9,11,8,5,10,11,7,10,12,12,4,4,12,12,9,9,7,7,7,5,5,5,5,12,12,12,12,12,12,10,11,11,11,3,11,10,9,5,4,9,11,7,6,11,10,3,8,11,3,9,12,12,12,12,11,10,9,11,8,5,10,11,7,10,8,12,12,12,12,12,12,12,12,5,9,9,9,9,7,7,7,7,12,12,12,12,10,10,11,11,11,3,11,10,9,5,4,9,11,7,6,11,10,3,8,11,12,12,12,12,3,6,11,10,9,11,8,5,10,11,7,10,9,4,8,10,9,6,10,9,11,12,12,8,11,9,4,12,12,12,12,7,8,10,7,8,6,5,8,12,12,12,12,12,12,12,5,9,3,10,9,5,12,12,12,12,12,12&reel_set2=11,11,11,5,5,8,10,10,2,8,8,5,5,2,6,6,8,9,2,8,9,8,6,6,7,7,5,5,2,6,10,5,7,11,7,7,6,6,10,11,10,2,10,4,4,11,6,11,4,11,2,9,3,3,11,9,2,11,3,9,11,3,9,10,9,3,3,10,9,2,10,8,8,2,8,9,4,9,8,8,2,8,4,4,10,9,7,2,7,7,2,7,5,5,11,2,5,5,10,10,7,2,7,7,6,7,2,6,6,10,10,2,4,10,9,4,11,11,3,11,2,3,3,8,5,9,7,6,2,6,10,4,10,10,6,10,4,11,3,11,11,4,11,3,2,3,9,8,9,11,9,2,11,9,9,3,8,3,9,10,7,2,10,5,10,9,8,2,10,11,7,8,9,4,10,2,5,10,7,10~7,7,2,8,5,5,7,7,2,8,8,11,2,11,5,9,9,2,6,11,11,9,2,6,10,10,2,6,6,8,8,5,7,4,7,2,9,6,8,2,8,9,8,3,3,2,9,11,11,2,9,3,9,10,2,10,10,6,2,4,4,7,2,7,7,4,4,6,6,10,10,2,10,10,11,2,11,3,11,10,2,5,4,9,3,3,11,8,9,2,11,3,6,10,11,7,10,2,7,8,9~11,10,3,11,4,12,12,12,12,10,11,6,6,6,6,1,7,10,7,3,3,3,10,7,10,9,9,12,12,12,9,10,9,1,5,4,7,12,12,7,3,3,10,6,11,1,7,4,5,3,3,3,7,12,12,12,12,12,12,12,10,7,10,12,12,12,12,10,4,5,3,3,3,7,12,12,12,12,8,12,12~7,7,12,12,12,12,6,6,11,11,11,12,12,7,7,12,12,4,4,9,9,12,6,6,6,6,12,12,10,10,12,12,8,8,12,12,9,9,11,11,11,5,5,5,5,12,12,12,12,10,10,10,4,4,4,4,7,12,7,7,6,6,6,12,12,9,9,9,9,12,12,12,4,4,12,11,11,12,12,6,6,6,8,8,12,12,3,3,3,3,8,8,12,12,12,7,12,12,5,5,5,5,7,7,7,12,12,8,8,8,12,12,12,10,8,12,12,12,12,8,5,6,7,3,8,5,4,8,3,6,8,3,5,6,9,11,12,12,12,7,4,7,5,8,7,3,8,5,6,3,8,10,9,6,8,4,7,11,6,5,11,6,3,8,9,7,5,9,12,12,12,12,12,12,12,12,9,5,6,9~11,11,11,11,3,3,3,3,8,8,8,8,10,10,10,9,9,9,9,12,12,12,12,4,4,4,4,7,7,7,7,12,12,12,12,12,12,12,10,11,11,11,3,11,12,9,5,4,12,11,7,6,11,10,3,8,11,3,9,12,12,12,12,11,10,9,11,8,5,10,11,7,10,8,12,12,12,12,12,12,12,12,5,5,5,5,9,9,9,12,12,7,7,7,12,12,12,12,10,10,11,11,11,3,11,10,9,5,4,9,11,7,6,11,10,3,8,11,12,12,12,12,3,6,11,10,9,11,8,5,10,11,7,10,9,4,8,10,9,6,10,9,11,12,12,8,11,9,4,12,12,12,12,7,8,10,7,8,6,5,8,12,12,12,12,12,12,12,5,9,3,10,9,5,12,12,12,12,12,12&t=243&reel_set1=5,2,9,7,2,11,11,3,2,9,8,2,7,6,2,7,10,2,4~8,2,8,3,2,10,10,2,11,2,8,11,2,9,9,4,2,6,5,10,2,10,9,2,11,10,2,7~11,11,3,11,4,12,12,12,12,10,10,10,6,6,6,6,9,9,7,7,7,1,12,12,10,10,10,12,12,12,12,8,8,8,8,11,11,12,12,12,12,4,4,12,12,3,6,12,12,12,8,11,9,3,3,3,12,12,5,5,12,12,3,4,11,7,8,3,10,9,5,5,4,12,12,12,12,3,11,8,6,6,5,3,10,6,11,7,7,4,5,3,3,3,7,12,12,12,12,12,12,12~7,7,12,12,12,12,6,6,11,6,6,6,6,12,12,10,10,12,12,5,5,8,8,8,8,3,3,3,11,11,12,12,12,9,9,9,12,12,4,4,4,12,12,12,10,8,8,8,5,5,5,5,10,10,10,12,12,12,3,3,8,8,8,12,12,9,9,11,11,11,5,5,5,5,12,12,12,12,4,4,4,4,12,7,7,7,6,6,6,12,12,9,9,12,12,12,4,4,11,11,11,12,12,6,6,6,8,8,12,12,3,3,3,3,8,8,12,12,12,12,12,12,5,5,5,5,7,7,7,12,12,8,8,8,12,12,12,12,12,12,12,12,12,8,5,6,7,3,8,5,4,8,3,6,8,3,5,6,9,11,12,12,12,12,4,7,5,8,7,3,8,5,6,3,8,10,9,6,8,4,7,11,6,5,11,6,3,8,9,7,5,9,12,12,12,12,12,12,12,12,9,5,6,9~11,11,11,11,3,3,3,3,8,12,4,4,4,4,7,7,7,7,12,9,9,9,5,5,5,5,7,7,7,12,11,11,11,12,12,12,11,10,9,11,8,8,8,8,5,10,11,12,12,12,12,4,4,12,12,12,9,7,7,7,5,5,5,5,12,12,12,12,12,12,10,11,11,11,3,11,10,9,5,4,9,11,7,6,11,10,3,8,11,3,9,12,12,12,12,11,10,9,11,8,5,10,11,7,10,10,10,8,12,12,12,12,12,12,12,12,5,9,9,9,9,7,7,7,7,12,12,12,12,10,10,11,11,11,3,11,10,9,5,4,9,11,7,6,11,10,3,8,11,12,12,12,12,3,6,11,10,9,11,8,5,10,11,7,10,9,4,8,10,9,6,10,9,11,12,12,8,11,9,4,12,12,12,12,7,8,10,7,8,6,5,8,12,12,12,12,12,12,12,5,9,3,10,9,5,12,12,12,12,12,12&total_bet_min=8.00";
            }
        }
	
	
        protected override double MoreBetMultiple
        {
            get { return 1.2; }
        }
        protected override bool SupportMoreBet
        {
            get { return true; }
        }
	
        #endregion
        public HokkaidoWolfGameLogic()
        {
            _gameID = GAMEID.HokkaidoWolf;
            GameName = "HokkaidoWolf";
        }
        protected override void setupDefaultResultParams(Dictionary<string, string> dicParams, double userBalance, int index, int counter, string initString)
        {
            base.setupDefaultResultParams(dicParams, userBalance, index, counter, initString);
	    	dicParams["reel_set"] = "0";
        	dicParams["bl"] = "0";
        }
        protected override void convertWinsByBet(Dictionary<string, string> dicParams, float currentBet)
        {
            base.convertWinsByBet(dicParams, currentBet);
            if (dicParams.ContainsKey("mo_tw"))
                dicParams["mo_tw"] = convertWinByBet(dicParams["mo_tw"], currentBet);
        }

        protected override BasePPSlotBetInfo restoreBetInfo(string strUserID, BinaryReader reader)
        {
            HokkaidoWolfBetInfo betInfo = new HokkaidoWolfBetInfo();
            betInfo.SerializeFrom(reader);
            return betInfo;
        }
        protected override BasePPSlotBetInfo newBetInfo()
        {
            return new HokkaidoWolfBetInfo();
        }
        protected override void readBetInfoFromMessage(GITMessage message, string strUserID)
        {
            try
            {
                HokkaidoWolfBetInfo betInfo = new HokkaidoWolfBetInfo();
                betInfo.BetPerLine = (float)message.Pop();
                betInfo.LineCount = (int)message.Pop();
		
                int bl = (int)message.Pop();
                if (bl == 0)
                    betInfo.MoreBet = false;
                else
                    betInfo.MoreBet = true;
		
		
                if (betInfo.BetPerLine <= 0.0f)
                {
                    _logger.Error("{0} betInfo.BetPerLine <= 0 in HokkaidoWolfGameLogic::readBetInfoFromMessage {1}", strUserID, betInfo.BetPerLine);
                    return;
                }
		
                if (betInfo.LineCount != this.ClientReqLineCount)
                {
                    _logger.Error("{0} betInfo.LineCount is not matched {1}", strUserID, betInfo.LineCount);
                    return;
                }

                BasePPSlotBetInfo oldBetInfo = null;
                if (_dicUserBetInfos.TryGetValue(strUserID, out oldBetInfo))
                {
                    if (oldBetInfo.HasRemainResponse)
                        return;

                    oldBetInfo.BetPerLine   = betInfo.BetPerLine;
                    oldBetInfo.LineCount    = betInfo.LineCount;
                    oldBetInfo.MoreBet      = betInfo.MoreBet;
                    oldBetInfo.PurchaseFree = betInfo.PurchaseFree;
                }
                else
                {
                    _dicUserBetInfos.Add(strUserID, betInfo);
                }
            }
            catch (Exception ex)
            {
                _logger.Error("Exception has been occurred in HokkaidoWolfGameLogic::readBetInfoFromMessage {0}", ex);
            }
        }
	
    }
}
