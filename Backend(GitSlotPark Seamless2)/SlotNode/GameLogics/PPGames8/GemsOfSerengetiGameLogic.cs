using GITProtocol;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SlotGamesNode.GameLogics
{
    class GemsOfSerengetiGameLogic : BasePPSlotGame
    {
        #region 게임고유속성값
        protected override string SymbolName
        {
            get
            {
                return "vs20lcount";
            }
        }
        protected override bool SupportReplay
        {
            get
            {
                return true;
            }
        }
        protected override int ClientReqLineCount
        {
            get
            {
                return 20;
            }
        }
        protected override int ServerResLineCount
        {
            get { return 20; }
        }
        protected override int ROWS
        {
            get
            {
                return 4;
            }
        }
        protected override string InitDataString
        {
            get
            {
                return "def_s=5,9,7,3,11,3,8,10,6,12,4,9,5,5,11,3,8,10,6,4&cfgs=6726&ver=3&def_sb=3,11,9,3,10&reel_set_size=3&def_sa=5,11,9,5,8&scatters=1~0,0,0,0,0~0,0,0,0,0~1,1,1,1,1&rt=d&gameInfo={props:{max_rnd_sim:\"1\",max_rnd_hr:\"7633588\",max_rnd_win:\"4000\"}}&wl_i=tbm~4000&sc=10.00,20.00,30.00,40.00,50.00,100.00,150.00,200.00,250.00,375.00,500.00,750.00,1250.00,2500.00,3750.00,5000.00&defc=50.00&wilds=2~1000,300,100,0,0~1,1,1,1,1&bonuses=0&paytable=0,0,0,0,0;0,0,0,0,0;0,0,0,0,0;750,200,60,0,0;600,150,40,0,0;400,100,30,0,0;300,80,25,0,0;200,60,20,0,0;150,40,12,0,0;150,40,12,0,0;100,20,8,0,0;100,20,8,0,0;0,0,0,0,0;0,0,0,0,0&reel_set0=9,10,7,11,6,8,7,11,9,4,11,6,10,10,11,7,11,9,12,8,8,1,11,3,12,5,7,10,9,10,11,3,7,10,7,10,4,5,8,6,9,11,5,8,6,3,5,2,3,8,9,8,11,11,7,9,9,7,6,5,12,1,10,3,7,4,6,12,12,12,6,10,10,8,7,11,5,9,8,9,6,3,10,7,5,8,9,8,1,4,2,11,10,9,11,11,8,5,8,6,4,11,9,1,4,10,7,6,5,4,9,8,5,9,3,6,10,12,3,10,7,8,4,10,5,11,7,4,11,12,5,6,10,3,11,7,6,5,10,9,8~11,10,12,9,11,5,7,10,7,9,4,10,7,5,11,10,6,10,11,7,10,10,6,6,9,10,3,8,8,9,11,2,5,3,8,7,3,6,10,8,12,12,12,12,3,10,11,8,3,7,11,9,9,10,11,6,9,4,9,5,5,10,6,11,9,9,3,4,10,5,11,10,5,9,10,3,8,9,10,7,10,5,7,10,8,9,9,9,4,5,8,8,11,8,11,5,7,8,7,4,9,11,6,7,4,6,5,4,12,9,8,3,6,9,11,3,9,8,5,10,5,8,11,6,4,7,4,9,10,10,10,6,4,6,7,6,12,11,6,9,9,10,6,8,7,11,3,10,6,9,4,12,9,3,8,11,10,11,8,2,8,4,9,4,8,7,8,3,10,5,6,5,11,10~9,3,7,6,10,1,9,5,10,12,5,3,5,12,11,11,9,10,8,4,10,8,3,8,1,8,4,9,6,3,9,8,11,9,1,10,5,10,7,3,7,8,8,10,6,8,10,9,9,10,6,8,11,10,6,7,11,7,11,5,3,8,10,11,9,7,9,9,3,10,10,10,4,9,4,6,4,11,5,11,4,11,7,3,10,11,4,10,1,9,10,11,11,8,6,4,10,9,9,1,8,9,7,6,7,1,4,8,11,10,5,11,6,9,10,9,10,6,11,9,11,11,9,8,3,7,10,4,8,4,11,4,7,5,10,11,7,11,5,2,10,2,11~11,10,3,9,7,11,9,10,3,8,11,4,8,9,9,12,9,4,10,9,9,10,7,11,3,11,10,5,3,6,12,4,11,12,4,10,5,6,8,9,2,5,8,9,7,6,7,10,11,9,6,12,12,12,2,9,5,8,5,8,7,6,11,8,5,8,11,11,4,8,10,11,11,9,11,7,11,4,10,11,3,9,10,11,9,7,11,10,11,8,7,11,7,4,3,2,11,11,10,5,6,7,10~10,8,11,5,7,3,10,10,11,8,6,4,9,4,6,2,5,11,3,10,1,10,7,1,12,8,9,11,8,10,5,10,7,9,8,9,8,10,7,9,8,9,1,7,8,1,8,3,2,10,5,3,6,9,11,3,10,11,12,9,8,6,5,7,8,3,9,12,12,12,4,10,10,9,11,4,8,7,9,3,7,9,2,3,10,6,11,9,4,3,11,3,5,2,10,8,9,12,4,10,11,6,5,10,3,5,3,8,10,1,9,4,10,10,11,10,7,4,1,8,6,12,9,7,6,11,12,8,10,10,11,4,5,7,11,4,11,6,8,7,11,9,3&accInit=[{id:0,mask:\"hrc\"}]&reel_set2=1,4,1,8,5,7,1,6,11,10,4,7,10,1,10,1,5,4,9,9,6,4,7,8,10,1,8,11,4,1,10,9,1,5,1,7,3,6,1,11,1,11,1,8,3,5,1,10,1,2,10,6,7,3,11,10,11,9,11,9,4,11,1,10,9,9,1~10,8,7,11,7,10,11,9,8,4,11,10,11,5,3,11,5,9,12,10,8,10,9,8,10,6,8,9,5,6,7,6,11,6,11,4,10,4,9,7,10,4,9,7,2,10,11,7,8,11,5,3,11,11,9,5,9,12,8,4,10,3~4,11,8,3,10,7,10,1,6,2,1,10,7,3,1,10,5,10,1,10,5,5,8,5,9,1,9,1,10,9,9,10,1,8,4,1,7,1,11,11,1,6,1,8,1,4,8,4,6,11,7,1,3,7,5,1,11,6,3,11,9~9,4,8,7,3,8,9,7,6,8,12,10,7,8,4,12,10,11,3,2,11,11,5,3,9,3,4,10,3,10,11,8,6,10,6,10,4,8,10,3,4,8,9,11,5,7,11,10,5,11,9,11,8,6,9,11,10,7,10~11,8,10,5,7,1,10,5,10,7,8,5,7,1,5,1,9,3,1,4,10,6,4,11,10,8,1,4,1,10,10,11,6,5,1,11,10,10,6,4,5,9,1,10,1,3,1,3,1,10,4,9,8,11,1,9,10,6,8,8,2,7,9,1,9,1,4,6,3,1,3,1,9,1,6,8,11,1,7,1,5,3,1,7,6,11&reel_set1=9,8,10,9,4,11,9,10,9,5,6,12,8,3,8,6,7,10,3,6,11,3,9,7,10,12,9,3,2,11,10,11,6,2,5,7,3,9,11,4,5,7,11,8,10,8,7,4,2,11,5,4~10,3,2,5,11,9,12,7,12,11,6,5,4,10,6,8,7,5,4,9,10,9,2,8,4,6,9,10,11,3,11,10,11,3,9,6,4,11,8,5,8,6,7,9,5,6,8,3,11,8,10~6,5,10,9,6,8,9,10,4,10,4,7,2,11,10,8,9,8,10,9,12,4,11,3,2,11,5,3,9,10,7,10,6,8,7,5,8,10,4,8,7,9,2,11,3,5,11,9,6,4~11,6,10,7,12,9,2,3,11,3,9,10,11,9,4,6,10,4,8,11,8,4,12,3,6,9,10,6,11,3,10,11,9,2,9,12,7,2,8,11,4,7,11,8,9,8,5,8,5,7,11,10,2,7,12,5,9,11~8,2,8,10,11,6,11,9,8,7,11,10,2,5,6,11,6,8,12,11,3,10,12,8,10,11,3,5,9,4,9,10,7,10,11,8,10,2,3,5,9,7,9,5,9,4,11,7,6,3,2,12,9,8,6,4,5,10,4,10,4,10,11,6,9,10,3,7,2";
            }
        }

        #endregion
        public GemsOfSerengetiGameLogic()
        {
            _gameID = GAMEID.GemsOfSerengeti;
            GameName = "GemsOfSerengeti";
        }
        protected override void setupDefaultResultParams(Dictionary<string, string> dicParams, double userBalance, int index, int counter, string initString)
        {
            base.setupDefaultResultParams(dicParams, userBalance, index, counter, initString);
            dicParams["reel_set"] = "0";
            dicParams["st"] = "rect";
            dicParams["sw"] = "5";
            dicParams["g"] = "{hr:{def_s:\"13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13\",def_sa:\"13,13,13,13,13\",def_sb:\"13,13,13,13,13\",s:\"13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13\",sa:\"13,13,13,13,13\",sb:\"13,13,13,13,13\",sh:\"4\",st:\"rect\",sw:\"5\"}}";
        }
        protected override void supplementInitResult(Dictionary<string, string> dicParams, BasePPSlotBetInfo betInfo, BasePPSlotSpinResult spinResult)
        {
            base.supplementInitResult(dicParams, betInfo, spinResult);
            if(!dicParams.ContainsKey("reel_set"))
                dicParams["reel_set"] = "0";
        }
        protected override void convertWinsByBet(Dictionary<string, string> dicParams, float currentBet)
        {
            base.convertWinsByBet(dicParams, currentBet);
            if (dicParams.ContainsKey("pw"))
                dicParams["pw"] = convertWinByBet(dicParams["pw"], currentBet);

        }
    }
}
