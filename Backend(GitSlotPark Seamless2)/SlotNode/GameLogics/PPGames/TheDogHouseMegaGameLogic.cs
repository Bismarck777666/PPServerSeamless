using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using GITProtocol;

namespace SlotGamesNode.GameLogics
{
    public class TheDogHouseMegaGameLogic : BaseSelFreePPSlotGame
    {
        #region 게임고유속성값
        protected override string SymbolName
        {
            get
            {
                return "vswaysdogs";
            }
        }
        protected override bool SupportReplay
        {
            get
            {
                return true;
            }
        }
        protected override int ClientReqLineCount
        {
            get
            {
                return 20;
            }
        }
        protected override int ServerResLineCount
        {
            get { return 20; }
        }
        protected override int ROWS
        {
            get
            {
                return 7;
            }
        }
        protected override string InitDataString
        {
            get
            {
                return "def_s=8,3,12,3,12,11,8,12,3,12,3,6,10,12,3,12,3,6,10,7,13,7,13,12,14,7,14,7,13,15,14,11,14,14,8,14,14,9,14,14,8,14&nas=14&cfgs=1&ver=2&def_sb=13,11,13,11,13,11&reel_set_size=11&def_sa=6,6,6,13,13,13&scatters=1~0,0,0,0,0,0~0,0,0,0,0,0~1,1,1,1,1,1&gmb=0,0,0&rt=d&gameInfo={props:{max_rnd_sim:\"1\",max_rnd_hr:\"104166666\",max_rnd_win:\"9000\"}}&reel_set10=13,13,13,4,12,12,12,6,12,5,5,5,13,10,9,11,4,4,4,5,3,7,8,11,11,11,3,3,3,8,8,8,9,9,9,6,6,6,4,11~11,11,11,9,3,3,3,4,9,9,9,3,13,13,13,12,8,6,10,6,6,6,13,12,12,12,5,7,5,5,5,11,4,4,4,8,8,8,6,3,9,13,3,9,3,13,9,12,6,9,6,3,13,9,13,6,4,9,3,12,9,12,6,4,6,4,9,4,8,13,9,4,3~8,8,8,11,4,10,3,3,3,6,13,8,3,6,6,6,7,13,13,13,9,5,12,11,11,11,4,4,4,9,9,9,5,5,5,12,12,12,3,12,3,6,9,6,12,5,12,13,5,9,12,5,11,7,4,9,4,6,13,6,13,3,5,12,3,6,11,9,12,9,13,3,13,9,4,9,6,12,11,4,12,11,4,3~12,12,12,11,8,8,8,8,5,13,13,13,7,5,5,5,10,9,9,9,12,6,6,6,3,3,3,3,13,4,4,4,6,4,9,11,11,11,6,9,6,13,8,6,8,6,3,6,9,4,9,6,11,8,5,9,4,9,7,9,8,9,4,13,5,8,9~13,5,3,3,3,9,9,9,9,7,6,11,4,3,8,12,10,11,11,11,12,12,12,5,5,5,6,6,6,4,4,4,8,8,8,13,13,13,3,8,9,6,12,8,9,3,8,4,3,11,4,3,12,6,11,9,12,4,11,9,3,8,3,11,3,11,6,12,5,9,12,9,5,8,4,9,3,12,9,6,5,9,12,3,9,5,12,4,6,4,6~8,8,8,7,10,9,13,13,13,12,6,12,12,12,13,3,8,11,4,6,6,6,5,5,5,5,4,4,4,9,9,9,3,3,3,11,11,11,4,13,6,3,11,13,3,6,5,6,9,3&sc=10.00,20.00,30.00,40.00,50.00,100.00,200.00,300.00,400.00,500.00,750.00,1000.00,2000.00,3000.00,4000.00,5000.00&defc=100.00&wilds=2~0,0,0,0,0,0~1,1,1,1,1,1;15~0,0,0,0,0,0~1,1,1,1,1,1;16~0,0,0,0,0,0~1,1,1,1,1,1&bonuses=0&fsbonus=&paytable=0,0,0,0,0,0;0,0,0,0,0,0;0,0,0,0,0,0;150,60,40,15,0,0;60,30,20,10,0,0;40,20,15,7,0,0;30,15,10,4,0,0;30,10,8,3,0,0;30,10,8,3,0,0;20,6,4,2,0,0;20,6,4,2,0,0;20,6,4,2,0,0;10,4,2,1,0,0;10,4,2,1,0,0;0,0,0,0,0,0;0,0,0,0,0,0;0,0,0,0,0,0&rtp=96.55&total_bet_max=10,000,000.00&reel_set0=4,4,4,1,10,3,13,13,13,12,6,12,12,12,8,11,11,11,11,5,8,8,8,7,4,9,9,9,9,13,3,3,3,5,5,5,6,6,6,7,1,8,13,6,8,12,6,9,3,8,9,3,8,5,6,1,11,12,11,1,13,8,3,9,3,8,12,6,3,11,8,13,6~8,3,9,9,9,13,7,11,13,13,13,2,6,11,11,11,9,1,3,3,3,12,5,10,5,5,5,4,8,8,8,12,12,12,4,4,4,3,9,13,12,4,11,3,13,12,4,2,9,5,12,9,4,5,4,6,4,13,5,13,12,13~11,11,11,8,7,1,13,13,13,13,12,12,12,9,9,9,9,4,5,5,5,3,3,3,3,10,4,4,4,11,5,12,2,6,2,12,4,9,12,2,13,5,3,2~4,4,4,4,9,9,9,11,13,13,13,5,7,12,12,12,12,1,5,5,5,2,8,13,11,11,11,6,3,10,9,3,3,3,5,13,9,11,9,3,9,12,9,5,13,5,7,9,3,5,3,5,9,3,13,3,5,3,13~11,12,12,12,1,10,9,12,11,11,11,13,5,5,5,8,7,3,3,3,4,5,2,6,4,4,4,3,13,13,13,9,9,9,12,7,4,5~10,12,12,12,11,8,8,8,3,8,6,3,3,3,1,11,11,11,9,5,5,5,5,13,12,6,6,6,7,4,13,13,13,9,9,9,4,4,4,6,12,5,4,8,5,12,6,5,4,5,4,6,5,8,7,9,8,9,13,4,6,13,8,4,12,6,12,7,1,3,13,11,5,8,9,6,8,5,9,5,9,5,12&reel_set2=8,8,8,12,10,11,11,11,13,3,13,13,13,9,3,3,3,4,6,12,12,12,11,6,6,6,8,5,5,5,7,4,4,4,5,9,9,9,10,3,13,3,4,11,9,5,3,11,10,11,13,11,9,3,9,4,5,11,10,3,11,6,5,13,3,9,5,13,5,10,3,9,6,11,3,13,11,6,4,9,4,3,11,4,11,4,5,9,3,11,13,11,3,5,12,3,4,3,6~9,9,9,5,11,11,11,12,7,11,4,4,4,13,13,13,13,4,5,5,5,10,6,3,3,3,8,8,8,8,3,12,12,12,9,5,4,3,4,5,6,11,3,13,11,3,5,11,8,11,8,12,11,13,4,13,10,4,13,4,11,8,5,3,8,3,13,5,4,13,3~5,10,4,4,4,11,8,11,11,11,9,13,6,4,3,3,3,3,8,8,8,12,7,9,9,9,12,12,12,13,13,13,5,5,5,9,8,12,4,12,4,6,11,7,11,4,3,7,11,3,8,4,8,3,4,9,11,9,11,12,11,9,7,3,11,4,7,8,3,7,9,4,3,4,3,9,11,9,12~9,7,6,3,3,3,5,8,3,4,4,4,13,4,11,12,12,12,12,10,9,9,9,13,13,13,5,5,5,11,11,11,4,5,10,13,4,3,13,12,3,12,5,13,7,3,11,5,13,3,5,4,3,13,11,7,4,12,3,5,8,5,7,13,8,3,5,12,7,3,6,5,3,7,3,6,13~4,4,4,9,3,3,3,10,12,3,4,11,11,11,8,6,5,7,11,13,9,9,9,12,12,12,5,5,5,13,13,13,11,13,9,5,9,3,9,6,13,3,13,9,13,11,9,13,11,6,9,13,3,5,12~12,13,13,13,5,4,3,12,12,12,10,9,9,9,7,11,9,6,6,6,8,13,6,4,4,4,3,3,3,11,11,11,5,5,5,8,8,8,6&t=243&reel_set1=4,8,10,6,6,6,13,9,9,9,9,7,12,5,13,13,13,11,4,4,4,6,8,8,8,3,11,11,11,3,3,3,12,12,12,5,5,5,7,5,6,11,13,9,6,10,3,6,13,3,9,3,6,8,9,10,12,3,12,10,6,3,8,13,9,8,3,13,3,13,6,13,3,8,12,6,9,12,6,12,11,10,12,9,3,10,13~3,3,3,11,8,8,8,6,13,13,13,9,9,9,9,10,5,5,5,13,12,12,12,5,3,4,2,12,8,7,11,11,11,4,4,4,5~8,8,8,13,13,13,13,6,10,4,7,11,9,11,11,11,5,3,3,3,8,2,3,12,9,9,9,4,4,4,5,5,5,12,12,12,5,13,9,13,5,11,13,2,13,3,13,5,4,2,12,13,3,11,5,3,11,4,13,9,3,13,4,13,5,13,4,11,3,13,12,7,13,4,13,2,5,3,4~4,12,12,12,10,13,13,13,5,3,3,3,2,11,7,6,13,11,11,11,3,12,9,9,9,9,8,5,5,5,4,4,4,5,8,12,11,12,8,3,13,11,2,9,6,2,3,2,3,12,5,8,5,9,5,12,8,3,7,9,5,12,7,3,12,9,3,11,3,9,2,8,11,12,5~4,9,8,13,3,7,6,11,13,13,13,5,2,9,9,9,12,10,4,4,4,11,11,11,12,12,12,5,5,5,3,3,3,13,3,11,2,13,2,12,3,13,7,13,9,3,2,6,12,13,12,13,3,5,13,3,13,3,13,7,13,3,13,9,5,3,9,3,5,12,13,5,13,9,12,9,2,11,12,5,9,12,3,13,9,12,11,13,5,9,13,9,3,12,3,13,12,5,9~13,13,13,3,12,12,12,7,9,8,8,8,6,6,6,6,10,4,5,5,5,5,13,11,11,11,8,12,11,9,9,9,3,3,3,4,4,4,5,11,9,6,4,8,11,4,9,5,11,6,4,6,5,11,12,8,11,6,12,11,4,3,12,6,9,8,4,11,4,3,6,5,3,8,6,9,3,6,12,5,11,3,4,12,5,9,4,6,4,6,4,9,8,11,6,4,5,11,9,6&reel_set4=7,11,11,11,9,8,8,8,12,4,6,5,9,9,9,13,10,8,5,5,5,11,3,13,13,13,12,12,12,3,3,3,6,6,6,4,4,4,5,4,9,8,5,13,4,5,12,13,4,12,4,5,4,12,5,4,3,13,12~13,9,11,11,11,10,9,9,9,4,12,12,12,7,8,3,4,4,4,5,13,13,13,12,6,5,5,5,11,3,3,3,11,3,5,11,5,11,9,5,11,12,5,11,12,11,5,12,4,11,3,4,9,3,11,5,4,9,11,3,9,11,7,3,12,3,12,3,9,11,5,4,11,9,11,12,9,4,3,11,5,4,7,8,3,11,3,11,12,4,3~12,12,12,5,12,7,11,6,11,11,11,9,13,13,13,13,4,10,3,8,9,9,9,4,4,4,3,3,3,5,5,5,11,9,13,3,13,11,3,9,4,13,9,5,11,13,4,13,4,13,5,13,11,13,11,9,3,9,13,3,13,9,13,9,13,4,13,4,3,13,5,13,9,4,13,3,13~10,8,8,8,5,13,13,13,13,12,12,12,4,9,4,4,4,2,8,11,11,11,7,3,3,3,6,5,5,5,12,11,3,9,9,9,12,7,8,5,12,8,5,9,3,4,11,12,11,8,3~9,9,9,9,6,8,8,8,2,12,12,12,12,5,10,4,7,3,8,11,13,4,4,4,11,11,11,3,3,3,13,13,13,5,5,5,12,7,3,8,5,8,12,13,11,13,8,12,11,7,5,3,12,4,8,12,8,11,3,5,8~13,8,9,11,11,11,10,12,11,4,3,7,5,6,12,12,12,5,5,5,13,13,13,4,4,4,3,3,3,8,8,8,9,9,9,6,6,6,5,8,6,12,11,5,4,12,3,11,4,12,11,7,8,11,12,4,6,11,3,4,10,9,12,11,8,3,9,11,8,11,8,11,5,3,6,12,6,8,9,8,5,11,5,6,11,9&purInit=[{type:\"fsbl\",bet:2000,bet_level:0}]&reel_set3=3,3,3,7,5,11,9,9,9,13,12,6,6,6,9,4,4,4,10,11,11,11,6,12,12,12,3,4,5,5,5,8,13,13,13,8,8,8,6,9,6,12,7,13,5,13,6,9,11,6,13,12,7,9,4,8,6,5,7,9,11,4,6,9,8,12,4,8,6,4,5,10,4,7,9,4,13,11,9,5,12,4,12,4,11,9,4~3,3,3,3,4,12,12,12,5,13,13,13,9,12,2,4,4,4,10,9,9,9,8,8,8,8,6,11,7,13,5,5,5,11,11,11,5,9,13,12,7,12,9,11,13,11,13,12,13,12,8,11~3,9,13,13,13,11,12,5,5,5,2,13,8,5,7,10,4,6,9,9,9,8,8,8,11,11,11,12,12,12,4,4,4,3,3,3,4,12,11,9,13,5,13,4,12,4,11,12,13,8,4,6,9,5,11,4,9,5,4,13,6,11,5,9,12,5,4,11,5,9,12,13,9,6,11,12,8,4,11,13,12,9,8,4,12,8,4,12,5,12,4,9,4,11,5,8,4,9,8~9,9,9,8,11,7,12,12,12,5,6,13,10,9,3,3,3,4,12,3,13,13,13,5,5,5,11,11,11,4,4,4,8,3,13,5,3,10,8,3,5,12,11,3,12,3,5,13,5,12,11,5,10,13,5,4,12,13,12,13,12,13,5,13,5~4,4,4,8,12,5,5,5,5,9,3,9,9,9,6,4,11,13,13,13,7,12,12,12,13,10,3,3,3,11,11,11,3,7,5,12,3,12,7,3,11~4,3,3,3,3,7,6,13,13,13,13,5,10,11,11,11,11,9,8,12,12,12,12,6,6,6,5,5,5,9,9,9,8,8,8,4,4,4,5,11,3,6,9,13,5,13,10,9,5,13,9,5,11,6,9,3,13,9,13,11,8,9,13,9,5,11,13,9,8&reel_set6=11,3,10,13,5,4,8,6,9,12,7,10,12,9,10,4,5,7,13,7,6,4,10,7,9,6,4,5,10,4,7,4,9,10,9,6,5,6,10,5,4,5,6,4,5,10,5,6,5,4,7,9,4,7,10,4,6,7,5,7,6,7,5,9,7,9,13,4,7,5,4,9,4,6,9,10,13,4,10,9,6~4,13,9,2,11,6,8,10,12,7,5,3,7,6,7,11,2,6,2,8,7,8,7,11,5,11,2,7,3,7,3,11,3,6,5,6,8,11,2,8,3,6,12,5,11,6,7,8,7,8,5,2,3,8,2,3,11~7,12,8,10,2,9,4,5,11,6,13,3,11,3,6,12,13,3,4,6,10,11,13,11,6,12,8,5,12,6,3,5,10,5,3,12,8,5,12,9,4,11,12,8,3,4,3,12,4,8,5,6,10,3,8,5,8,4,5,6,8,11,12,4,8,10,12,11,4,5,8,3,6,12,3,11,6,12,13,12~6,10,11,8,9,12,2,7,4,3,13,5,4,11,3,13,7,2,5,7,5,4,12,4,7,5,9,13,2,4,2,4,5,4,2,4,10,12~12,11,9,7,5,2,13,4,6,8,10,3,11,5,3,13,7,2,11,8,11,10,8,11,2,8,11,10,11,3,11,6,8,13,7,3,7,11,13,2,13,8,11,9,13,3,11,6,11,13,8,11,8,13,5,7,11,2,8,13,11,9,11,3,8,11,13,10,11,13,8,9,13~8,3,6,13,11,12,4,5,10,9,7,9,7,3,5,12,5,6,10,6,10,6,13,12,3,5,7,10,7,9,13,7,3,5,10,9,6,3,12,6,7,13,6,3,7,10,13,9,7,3,10,12,6,7,6,9,7,9,12,5,7,9,12,5,10,12,3,5,6,9&reel_set5=5,6,7,13,10,4,11,12,3,1,8,9,11,12,6,1,6,11~5,11,6,1,10,4,13,9,7,8,3,12,2,8,3,2,7,8,2,7,2,8,6,12,1,8,1,2,12,8,2,1,3,7,12,7,6~2,7,10,1,11,8,3,9,4,12,13,5,6,13,3,1,3,1,9,5,3,4,10,4,9,5,4,1,6,3,4,7,5,11,1,13,1,5,10,1,9,3,4,5,6,3~4,13,12,10,6,7,5,2,3,1,9,11,8,3,9,7,8,1,3,1,9,7,5,12,13,3,5,9,8,1,7,1,13,10,5,1,9,1,12,1,3,9,5,9,5,9,12,1,5,8,5,10,1,9,5~6,13,12,8,11,2,3,4,7,9,1,10,5,7,2,5,10,5,9,3,4,10,7,5,12,13,5,3,9,10,8,11,2,7,8,13,10,5,10,7,13,3,4,2,7,5,10,8,1,7,8,2,5,4,5,2,8,2,5,8,5,2,10,2,7,2,8,5,2,7,5,8,13,8,5,13,2,5,9,2,13,2,1,13,9,4,10,2,3,2,7,2~9,1,4,11,10,6,8,3,7,12,13,5,13,3,13,5,10,7,3,7,3,5,13,7,13,7,8,1,7,3,6,3,8,13,3,13,8,3,13,11,13,5,13,7,5,6,13,3,6,3,7,3,8,3,8,7,12,8,5,13,7,3,8,13,7,5,13,5,13,12,3,8,5,3,5,3,7,6,11,6,3,5,7,13,8,13,12,3&reel_set8=13,11,5,6,8,13,13,13,10,7,3,5,5,5,12,8,8,8,9,4,4,4,4,11,11,11,9,9,9,3,3,3,12,12,12,7,7,7,3,12,11,5,8,7,3,6,3,12,10,5,11,3,9,6,3,4,5,12,3,4,5,11,12,7,4,3,12,8,3,5,12,7,4,5,3,7,6,4,8~7,6,10,13,13,13,13,12,11,9,7,7,7,3,5,2,4,8,8,8,8,12,12,12,4,4,4,11,11,11,9,9,9,3,3,3,4,12,5,3,5,2,3,5,11,13,5,12,10,5,8,11,12,13,5,11,9,12,13,9,2,10,12,9,13,11,3~3,3,3,11,7,13,13,13,9,8,8,8,6,8,3,13,4,2,12,5,5,5,10,5,11,11,11,4,4,4,12,12,12,9,9,9,8,13,11,9,8,11,13,4,8,13,9,11,4,5,11,4,5,13,4,9,4,13,5,4,13,4,11,13~4,4,4,3,7,9,9,9,9,12,13,13,13,13,8,8,8,6,12,12,12,11,4,10,7,7,7,2,5,8,3,3,3,11,11,11,8,12,13,7,13,12,7,11,3,7,5,13,8,7,3,13,5,9,12,5,10,13,9,6,12,7,12,9,12,11,10,11,8,5,13,12,9,3,7,5,9,11,13,5,7,3,12,13,11,12,9,11,10,3,5~6,3,8,12,4,5,10,11,9,7,13,5,4,11,5,4,12,5,9,5,13,8,5,9,10,5,10,8,4,5,11,5,9,10,9,5,9,3,4,9,5,12,4,10,9,4,9,5,3,5,9,13,10,11,5,4,5,8,9,10,5,9,4,5,10,13,5,10,5,9,10,5,4,5,8,13,10,12,4,5,10,12,10,13,3,9,5,9,13,4,10~7,12,3,13,8,10,6,5,11,9,4,6,3,6,5,3,11,6,9,6,5,13,6,9,4,5,13,11,6,13,9,6,5,3,6,11,5,3,11,6,5,3,4,6,3,6,3,5,6,11,10,5,6,4,3,6,11,6,4,13,6,11,6,5,4,6,10,4,3,11,6,11,5,11,6,5,4,5,6,4,9,5,6,4,13,6,5,3,6,9,3,4,6,9,4,5,6&reel_set7=3,6,6,6,12,13,13,13,11,7,4,9,11,11,11,8,10,9,9,9,13,8,8,8,6,3,3,3,5,5,5,5,12,12,12,4,4,4,13,12,11,13,9,11,5~12,12,12,3,5,3,3,3,6,2,7,8,8,8,10,4,4,4,13,4,13,13,13,8,9,12,9,9,9,11,11,11,11,5,5,5,7,13,5,7,5,13,5,2,6,13,5,4,8,7,5,11,3,5,2,9,5,11,8,3~6,2,3,13,7,11,11,11,10,12,12,12,5,12,4,4,4,4,11,9,9,9,8,9,5,5,5,13,13,13,3,3,3,8,8,8,12,10,9,3,12,11,7,4,5,10,12,8,9,3,4,9,13,5,8,13,5,4,3,8,12,3,7,9,10,13,7,3,10,3,11,4,5,4,3,7,4,5,4,3,7,8,5,7,2,9,5,7,13,4~4,4,4,5,8,9,9,9,6,3,9,8,8,8,12,10,5,5,5,2,11,12,12,12,7,4,13,3,3,3,11,11,11,13,13,13,8,2,8,6,3,11,12,8,3,9~13,2,5,4,4,4,8,11,9,9,9,9,10,3,12,4,6,7,5,5,5,11,11,11,13,13,13,8,8,8,3,3,3,12,12,12,8,9,10,3,4,10,12,8,5~4,9,9,9,10,12,12,12,7,11,6,12,9,5,13,13,13,13,3,11,11,11,8,3,3,3,8,8,8,4,4,4,5,5,5,6,6,6,13,8,5,12,13,12,11,10,11,8,6,5,10,9,13,5,13,5,12,13,8,5,8,13,5,12,13,5,12,8,6,5,6,5,11,5,10,8,13,5,8,5,12,8,11,5,8,5,8,13,11,10,5,12,13,12,13,12,6&reel_set9=7,5,8,11,9,9,9,6,10,12,3,4,4,4,4,13,9,5,5,5,8,8,8,12,12,12,13,13,13,3,3,3,11,11,11,6,6,6,9,13,9,11,8,6,5,3,5,13,12,5,13,10,13,5,9,5,13,12,5,11,4,12,13,11,9,13,12,8~9,9,9,8,3,3,3,3,6,13,13,13,9,11,4,13,5,5,5,5,7,10,8,8,8,12,11,11,11,4,4,4,12,12,12,8,3,5,4,12,3,12,11,12,3,12,11,4,13,6,11,13,12,5,4,5,8,13,5,3,4,10,3,8,11,10,5,12,11,3,4,3,5,3,10,13,8,3,4,13,7,4,12,13,12,10,13,11,3,4~13,8,8,8,12,7,4,10,8,5,6,3,9,11,11,11,11,4,4,4,5,5,5,3,3,3,13,13,13,12,12,12,9,9,9,10,12,3,10,4,11,10,7,4,11,12,4,11,12,10,3,10,8,12,9,7,11,3,10,12,11,3~8,12,3,12,12,12,10,9,9,9,4,5,11,7,4,4,4,9,6,11,11,11,13,13,13,13,3,3,3,5,5,5,4,13,11,4,3,11,10,9,11,9,11,4,3,13,3,9,11,12,3,13,9,3,11~9,5,6,11,11,11,8,4,4,4,4,7,12,12,12,3,12,13,3,3,3,10,11,13,13,13,5,5,5,9,9,9,8,5,8,3,11,13,4,11,5,11,8,11,4,5,4,11,13,11,8,11,5,7,11,5,11,6,11,4,12,11,5,11,8,5~9,9,9,12,5,5,5,13,11,12,12,12,7,6,6,6,8,6,5,9,4,10,11,11,11,3,3,3,3,4,4,4,13,13,13,8,8,8,13,8,13,8,3,13,3,5,11,6,13,4,8,4,8,13,4,6,8,7,5,8,11,13,12,6,11,13,3,4,13,5,12,4,6,3,4,8,4,11,5,11,12,7,13,12,13,5,8,4,13,10,13,12,4,12,5,13,6,5&total_bet_min=10.00";
            }
        }

        protected override int FreeSpinTypeCount
        {
            get { return 8; }
        }
        protected override int[] PossibleFreeSpinTypes(int freeSpinGroup)
        {
            switch(freeSpinGroup)
            {
                case 0:
                    return new int[] { 200, 201 };
                case 1:
                    return new int[] { 202, 203 };
                case 2:
                    return new int[] { 204, 205 };
                case 3:
                    return new int[] { 206, 207 };
            }
            return null;
        }
        protected override bool SupportPurchaseFree
        {
            get { return true; }
        }
        protected override double PurchaseFreeMultiple
        {
            get { return 100.0; }
        }
        #endregion

        public TheDogHouseMegaGameLogic()
        {
            _gameID = GAMEID.TheDogHouseMega;
            GameName = "TheDogHouseMega";
        }
        protected override void readBetInfoFromMessage(GITMessage message, string strGlobalUserID)
        {
            try
            {
                BasePPSlotBetInfo betInfo = new BasePPSlotBetInfo();
                betInfo.BetPerLine = (float)message.Pop();
                betInfo.LineCount = (int)message.Pop();

                if (message.DataNum >= 3)
                    betInfo.PurchaseFree = true;
                else
                    betInfo.PurchaseFree = false;

                if (betInfo.BetPerLine <= 0.0f)
                {
                    _logger.Error("{0} betInfo.BetPerLine <= 0 in TheDogHouseMegaGameLogic::readBetInfoFromMessage {1}", strGlobalUserID, betInfo.BetPerLine);
                    return;
                }
                if (betInfo.LineCount != this.ClientReqLineCount)
                {
                    _logger.Error("{0} betInfo.LineCount is not matched {1}", strGlobalUserID, betInfo.LineCount);
                    return;
                }

                BasePPSlotBetInfo oldBetInfo = null;
                if (_dicUserBetInfos.TryGetValue(strGlobalUserID, out oldBetInfo))
                {
                    //만일 유저에게 남은 응답이 존재하는 경우
                    if (oldBetInfo.HasRemainResponse)
                        return;

                    oldBetInfo.BetPerLine = betInfo.BetPerLine;
                    oldBetInfo.LineCount = betInfo.LineCount;
                    oldBetInfo.PurchaseFree = betInfo.PurchaseFree;
                }
                else
                {
                    _dicUserBetInfos.Add(strGlobalUserID, betInfo);
                }
            }
            catch (Exception ex)
            {
                _logger.Error("Exception has been occurred in TheDogHouseMegaGameLogic::readBetInfoFromMessage {0}", ex);
            }
        }
        protected override void setupDefaultResultParams(Dictionary<string, string> dicParams, double userBalance, int index, int counter, string initString)
        {
            base.setupDefaultResultParams(dicParams, userBalance, index, counter, initString);
            dicParams["reel_set"] = "0";

        }
        protected override void convertWinsByBet(Dictionary<string, string> dicParams, float currentBet)
        {
            base.convertWinsByBet(dicParams, currentBet);
            if (dicParams.ContainsKey("wlc_v"))
            {
                string[] strParts = dicParams["wlc_v"].Split(new string[] { ";" }, StringSplitOptions.RemoveEmptyEntries);
                for (int i = 0; i < strParts.Length; i++)
                {
                    string[] strValues = strParts[i].Split(new string[] { "~" }, StringSplitOptions.RemoveEmptyEntries);
                    strValues[1] = convertWinByBet(strValues[1], currentBet);
                    strParts[i] = string.Join("~", strValues);
                }
                dicParams["wlc_v"] = string.Join(";", strParts);

            }
        }
        protected override Dictionary<string, string> mergeSpinToBonus(Dictionary<string, string> spinParams, Dictionary<string, string> bonusParams)
        {
            Dictionary<string, string> resultParams = new Dictionary<string, string>();
            foreach (KeyValuePair<string, string> pair in bonusParams)
                resultParams.Add(pair.Key, pair.Value);

            string[] toCopyParams = new string[] { "sa", "sb", "fs", "fsmul","fsmax", "fsres", "fswin", "fs_total", "fsmul_total", "fsres_total", "fswin_total","n_reel_set",
                "s", "purtr", "w", "tw", "reel_set"};
            for (int i = 0; i < toCopyParams.Length; i++)
            {
                if (!spinParams.ContainsKey(toCopyParams[i]) || resultParams.ContainsKey(toCopyParams[i]))
                    continue;

                resultParams[toCopyParams[i]] = spinParams[toCopyParams[i]];
            }
            if (!resultParams.ContainsKey("na") || resultParams["na"] != "fso")
            {
                resultParams.Remove("fs_opt");
                resultParams.Remove("fs_opt_mask");
            }
            return resultParams;
        }
    }
}
