using Akka.Actor;
using GITProtocol;
using GITProtocol.Utils;
using MongoDB.Bson;
using PCGSharp;
using SlotGamesNode.Database;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SlotGamesNode.GameLogics
{
    class DrillThatGoldGameLogic : BasePPSlotGame
    {
        protected int _normalMaxID2         = 0;
        protected int _naturalSpinCount2    = 0;
        protected int _emptySpinCount2      = 0;
        protected int _anteStartID          = 0;

        #region 게임고유속성값
        protected override string SymbolName
        {
            get
            {
                return "vs20drtgold";
            }
        }
        protected override bool SupportReplay
        {
            get
            {
                return true;
            }
        }
        protected override int ClientReqLineCount
        {
            get { return 20; }
        }
        protected override int ServerResLineCount
        {
            get { return 20; }
        }
        protected override int ROWS
        {
            get
            {
                return 3;
            }
        }
        protected override string InitDataString
        {
            get
            {
                return "def_s=7,13,10,6,10,5,11,8,5,13,6,13,5,8,11&reel_set25=13,6,11,12,7~9,8,10~9,8,5,10~6,11,12,7~12,11,7,6,5,7,11,10,6,9,13,12,9,8,7,10,12,5,13,9,11,8,5,11,13,12,9,13,10&reel_set26=6,11,7,13,11,12,6,12~9,8,5,10~4,10,9,4,9,10,9,10,8,10,9,8,10,8,9,4,4,4,10,8,5,8,9,5,4,10,9,10,5,10,5,9,5,10~11,12,6,4,12,7,6,12,4,4,4,11,12,11,12,4,11,7,11,6,11~9,12,10,7,11,12,5,9,8,6,5,11,13,7,12,8,10,13,5,7,9,12,13,10&reel_set27=7,12,11,6,12,11,6,13~9,8,5,10~9,8,10~6,11,12,7~11,13,5,9,12,10,9,11,7,6,11,9,5,12,10,8,13,6,10,12,7,10,11,12,6,12,13,9,10,7,12,5,8,7,11,13,8&cfgs=5288&ver=3&def_sb=7,12,7,3,11&reel_set_size=28&def_sa=1,10,9,1,10&scatters=1~0,0,0,0,0~0,0,0,0,0~1,1,1,1,1&rt=d&gameInfo={props:{max_rnd_sim:\"1\",max_rnd_hr:\"4366812\",max_rnd_win:\"5000\",max_rnd_win_a:\"4000\",max_rnd_hr_a:\"4366812\"}}&wl_i=tbm~5000;tbm_a~4000&reel_set10=13,12,8,11,10,11,5,6,7,10,8,11,9,12,5,8,10,13,12,9,13,7,6,11,13,12,10,7,12,13,12~4,4,10,4,6,12,4,4,12,13,4,4,10,9,4,4,4,11,10,9,1,13,4,7,11,12,4,4,13,11,4,9,4,10~9,11,12,7,11,6,8,13,10,12,8,9,13,12,13,7,12,11,8,6,11,12,5,13,3,13,10,5,10~10,6,7,11,12,11,13,9,13,6,9,10,8,11,12,13,7,12,3,11,8,5,9,10,8,10,11,12,7,5,12,6~12,7,5,8,13,10,8,12,11,10,6,10,13,9,12,9,7,8,13,11,12,6,7,11,13&sc=10.00,20.00,30.00,40.00,50.00,100.00,150.00,200.00,250.00,375.00,500.00,750.00,1250.00,2500.00,3750.00,5000.00&defc=50.00&reel_set11=11,8,12,11,12,6,13,8,10,6,10,13,9,12,11,13,9,8,7,13,12,10,8,10,11,12,5,11,7,10,9,7,8,11,12,6,13,7,13,5~12,9,6,12,8,11,3,13,10,12,10,13,8,12,13,8,10,6,10,9,8,13,6,11,12,10,7,13,11,13,11,6,5,9,5,12,9,11,12,10,13,12,7,5,11,12,6,7,5,9,7,9,13,11,12,10,9,10,7,9,13,11,8,6,7,5~13,7,4,9,10,4,6,13,10,4,4,12,4,4,4,10,4,12,4,4,11,4,4,11,12,9,11,5,10,4,4~6,12,11,7,6,7,10,12,10,12,13,9,12,9,13,5,9,8,13,7,3,11,13,5,13,8,5,10,13,11,8,10,6,11~13,12,7,12,11,5,11,13,6,12,13,12,9,8,9,7,11,8,10,7,10,13,10,8,6&reel_set12=9,5,8,13,12,10,9,10,13,7,11,10,7,13,6,12,11,12,8,7,5,11,12,10,11,8,13,8,7,6~6,13,10,13,9,7,8,12,5,6,9,3,6,8,13,10,5,10,12,8,11,13,5,13,9,10,9,7,6,13,7,10,13,12,11,12,11,8,10,7,9,12,6,9,12,11,8,7,8,12,7,11,10,5,10,13,11,9,12~10,13,10,4,13,4,4,11,9,4,4,4,12,9,12,4,4,7,4,6,11,4,5,10~12,13,7,10,12,13,9,6,11,12,7,3,7,13,11,12,5,13,5,6,9,11,8,10,9,8,9,10,11,8,12,13,5,13,10~4,4,12,11,4,4,4,5,4,10,11,9,6,13,4,10,7&reel_set13=10,9,13,8,6,13,12,8,7,10,7,12,13,10,13,6,11,10,11,8,7,13,12,7,9,8,13,8,13,12,9,7,11,5,12,11,5,12,11,10,6~8,7,10,9,12,6,13,5,9,7,10,11,8,10,11,3,12,13,12,13,9,13,11,13,6,11,12,10,13,6,11,10,12,6,9,12,7,5,8,13,5,8,10,6,8,11,13,11,9,8,12,11,7,12,7,10,13,11,9,5,9,11,10~13,7,6,12,8,11,13,11,5,10,11,8,12,7,6,7,12,10,5,10,9,12,6,13,9,10,9,13,11,12,8,7,11,3,13,12,8~10,4,13,4,12,4,13,10,4,5,4,9,4,4,4,11,4,10,4,4,12,9,12,4,4,11,6,7~7,11,12,4,10,13,4,4,4,10,9,6,4,4,5,4,4,12,4&wilds=2~250,100,50,0,0~1,1,1,1,1;3~250,100,50,0,0~1,1,1,1,1&bonuses=0&bls=20,25&reel_set18=10,13,10,11,7,11,13,12,7,12,7,11,8,10,9,8,12,13,6,13,12,10,6,8,5,6,7,9,11,12,13,8,5,11,13,7,12~4,4,10,13,4,9,4,7,4,13,4,12,10,4,4,4,9,4,4,11,4,10,4,4,12,11,4,4,12,4,11~5,13,9,6,13,10,12,8,12,13,12,13,12,11,9,10,13,6,7,13,9,6,12,10,5,11,8,7,11,7,12,10,11,8,11,8~12,10,4,11,4,4,9,4,4,10,11,4,4,11,4,4,10,4,10,4,4,4,9,4,4,13,4,4,12,11,4,13,4,4,12,4,4,13,4,10,4,4,12,4,4~9,4,4,12,4,4,12,4,13,4,4,10,4,4,9,4,4,4,10,4,12,10,4,4,13,4,13,4,11,4,7,4,4,11,4,4&reel_set19=13,9,6,12,7,9,11,13,11,12,11,13,10,8,13,6,10,12,11,12,10,5,8,13,7,12,7,8~12,4,4,13,11,4,4,10,4,4,9,4,4,4,7,4,12,4,13,4,4,10,4,4,10,11~13,4,10,4,4,7,4,12,4,4,12,4,9,10,4,4,10,4,4,12,4,4,4,10,4,11,13,4,4,11,4,11,4,10,4,4,12,4,4,11,4,4,13,4~12,4,4,13,4,4,4,10,9,4,11,4,4,13,11,4,4,4,10,4,4,4,12,4,9,4,12,4,10,13,12,10,4,4,4,11,4~12,4,10,4,4,11,4,12,4,4,10,4,10,4,4,9,4,4,4,12,4,10,4,4,13,4,11,4,7,4,4,9,4,4,13,11,4&reel_set14=8,5,12,7,9,7,12,13,11,13,12,13,6,10,8,11,10,11,7,13,8,13,12,9,12,8,13,12,10,13,8,11,12,11,7,10,7,12,5,6,11,10,13~13,6,5,12,6,9,13,10,8,12,11,9,6,12,8,13,9,12,10,13,8,11,13,9,11,10,3,10,8,11,13,7,13,11,8,9,7,10,7,6,12,7,13,9,7,13,6,11,5,12,11,8,9,12,6,13,10,5,13,11,7,10,12,9,5,7,9,10,12,8,7,5,11,13,12,6,13,9,10,12,11~13,12,7,4,12,4,12,4,11,4,5,4,10,12,8,4,4,4,11,6,11,10,9,10,12,4,4,9,7,9,8,10,4~11,4,4,8,4,6,4,10,9,7,10,9,7,12,10,13,4,4,4,11,9,12,13,4,11,4,13,11,12,4,11,12,4,9,8,4,12,5~10,12,7,13,7,13,5,13,11,7,8,12,10,13,10,12,8,12,11,9,7,5,13,6,9,8,12,11,8,6,11,12&paytable=0,0,0,0,0;0,0,0,0,0;0,0,0,0,0;0,0,0,0,0;250,100,50,0,0;140,80,40,0,0;120,60,30,0,0;100,50,25,0,0;80,40,20,0,0;50,25,10,0,0;40,20,10,0,0;30,20,10,0,0;25,10,5,0,0;20,10,5,0,0&reel_set15=8,1,12,10,13,7,13,9,10,12,8,12,8,13,7,10,13,12,4,11,13,4,4,4,13,10,8,5,8,6,12,11,12,6,4,11,9,13,12,11,12,7,13,10,9,6,5,7,11~12,9,1,10,11,13,4,11,5,8,5,13,10,12,11,8,9,13,11,13,8,4,4,4,6,11,9,6,12,4,7,13,10,12,13,4,10,5,10,7,9,6,10,9,12,8,6,7~12,13,10,8,13,5,12,11,8,4,5,13,11,10,12,7,13,4,4,4,13,8,13,11,4,12,9,7,6,11,1,8,6,12,10,12,7,10,7~13,5,8,13,8,4,13,9,4,6,10,13,5,11,7,12,10,13,9,4,4,4,11,9,12,10,12,1,13,7,10,5,12,11,8,7,10,6,4,6,11,9,12~7,11,12,7,6,4,13,11,12,7,5,11,5,4,4,4,6,10,13,11,8,13,8,10,1,9,12,10,9,12,8,4,13&reel_set16=11,7,13,7,8,7,11,13,10,12,13,7,1,9,13,8,10,5,6,8,11,13,10,12,7,9,5,8,11,6,12,6,10,12,13,8,12,9~7,11,7,12,11,9,11,7,3,12,8,13,9,7,9,7,10,7,10,12,10,13,12,13,9,10,6,11,6,9,13,6,11,10,11,10,13,8,11,13,8,5,1,9,8,13,6,5,11,5,10,11,10,12,13,11,12,1,6,8,6,9,10,13,5,12,9,13,12,13,10,7,10,13,8,5,12~11,8,7,1,10,7,6,13,12,9,13,12,8,11,10,7,11,13,8,5,13,12,9,12,13,10,12,8,13,6,9,12,8,10,12,10,5,11,12,11,5,12,6,12,13,7,11,9,7,10,12,13,6,10,3,7,8,13,1,13,7,11~8,5,6,1,13,11,12,3,12,7,10,5,12,7,9,13,9,13,11,8,12,9,8,6,10,13,5,11,10,7,9,12,13,11,7,6,10,6,13,10,11~11,9,8,10,11,10,5,1,12,8,13,6,11,7,8,9,8,10,11,9,12,7,8,12,11,13,7,12,13,6,1,13,12,7,12,13,12,13,6,7,10,13&reel_set17=10,4,4,7,4,11,4,9,4,4,13,4,10,4,4,10,4,4,4,11,4,4,12,4,13,11,4,11,4,4,12,4,4,10,12,4,4,12,4,9,4~4,4,11,4,11,4,13,4,12,4,10,4,7,12,4,10,4,4,4,11,4,4,10,4,4,12,10,4,4,9,4,4,13,4,4,9,13~11,4,4,9,4,4,11,4,13,4,12,4,4,4,12,4,10,4,4,10,12,4,11,4,13,4,9,4,4~4,4,9,4,4,13,4,10,4,4,10,4,4,4,12,10,4,13,4,4,11,4,4,12,4,11~4,4,4,10,4,9,12,4,4,11,4,4,13,4,13,4,9,4,13,4,11,10,4,4,4,12,4,11,12,4,4,4,7,12,4,4,4,10,4,4,10,11,4,10,4,4&reel_set21=8,11,12,10,12,13,11,7,10,9,6,13,10,13,5,12,8,13,9,12,11,5,12,7,6,7,8~5,12,6,7,8,12,13,9,8,10,13,6,7,11,9,12,10,5,9,11,13,6,11,8,11,13,10~13,4,7,4,4,11,4,4,10,4,10,4,4,13,4,4,4,9,4,4,11,12,4,12,4,4,9,4,4,12,11,4,4,10,4~4,10,4,4,4,10,11,12,11,10,4,11,4,13,10,4,4,4,13,4,4,4,13,11,4,4,4,9,10,4,4,12,4,4,12,4,12,4,4,9,4,4,4~4,11,4,12,4,4,10,4,4,10,4,4,12,4,12,10,4,11,4,13,4,4,4,12,4,4,9,4,11,4,4,13,4,4,13,4,7,4,4,11,10,4,9,10&reel_set22=10,5,9,5,8,9,10,9,8,10,9,8,4,4,4,5,10,9,10,5,9,10,5,4,8,10,4,10~13,6,11,12,7~9,8,5,10~11,12,11,7,11,7,6,12,4,4,4,11,4,12,4,11,6,7,12,4,6,12~7,13,11,13,11,6,9,10,12,7,9,8,10,12,13,10,5,12,6,11,10,12,5,8,13,9,11,7,12,5&reel_set0=11,4,13,4,13,9,5,8,4,4,7,12,4,7,11,7,13,11,13,8,4,4,4,9,12,9,13,10,8,13,4,12,11,1,13,6,4,11,4,4,5,10,12,13,11,4~12,4,5,13,8,12,5,13,10,8,6,13,4,12,4,8,7,10,12,9,13,8,1,4,13,10,11,9,5,7,4,10,13,11,5,4,11,12,7,13,9,13,10,9,11,13,11,12,5,4,8,4,12,5,13,11,13,11,10,12,4,13,12,13,4,4,10,7,4,4,12,4,9,5,4,7,8,9,11,4,12,4,4,11,13,4,4,4,6,7,11,13,10,4,9,13,8,11,9,13,7,4,4,13,10,4,12,4,7,13,11,4,4,10,7,13,10,4,4,9,10,8,13,1,4,13,12,7,8,12,8,13,11,7,4,11,10,13,11,9,13,5,12,7,13,10,12,4,11,13,9,13,4,13,4,12,3,13,11,10,12,5,11,13,5,4,4,3,11,9,11,10,13,4,9~4,5,9,12,8,12,5,10,4,4,8,4,5,9,12,11,9,4,9,5,13,9,7,13,4,6,13,12,10,4,7,11,7,12,8,11,8,4,1,12,11,4,10,7,4,10,4,4,11,7,4,4,4,11,9,7,13,10,5,6,4,8,3,9,12,13,11,6,4,9,1,12,13,11,12,4,13,8,3,7,4,12,4,12,11,8,4,9,5,7,11,8,5,11,10,7,11,13,7,6~7,10,9,8,11,12,7,12,4,7,8,10,5,11,4,4,4,1,5,11,6,11,4,4,13,8,13,9,12,6,5,4,3,13,6~6,4,12,4,5,9,7,11,12,10,9,4,5,7,5,11,13,4,13,4,4,4,12,13,6,10,11,1,13,11,5,4,12,7,9,10,12,7,11,4,4,10,9,5&reel_set23=9,8,10~13,6,11,12,7~9,8,5,10~6,11,12,7~10,8,13,11,13,7,9,5,13,6,11,7,9,12,8,12,9,12,10,5,6,12&reel_set24=13,6,11,12,7~5,10,9,4,10,9,8,10,9,5,4,8,4,4,4,10,8,9,10,5,10,9,4,9,5,9,5~9,8,5,10~7,12,6,11,12,4,11,4,4,4,7,12,6,7,4,11,12,11,6,11~8,10,12,6,8,10,12,11,5,11,12,5,9,12,6,10,12,5,13,7,13,7,11,12,9,8,11,6,7,10,13,9,11,9,13,10,7&reel_set2=9,10,13,12,7,4,9,7,5,12,10,9,8,9,7,12,8,6,9,8,6,12,5,13,4,11,1,4,4,5,10,6,11,12~7,5,12,10,12,7,13,12,8,1,9,5,4,9,4,12,5,12,9,7,10,5,6,12,9,5,12,6,12,13,10,11,12,7,8,11,4,3,7,8,9,12,4,5,13,7,4,12,10,8,9,4,7,12,4,10,11,12,9,6,8,9,11,7,9,4,6,13,8,1,9~5,8,12,7,12,10,12,11,5,3,9,10,12,13,5,4,9,8,7,9,10,9,10,6,7,12,9,7,12,9,8,11,9,10,9,7,13,12,6,4,8,5,9,7,13,6,9,7,11,12,4,6,5,4,11,12,7,1,6,12,4,1,4,11~12,4,6,9,12,5,8,10,4,6,5,6,13,1,9,13,8,9,10,9,10,4,12,7,12,11,7,8,9,11,12,7,12,3,8,7,5,9,4,10,8,1,10,5,13,11,5,9,12,8,7,4,6,8,10,7,9,4,12,11,12,13,11,10,6,9,7,4,7,12,9,10,8,11,9~4,4,8,9,11,9,12,7,9,12,4,6,13,6,7,9,5,11,12,10,13,1,10,8,11,7,12,5,8,9&reel_set1=9,8,10,11,6,5,11,8,9,6,5,12,11,6,8,10,8,12,10,6,10,6,9,7,5,6,10,13,7,8,10,5,13,6,9,11,10,5,7,11,10,11,13,11,7,9,1,11,6,10~11,6,1,6,8,10,11,5,13,6,13,8,6,8,13,11,6,8,9,13,6,13,11,12,7,5,12,10,8,5,10,6,9,10,11,10,7,8,10,12,11,8,12,11,9,7,6,7,11,5,6,11,9,12,11,10,9,7,11,10,7,9,11,6,9,10,11,10,5,11,9,7,12,10,11,8,10,11,8,11,6,9,11,13,5,7,8,6,10,1,10,5,10,8,3,6,5,11,3,10~10,8,6,11,12,11,5,11,10,9,5,9,13,11,10,11,7,11,8,9,12,11,9,10,9,1,8,5,8,10,6,9,6,10,11,13,6,7,10,7,10,3,6,10,6,7,6,11,13,5,7,11,1,13,8,7,8,10,9,7,5,8,11,6,10,11,12,5~5,9,10,8,7,5,7,11,7,6,11,8,5,12,5,12,7,9,10,9,1,10,5,11,7,13,9,6,11,10,13,10,11,3,13,12,8,9,10,6,8,6,10,7,6,8,10,13,8,10,12,11,6,1,7,10,7,11,13,11,10,12,11,9,10~6,13,10,8,10,8,9,13,11,9,5,12,11,7,10,1,6,11,5,12,11,9,7,10,6,8,12&reel_set4=9,8,10~13,6,11,12,7~9,8,5,10~6,11,12,7~10,8,13,11,13,7,9,5,13,6,11,7,9,12,8,12,9,12,10,5,6,12&reel_set3=10,5,9,5,8,9,10,9,8,10,9,8,4,4,4,5,10,9,10,5,9,10,5,4,8,10,4,10~13,6,11,12,7~9,8,5,10~11,12,11,7,11,7,6,12,4,4,4,11,4,12,4,11,6,7,12,4,6,12~7,13,11,13,11,6,9,10,12,7,9,8,10,12,13,10,5,12,6,11,10,12,5,8,13,9,11,7,12,5&reel_set20=4,4,9,4,12,4,4,10,13,4,4,7,4,4,4,11,10,4,4,6,10,4,4,11,4,13,4,12~12,9,12,7,6,5,11,10,13,9,8,9,8,6,8,13,11,6,13,7,9,10,12,10,12,11,7,10,11,13,12,10,13,12,6,13,11,9,8,13,10,5~11,4,4,10,4,4,10,4,12,4,12,4,9,4,4,11,4,4,12,4,4,11,4,4,4,13,4,7,9,4,10,4,4,11,4,13,4,13,4,4,12,4,4,10,4,4,10~4,4,11,4,4,9,4,11,4,13,12,4,4,4,11,4,10,13,9,4,12,13,4,4,10,4,4,4~10,4,4,4,13,12,4,13,11,4,4,9,10,4,4,11,9,4,4,4,11,12,4,4,4,7,11,4,4,4,10,13,12,4,10,12,4,10&reel_set6=13,6,11,12,7~9,8,10~9,8,5,10~6,11,12,7~12,11,7,6,5,7,11,10,6,9,13,12,9,8,7,10,12,5,13,9,11,8,5,11,13,12,9,13,10&reel_set5=13,6,11,12,7~5,10,9,4,10,9,8,10,9,5,4,8,4,4,4,10,8,9,10,5,10,9,4,9,5,9,5~9,8,5,10~7,12,6,11,12,4,11,4,4,4,7,12,6,7,4,11,12,11,6,11~8,10,12,6,8,10,12,11,5,11,12,5,9,12,6,10,12,5,13,7,13,7,11,12,9,8,11,6,7,10,13,9,11,9,13,10,7&reel_set8=7,12,11,6,12,11,6,13~9,8,5,10~9,8,10~6,11,12,7~11,13,5,9,12,10,9,11,7,6,11,9,5,12,10,8,13,6,10,12,7,10,11,12,6,12,13,9,10,7,12,5,8,7,11,13,8&reel_set7=6,11,7,13,11,12,6,12~9,8,5,10~4,10,9,4,9,10,9,10,8,10,9,8,10,8,9,4,4,4,10,8,5,8,9,5,4,10,9,10,5,10,5,9,5,10~11,12,6,4,12,7,6,12,4,4,4,11,12,11,12,4,11,7,11,6,11~9,12,10,7,11,12,5,9,8,6,5,11,13,7,12,8,10,13,5,7,9,12,13,10&reel_set9=10,4,12,13,5,4,10,4,11,10,4,4,4,9,4,12,4,4,6,11,4,13,11,12,4,9,4~11,6,10,11,8,6,9,13,12,5,13,9,11,8,10,9,13,12,5,10,12,6,5,9,13,12,9,11,13,7,11,13,12,13,5,12,6,10,12,10,13,9,10,11,6,10,7,8,13,10,7,13,9,7,8,9,11,8,6,11,10,7,12,7,11,6,10,8,3,7,13,5,11,13,12,8~11,13,6,11,10,7,12,13,7,12,10,5,13,3,11,9,12,8,12,6,8,10,9,7,5,7,6,7,12,7,11,10,12,13,11,8,12,9,13,11,7,8,13,10,12,7,8,13,8,11~12,7,8,7,12,3,11,9,12,13,6,8,6,10,7,8,12,9,13,9,11,10,13,10,13,11,5,10,9,5,6~10,8,11,5,9,7,11,13,7,13,8,12,13,5,13,6,10,12,13,9,7,12,11,8";
            }
        }
	
	
        protected override double MoreBetMultiple
        {
            get { return 1.25; }
        }
        protected override bool SupportMoreBet
        {
            get { return true; }
        }
	
        #endregion
        public DrillThatGoldGameLogic()
        {
            _gameID = GAMEID.DrillThatGold;
            GameName = "DrillThatGold";
        }
        protected override void setupDefaultResultParams(Dictionary<string, string> dicParams, double userBalance, int index, int counter, string initString)
        {
            base.setupDefaultResultParams(dicParams, userBalance, index, counter, initString);
	    	dicParams["reel_set"] = "0";
	        dicParams["st"] = "rect";
	        dicParams["sw"] = "5";
	        dicParams["bl"] = "0";
        }
        protected override void convertWinsByBet(Dictionary<string, string> dicParams, float currentBet)
        {
            base.convertWinsByBet(dicParams, currentBet);
            if (dicParams.ContainsKey("apwa"))
            {
                string[] strParts = dicParams["apwa"].Split(new string[] { "," }, StringSplitOptions.RemoveEmptyEntries);
                for (int i = 0; i < strParts.Length; i++)
                    strParts[i] = convertWinByBet(strParts[i], currentBet);
                dicParams["apwa"] = string.Join(",", strParts);
            }
        }
        protected override void readBetInfoFromMessage(GITMessage message, string strUserID)
        {
            try
            {
                BasePPSlotBetInfo betInfo = new BasePPSlotBetInfo();
                betInfo.BetPerLine = (float)message.Pop();
                betInfo.LineCount = (int)message.Pop();
		
                int bl = (int)message.Pop();
                if (bl == 0)
                    betInfo.MoreBet = false;
                else
                    betInfo.MoreBet = true;
				
                if (betInfo.BetPerLine <= 0.0f)
                {
                    _logger.Error("{0} betInfo.BetPerLine <= 0 in DrillThatGoldGameLogic::readBetInfoFromMessage {1}", strUserID, betInfo.BetPerLine);
                    return;
                }
		
                if (betInfo.LineCount != this.ClientReqLineCount)
                {
                    _logger.Error("{0} betInfo.LineCount is not matched {1}", strUserID, betInfo.LineCount);
                    return;
                }

                BasePPSlotBetInfo oldBetInfo = null;
                if (_dicUserBetInfos.TryGetValue(strUserID, out oldBetInfo))
                {
                    if (oldBetInfo.HasRemainResponse)
                        return;

                    oldBetInfo.BetPerLine   = betInfo.BetPerLine;
                    oldBetInfo.LineCount    = betInfo.LineCount;
                    oldBetInfo.MoreBet      = betInfo.MoreBet;
                    oldBetInfo.PurchaseFree = betInfo.PurchaseFree;
                }
                else
                {
                    _dicUserBetInfos.Add(strUserID, betInfo);
                }
            }
            catch (Exception ex)
            {
                _logger.Error("Exception has been occurred in DrillThatGoldGameLogic::readBetInfoFromMessage {0}", ex);
            }
        }
        protected override async Task onLoadSpinData(BsonDocument infoDocument)
        {
            try
            {
                _spinDataDefaultBet     = (double)infoDocument["defaultbet"];
                _normalMaxID            = (int)infoDocument["normalmaxid1"];
                _emptySpinCount         = (int)infoDocument["emptycount1"];
                _naturalSpinCount       = (int)infoDocument["normalselectcount1"];
                _normalMaxID2           = (int)infoDocument["normalmaxid2"];
                _emptySpinCount2        = (int)infoDocument["emptycount2"];
                _naturalSpinCount2      = (int)infoDocument["normalselectcount2"];
            }
            catch (Exception ex)
            {
                _logger.Error("Exception has been occured in loading spin data of game {0} {1}", GameName, ex);
            }
        }

        protected override async Task<BasePPSlotSpinData> selectEmptySpin(int websiteID, BasePPSlotBetInfo betInfo)
        {
            int id = Pcg.Default.Next(1, _emptySpinCount + 1);
            if (betInfo.MoreBet)
                id = Pcg.Default.Next(_anteStartID, _anteStartID + _emptySpinCount2);
            var spinDataDocument = await Context.System.ActorSelection("/user/spinDBReaders").Ask<BsonDocument>(new SelectSpinDataByIDRequest(GameName, id), TimeSpan.FromSeconds(10.0));
            return convertBsonToSpinData(spinDataDocument);
        }
        protected override async Task<OddAndIDData> selectRandomOddAndID(int websiteID, BasePPSlotBetInfo betInfo, bool isMoreBet)
        {
            double payoutRate = getPayoutRate(websiteID);
            double randomDouble = Pcg.Default.NextDouble(0.0, 100.0);
            int selectedID = 0;
            if (randomDouble >= payoutRate || payoutRate == 0.0)
            {
                if (!isMoreBet)
                    selectedID = Pcg.Default.Next(1, _emptySpinCount + 1);
                else
                    selectedID = Pcg.Default.Next(_anteStartID, _anteStartID + _emptySpinCount2);

            }
            else if (isMoreBet)
            {
                selectedID = Pcg.Default.Next(_anteStartID, _anteStartID + _naturalSpinCount2);
            }
            else
            {
                selectedID = Pcg.Default.Next(1, _naturalSpinCount + 1);
            }

            OddAndIDData selectedOddAndID = new OddAndIDData();
            selectedOddAndID.ID = selectedID;
            return selectedOddAndID;
        }
        protected virtual async Task<BasePPSlotSpinData> selectRangeSpinDataByBetType(int websiteID, double minOdd, double maxOdd, int betType, BasePPSlotBetInfo betInfo)
        {
            var spinDataDocument = await Context.System.ActorSelection("/user/spinDBReaders").Ask<BsonDocument>(
                    new SelectSpinTypeOddRangeRequestWithBetType(GameName, -1, minOdd, maxOdd, -1, betType), TimeSpan.FromSeconds(10.0));

            if (spinDataDocument == null)
                return null;

            return convertBsonToSpinData(spinDataDocument);
        }
        public override async Task<BasePPSlotSpinData> selectRandomStop(int websiteID, UserBonus userBonus, double baseBet, bool isChangedLineCount, BasePPSlotBetInfo betInfo)
        {
            if (userBonus != null && userBonus is UserRangeOddEventBonus)
            {
                UserRangeOddEventBonus rangeOddBonus = userBonus as UserRangeOddEventBonus;
                if (baseBet.LE(rangeOddBonus.MaxBet, _epsilion))
                {
                    int betType = betInfo.MoreBet ? 1 : 0;
                    BasePPSlotSpinData spinDataEvent = await selectRangeSpinDataByBetType(websiteID, rangeOddBonus.MinOdd, rangeOddBonus.MaxOdd, betType, betInfo);
                    if (spinDataEvent != null)
                    {
                        spinDataEvent.IsEvent = true;
                        return spinDataEvent;
                    }
                }
            }
            if (SupportMoreBet && betInfo.MoreBet)
                return await selectRandomStop(websiteID, betInfo, true);
            else
                return await selectRandomStop(websiteID, betInfo, false);
        }              
    }
}
