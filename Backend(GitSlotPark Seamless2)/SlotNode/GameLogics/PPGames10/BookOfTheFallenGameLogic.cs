using Akka.Actor;
using GITProtocol;
using Microsoft.Extensions.Logging;
using MongoDB.Bson;
using PCGSharp;
using SlotGamesNode.Database;
using System;
using System.Collections.Generic;
using System.ComponentModel.Design;
using System.IO;
using System.Linq;
using System.ServiceModel.Description;
using System.Text;
using System.Threading.Tasks;

namespace SlotGamesNode.GameLogics
{
    class BookOfTheFallenBetInfo : BasePPSlotBetInfo
    {
        public int PurchaseType { get; set; }
        public override void SerializeFrom(BinaryReader reader)
        {
            base.SerializeFrom(reader);
            this.PurchaseType = reader.ReadInt32();
        }
        public override void SerializeTo(BinaryWriter writer)
        {
            base.SerializeTo(writer);
            writer.Write(PurchaseType);
        }
    }

    class BookOfTheFallenGameLogic : BaseSelFreePPSlotGame
    {
        protected double[] _multiTotalFreeSpinWinRates;
        protected double[] _multiMinFreeSpinWinRates;
        #region 게임고유속성값
        protected override string SymbolName
        {
            get
            {
                return "vs10bookfallen";
            }
        }
        protected override bool SupportReplay
        {
            get
            {
                return true;
            }
        }
        protected override int ClientReqLineCount
        {
            get { return 10; }
        }
        protected override int ServerResLineCount
        {
            get { return 10; }
        }
        protected override int ROWS
        {
            get
            {
                return 3;
            }
        }
        protected override string InitDataString
        {
            get
            {
                return "wsc=1~bg~200,20,2,0,0~0,0,0,0,0&def_s=5,8,7,9,8,8,7,3,4,4,11,6,8,11,10&reel_set25=5,4,8,4,7,9,8,11,10,5,7,10,7,6,11,6,7,9,3,7,7,5,8,10,8,6,3,7,5,11,9,9,10,11,1,9,11,7,8,10,5,9,8,8,1,9,9,8~8,9,5,8,10,6,9,7,10,8,6,11,7,11,10,1,3,4,11~7,10,10,11,7,5,6,6,9,6,11,8,9,1,11,10,9,9,11,8,3,11,10,11,4,11,11,1,7,7,3,7,8,7,11,4,9,4,10,7,11,9,10,4,10,5,4,3,10,5,11,5,9,9,10,7,10,10,8,10,6,3,11,11,5,8,11,7,9,7,11,10,10,9,4,6,7,11,7,9,9,6,5,10,8,11,7,4,10,10,8,9,8,8,7,11,1,11,7,9,6,8,8,5,9,11~6,4,10,9,1,9,8,9,8,5,10,6,10,7,8,11,8,5,9,10,9,11,1,3,7,5,7,6,11,4,11,4,9,5,7,7,8,3~8,6,5,6,10,9,5,5,7,10,8,7,7,8,5,10,7,5,3,10,10,11,3,11,7,9,4,8,3,8,8,3,8,7,10,4,6,11,10,3,7,6,8,9,4,9,1,10,1,6,9,1,5,7,4,7,11,10,9,11,5,9,8,4,4,11,5,8,8,7,7,8,6,9,11,10,8,7,6,5,3,10,11,5,11,9,10,9,10,5,6,9,9,10,9&reel_set26=11,8,3,9,11,8,3,6,11,4,7,7,8,11,9,11,5,5,4,10,9,9,1,7,1,8,9,6,10,7,10,8,8,5,7,10,9,6,8,9,5,7,9~3,11,11,10,6,8,7,9,6,3,10,6,5,11,9,1,9,4,10,1,8,11,8,3,11,10,8,8,11,8,11,10,6,11,11,8,9,5,11,9,9,8,9,10,7,5,10,8,10,3,11,4,6,4,9,4,11,10,7,10,7,9,10,7,10,11,9,11,11,5,9,11,11,9,7,3,10,8,10,9,7,11,8,6,10,11,10,8,8,5,6,7,8,8,6,8,1,10,10,6,10,11,7,9,4,8~11,6,11,10,9,10,7,9,3,4,4,9,11,11,3,4,7,10,5,11,9,6,7,11,10,9,5,7,7,8,10,10,9,11,10,4,11,8,5,9,1,11,11,9,6,7,8,7,10,8,5,7,10,4,1,5,11,7,11,10,10,7,5,9,9,3,9,8,8,7,8,10,3,10,9,10,6,6,7,7,10,7,9,9,4,5,4,10,11,11,9,8,11,9,11,6,8,9,11,11,7,7,6,11,4,11,11,9,9,4,1,10,6,10,9,11,7,5~5,9,9,7,5,11,8,7,1,8,6,6,10,11,3,10,3,8,5,4,9,9,10,6,9,5,7,6,8,10,7,7,5,11,8,8,4,9,11,11,1,11,9,9,8,4,7,9~3,10,4,5,5,11,4,8,7,9,9,11,3,6,11,8,5,6,1,10,8,7,9,7&reel_set27=10,4,9,5,4,7,8,11,8,9,6,8,11,8,11,3,6,5,6,7,5,11,9,5,7,11,1,11,9,6,11,10,3,8,3,9,11,6,7,9,10,8,10,9,8,10,10,7,5,7,10,11,1,8,7,7,1,6,11,8,11,3,10,8,7,7,8,8,9,1,10,10,4,10,7,10,6,9,9,10,4,9,9,7,4,1,9,8,11,7,3,5,8,7,9,5,7,6,9,9,10,8,5,10,8,5,9,11,6,5,10,8,7,10,10,5,7~3,4,6,7,11,10,5,9,8,7,8,11,8,10,10,6,8,9,4,8,7,10,7,6,11,6,7,5,9,9,11,5,3,11,11,6,9,10,10,8,3,11,3,11,4,10,10,9,5,8,11,11,10,10,8,9,5,10,8,5,10,10,11,6,10,8,4,1,8,9,8,7,8,3,11,8,10,8,6,1,11,9,8,6,11,7,6,4,8,11,1,11,9,6,11,7,11,10,11,7,11,8,1,7,10,10~11,6,11,7,8,10,11,7,11,5,10,7,9,10,5,8,7,3,10,10,4,9,10,7,9,7,5,9,4,9,11,8,9,10,11,8,4,7,9,9,10,7,9,6,3,10,11,10,11,1,5,4,10,11,11,9,11,10,3,5,11,1,6,7,11,10,6,9,10,9,7,8,10,10,7,6,7,7,9,7,5,4,8,11,4,4,6~5,9,11,11,9,10,3,11,9,1,5,10,7,7,8,10,10,4,9,6,8,8,7,6,5,8,4~8,9,10,4,9,5,5,8,6,3,3,5,8,7,4,7,1,7,10,11,10,9,6,11,4,11,5,10,7,11,10,10,6,1,10,6,3,8,7,6,6,9,9,6,9&reel_set28=11,5,6,1,11,6,7,11,7,10,7,10,5,4,5,10,8,7,8,4,9,8,8,3,9,7,8,9,9,10,9,10,11~6,1,11,7,8,6,9,11,11,5,8,8,10,10,11,3,8,1,11,10,6,11,3,8,6,4,10,4,3,9,7,11,11,10,11,10,5,7,8,8,7,8,5,6,9,10,9,7,8,10,8,9,4,10,11~4,7,10,10,11,1,11,9,11,10,4,6,7,5,11,7,10,7,9,9,8,9,6,5,11,7,9,3,11,8,8,4,4,11,6,6,10,10,5,3,10,10,7,7,9,9,11~3,11,10,8,7,11,7,9,7,1,10,9,6,8,5,3,9,7,5,6,10,11,11,9,11,4,7,11,6,11,11,8,4,9,10,5,9,10,11,10,1,8,8,7,9,9,5,3,4,8,5,9,6,9,4,4,11,8,10,5,7,11,9,11,9,1,8,6,7,11,7,8,8,5~11,9,10,7,6,5,1,7,8,4,6,3,10,11,11,8,6,5,9,5,7,11,11,7,7,9,8,4,9,6,10,10,3,8&cfgs=4802&ver=2&def_sb=5,3,4,6,7&reel_set_size=29&def_sa=11,9,10,8,9&scatters=&gmb=0,0,0&rt=d&gameInfo={props:{max_rnd_sim:\"1\",ms_count:\"9\",max_rnd_hr:\"2291510\",max_rnd_win:\"5000\"}}&wl_i=tbm~5000&reel_set10=7,3,4,11,7,8,4,5,8,9,7,7,5,9,9,7,10,7,5,11,9,8,4,8,10,1,7,1,10,5,10,3,9,9,11,8,5,7,7,9,11,3,9,8,9,6,8,8,10,8,11,11,6,8,6,5~10,9,11,8,10,9,8,6,8,11,8,8,11,7,10,4,8,10,1,11,3,3,11,10,10,11,11,7,5,6,8,4,6,9,11,8,4,3,9,3,10,10,8,3,8,5,10,9,8,10,11,7,11,8,6,10,7,8,4,11,7,9,9,11,11,1,8,10,10,8,11,8,8,7,11,7,10,6,9,10,6,9,11,7,6,6,10,8,11,10~9,6,5,9,11,3,6,7,9,9,5,4,8,7,7,11,7,11,10,3,10,10,8,10,4,1,11~9,10,11,1,6,11,10,9,9,6,11,9,10,6,5,8,11,10,7,11,9,10,8,4,4,5,8,9,9,7,5,3,11,6,9,7,8,8,9,7,7,3,9,11,10,10,7,8,11,1,8,1,9,4,8,10,7,8,11,11,9,8,8,11,3,7,3,5,6,7,7,3,10,5,10,6,9,8,8,10,11,7,11,7,8,5,9,3,10,4,8,11,9,8,1,4,7,4,10,5,10,10,7,7,1,5,11,5,4,5~3,7,1,6,11,10,10,8,7,10,8,11,6,1,10,5,4,11,8,9,7,4,1,9,9,7,5,6,7,4,11,10,9,9,8,8,5,11,3,8,11,5,7,9,8,10,5,4,5,9,5,9,6,3,10,6,3,6,10,5,10,9,3,11,9,6,11,7,4,8,7,7&sc=20.00,40.00,60.00,80.00,100.00,200.00,300.00,400.00,500.00,750.00,1000.00,1500.00,2500.00,5000.00,7500.00,10000.00&defc=100.00&reel_set11=9,8,9,7,11,5,1,11,6,8,8,4,9,11,3,7,9,5,10,8,3,5,4,8,10,10,8,1,7,11,7,7,10,9,5,10,6,4,7~6,7,10,9,8,4,11,5,11,11,10,8,9,3,11,4,10,3,7,8,8,10,8,10,11,8,11,9,9,11,11,8,10,7,6,8,10,6,4,10,6,7,1~9,6,4,5,10,1,10,6,11,4,6,7,10,4,9,11,9,1,11,5,10,8,10,11,8,9,8,9,11,7,11,9,10,10,3,6,11,9,7,11,9,10,10,7,6,9,4,3,8,5,11,9,7,11,5,11,7,8,11,10,7,9,7,10,10,3,11,7,7,5,4,7~6,8,8,9,7,9,5,7,4,8,10,8,5,9,4,9,6,7,4,11,10,9,7,5,10,5,8,7,10,8,3,4,7,9,1,11,8,1,9,1,11,9,11,8,4,11,8,4,7,4,5,9,7,1,5,8,8,11,1,9,8,11,10,7,10,3,10,9,10,11,8,5,11,8,8,9,6,11,7,7,3,6,9,5,9,7,9,7,5,9,9,5,9,6,7,4,7,11,6,10,3,8,5,11,10,9,11~10,5,5,10,8,11,6,10,8,5,3,5,7,5,10,3,7,11,6,9,11,7,7,9,4,11,10,8,8,4,6,10,9,6,8,7,9,7,4,5,11,6,9,4,1,8,9,8,1,8,7,3&reel_set12=7,8,10,8,11,9,8,10,5,10,6,5,7,7,10,1,7,7,8,9,1,4,9,5,10,8,9,10,3,7,7,9,10,11,11,7,7,11,11,10,11,8,8,5,8,3,4,7,11,1,4,10,5,11,8,7,8,11,5,9,11,6,5,10,4,10,5,8,8,6,3,11,7,3,5,8,11,7,11,9,8,8,11,9,7,10,7,10,8,11,8,7,8,5,8,7,10,7,10,8,7,1,6,5,7,9,10,11,4,10,6,9,8,3,11,9,7~8,8,10,11,11,6,10,7,9,9,8,11,10,10,8,10,9,8,3,11,3,6,9,10,7,10,8,11,7,5,8,8,10,6,7,9,4,11,8,8,5,7,6,5,6,5,11,10,4,1,11,4,11,10,11~7,8,10,7,9,7,11,10,11,6,11,7,11,5,4,6,9,5,10,10,1,7,3,6,11,10,9,9,10,7,11,9,10,10,9,5,8,9,11,9,7,6,6,5,9,7,8,10,11,11,9,9,11,4,10,7,8,8,3,9,1,11,6,10,11,10,10,3,11,5,7,5,5,11,11,4,7,4,11,10,7,11,10,9,7,8~5,8,8,4,9,7,10,9,5,6,9,8,5,4,5,3,7,9,7,11,8,9,7,6,4,7,5,11,7,8,5,11,4,5,7,8,8,11,9,11,9,11,9,1,9,9,6,10,9,10,8,9,7,8,10,11,7,1,10,7,1,11,8,10,6,10,3~7,8,5,9,6,8,8,3,8,6,1,10,8,4,5,9,9,6,7,11,7,9,5,6,7,9,9,4,11,10,7,10,3,8,7,5,11,5,6,10,10,11,1,9,5,3,4,8,7,10,11,8,7,10&purInit_e=1,1&reel_set13=6,10,8,4,6,11,7,9,11,7,9,3,5,7,11,1,10,8,8~10,11,3,9,11,8,8,6,8,11,9,8,10,7,8,9,6,10,11,8,9,10,11,7,10,11,11,8,9,11,10,10,7,10,8,5,7,8,9,11,9,5,7,11,3,10,8,6,11,9,11,8,10,8,7,4,6,8,11,6,11,8,10,8,4,11,4,11,8,8,10,6,4,10,7,3,7,9,4,10,11,11,1,8,6~8,7,11,7,10,7,11,10,11,11,9,11,8,10,11,9,10,10,11,10,11,7,9,8,11,11,7,11,11,10,8,7,5,9,9,7,1,4,7,11,10,11,9,10,7,7,11,10,10,5,9,10,6,11,11,9,6,6,7,8,11,4,10,9,5,4,10,6,9,4,9,5,3,9,9,6,7,6,10,11,9,6,11,7,11,3,10,6,1,1,7,3,7,6,7,5,9,10,8,3,5,5,6,10,8,4,10,9,7,10~8,9,11,8,9,10,9,1,7,5,10,7,5,10,9,11,11,5,7,8,1,10,6,8,1,5,11,7,5,6,4,9,11,11,9,3,7,8,11,9,4,8,6,6,7,7,6,8,9,11,8,7,3,8,9,9,8,8,4,10,6,9,10,6,8,3,5,10,5,7,1,6,9,11,1,4,7,5,3,9,8,11,7,9,8,9,8,5,4,6,7,6,5,7,10,11,7,9,10,9,11,11,9,10~8,9,8,11,1,9,9,11,8,6,6,4,5,7,11,3,8,4,5,6,9,3,7,5,10,7,7,8,10,9,7,11,6,10,10,7,5,1,10,7,10&wilds=&bonuses=&fsbonus=&reel_set18=5,1,8,10,9,7,11,8,8,9,11,7,5,8,11,7,11,3,8,11,7,3,10,9,1,11,9,10,11,7,7,4,7,7,6,7,9,10,7,10,9,5,8,7,11,3,5,4,8,5,4,7,10,10,8,7,10,11,10,11,7,5,7,11,11,3,5,7,5,11,8,8,7,7,11,10,8,8,5,9,7,5,9,9,6,5,8,7,10,8,10,7,7,8,11,11,5,8,10,9,11,6,11,8,10,6,5,8,11,4,11,9,11,10,8,8,11,11,10,9,8,11,1,10~11,5,7,4,11,9,10,4,8,5,6,10,8,6,10,9,10,11,11,3,11,3,9,11,6,9,11,7,9,4,10,7,9,4,11,1,10,9,9,10,8,11,8,3,7,9,9,10,6,10,9,11,8,8,7,6,1~5,9,9,3,3,10,1,11,11,6,9,10,8,6,4,7,11,11,10,10,9,7,9,5,10,11,5,4,7,6,11,8,10,10,9,6,7,10,9,10,7,10,8,8,9,7,7,4,9,11,7,3,10,9,11,7,11,5,11,1~11,7,9,4,7,6,4,8,3,3,9,8,4,5,11,11,8,5,8,1,10,9,9,10,5,11,9,5,10,7,1,5,11,10,10,9,11,10,7,11,11,3,7,10,10,11,7,8,9,4,10,6,5,8,6,8,1,9,5,7,9,6,7,8,7,11,11,4,8~10,11,10,4,7,5,9,11,10,3,11,7,6,8,5,10,3,5,7,8,11,9,5,10,4,6,4,9,10,6,9,6,8,1,11,1,8,5,6,11,7,10,3,11,8,5,8,4,5,9,8,9,7,7,10,11,7,9,7&reel_set19=11,11,7,3,7,4,7,6,11,8,11,8,7,7,4,7,11,9,11,4,7,4,11,11,7,11,8,7,11,7,11,8,5,4,11,8,8,4,4,8,8,4,8,8,7,4,8,7,8,7,8,4,4,11,10,8,11,7~10,7,9,9,8,7,10,11,8,10,5,9,10,9,7,8,7,8,6,7,4,10,8,9,10,8,7,10,8,7,7,9,3,9,9,8,9,10,8,7,10~10,6,9,5,9,5,6,6,9,3,10,11,9,9,6,9,11,5,5,10,5,3,10,4,6,6,9,11,11,8,9,11,6,10,11,11,6,6,5,10,5,5,10,10,6,11,9,9,7,11,11,6,10,10,11,5,10,9,10,11,6,5,9~9,11,6,10,4,9,5,9,11,9,5,9,6,6,10,10,6,10,9,9,11,5,11,6,10,11,10,6,5,11,9,7,10,10,11,4,3,8,5,5,11~5,5,8,8,7,7,11,3,4,10,10,6,6,9&reel_set14=4,7,4,11,6,9,11,7,10,8,11,8,7,7,5,8,9,4,8,5,6,11,11,5,8,1,8,7,7,9,7,7,5,9,11,7,5,10,3,11,9,8,8,10,4,7,10,9,10,5,6,5,7,3,9,7,10,10,8,8,10,3,7,9,11,8,6,10,8,7,7,9,8,3,7,5,10,8,11,10,1,8,9,8,9,8,5,9,6,7~8,10,11,6,3,7,10,7,10,8,3,10,6,10,7,1,11,6,9,7,11,8,8,11,7,11,11,7,4,7,11,8,10,6,11,10,8,8,7,9,8,5,5,8,5,10,8,3,6,11,8,8,9,11,1,6,8,11,11,8,7,10,8,11,10,9,7,6,10,8,9,10,11,4,11,10,10,6,7,8,9,10,8,10,7,9,10,11,9,10,3,7,11,4,7,8,1,7,7,11,8,10,10,6,9,4,8,9,9,11,11,10,6,8~10,5,1,11,10,11,10,11,4,7,4,9,6,4,9,10,5,11,11,3,10,9,11,8,8,7,11,1,3,9,5,11,5,11,10,9,11,1,7,11,3,7,6,7,7,4,3,11,10,6,7,7,9,10,9,7,5,11,7,8,6,11,10,9,10,11,10,9,10,9,10,7,9,9,11,10,10,9,11,10,9,11,4,5,11,11,4,9,8,10,7,7,9,10,4,11,8,4,6,5,7,10,10,8,8,6,9,11,9,6,7,4~11,5,10,5,5,8,8,5,9,7,11,7,5,10,10,8,11,3,7,7,10,10,6,3,8,8,7,7,8,8,10,11,11,5,5,9,11,7,10,10,9,10,8,11,10,9,1,11,7,8,10,4,8,10,1,7,8,7,9,9,6,7,1,11,4,11,1,5,11,3,5,4,5,5,7,9,1,6,3,10,8,7,6,9,6,4,9,4,7,8,9,9,6,7,4,11,9,6,7,8,5,8,4,10,4,8,10,10,8,11,10,9,5,9,7,9,8,11,9,7,11,8,7~10,11,9,7,7,10,9,6,8,8,7,7,8,9,4,10,6,10,10,11,10,8,3,9,11,7,6,11,8,9,6,6,4,7,11,5,3,11,10,4,10,4,5,8,1,7,6,6,5,8,6,5,4,9,10,5,7,1,5,5,1,8,9,6,11,9,7,10,10,8,11,3,7,9,7,3,11,7,5,5,3,5,10,7,8,8,9,8,5,4,11,9&paytable=0,0,0,0,0;0,0,0,0,0;0,0,0,0,0;5000,1000,100,10,0;2000,400,40,5,0;750,100,30,5,0;750,100,30,5,0;150,40,5,0,0;150,40,5,0,0;100,25,5,0,0;100,25,5,0,0;100,25,5,0,0&reel_set15=9,11,7,5,1,3,7,7,8,10,9,5,9,7,10,8,11,9,8,10,8,4,6~8,11,5,10,7,11,1,10,11,6,8,9,8,9,7,10,8,10,8,4,4,8,3,9,7,11,11,6,3,10,6~5,5,7,8,11,11,7,3,10,10,9,1,8,4,7,11,11,6,9,5,4,11,11,10,3,9,3,4,10,9,9,1,10,11,7,6,10,11,6,9,8,7,9,7,3,9,6,10,11,11,9,10,7,4,7,10,7,5,11,8,8,10,8,8~5,5,8,8,7,7,1,11,11,3,4,6,10,10,9,9~6,9,9,8,11,3,7,10,5,4,7,9,11,4,4,7,5,10,7,3,4,10,8,9,9,7,9,9,11,8,5,6,10,6,11,10,8,6,7,5,9,11,8,3,1,8,10,6,7,6,1,6,8,11,5,11,10,5,8,9,5,11,7,7,11,4,5,9,10,7,3,8,1&reel_set16=6,9,9,7,9,6,9,7,10,8,7,4,10,11,6,5,4,4,7,3,10,7,8,8,7,1,5,11,8,9,9,8,3,7,7,10,5,11,9,11,7,11,8,5,3,9,7,7,8,8,9,8,5,9,9,11,10,7,8,9,5,9,11,10,9,7,11,8,11,9,8,3,1,7,5,9,6,5,8,10,10,4,8,9,7,7,8~9,11,8,7,6,8,1,11,4,10,9,11,9,10,7,10,4,8,8,11,6,9,11,7,11,5,6,7,10,6,11,7,10,9,11,8,8,7,1,11,8,9,8,11,9,9,10,10,11,6,9,9,10,9,10,9,11,10,11,4,4,10,9,11,6,3,11,9,5,10,4,10,11,8,9,9,5,9,10,9,9,7,10,10,11,3,6,11,11,3,10,3,10,7,10,7,4,10,4,9,3,10,6,10,9,1,11,6,7,8,10,11,10,11,8,6,4~11,9,7,9,10,7,9,10,11,7,6,1,4,5,3,4,11,5,9,11,11,7,7,10,11,10,10,6,11,8,6,10,9,4,7,9,7,11,10,7,9,6,6,9,10,5,8,6,8,10,10,4,9,8,7,7,3,5,11,10,5,7,10,11,10,9,4,3,9,4,11,9,5,11,11,7,9,9,5,10,10,7,3,8,11,6,9,8,9,9,11,11,10,3,10,7,1,4,11,11,9,9,7,11,11,7,10,1,8~1,7,7,6,11,5,8,11,6,7,10,5,11,10,4,9,7,8,5,8,9,8,6,9,9,11,1,9,5,7,10,10,7,5,10,7,9,9,8,1,4,10,3,5,11,11,10,9,8,11,8,11,4,7,7,3,6,3,10,9,4,9,8,8,11,10~5,11,4,9,11,9,11,7,5,3,3,6,5,5,11,4,7,7,5,3,8,7,9,11,10,7,6,11,11,5,8,10,3,11,8,11,6,9,10,5,7,4,10,1,6,10,11,7,9,8,9,11,7,7,8,1,5,11,11,6,7,8,7,10,4,5,9,10,8,9,9,10,9,6,8,6,7,4,8,5,8,9,9,8,6,10,6,8,10,4,5,9,3,7,1&reel_set17=11,5,9,11,8,3,1,5,10,7,10,5,7,10,8,8,9,7,10,10,7,8,4,10,7,7,8,6,11,3,7,8,3,7,10,11,8,10,11,10,5,8,7,11,7,8,10,7,9,9,8,7,1,6,7,9,5,9,6,5,11,5,10,11,8,9,10,8,10,11,4,4,11~11,7,6,4,9,10,8,8,11,7,10,9,11,3,7,10,9,6,4,10,1,4,9,11,6,8,9,3,10,9,11,9,8,5,11,10,10~9,7,10,7,11,8,7,9,11,10,9,9,7,10,7,10,7,11,11,9,11,11,4,7,5,8,4,9,11,5,3,10,4,11,10,3,6,10,9,10,10,7,10,5,8,5,10,11,11,6,4,6,11,3,3,1,6,7,4,11,7,9,10,11,9,9,8,10,9,9,7,8,9,5,7,1,9,6,10~11,10,11,8,9,8,11,10,8,7,11,7,6,7,1,5,8,1,9,4,3,8,7,7,9,9,8,6,10,9,10,10,4,11,5,10,6,8,10,9,10,5,1,8,8,11,5,5,7,11,4,3,9,3,7,5,11,10,6,9,7,9,10,4,7,11~1,11,8,8,1,10,5,8,7,9,6,4,8,10,9,7,8,11,5,11,8,11,11,4,9,9,6,8,9,10,5,9,4,5,10,7,6,10,8,11,10,5,3,6,10,10,4,4,7,11,6,11,7,9,7,8,7,6,7,3,5,5,7,1,10,3,7,8,6,5,8,3&total_bet_max=10,000,000.00&reel_set21=5,9,8,8,11,8,10,5,9,11,11,10,3,8,7,11,11,9,7,6,10,8,7,8,9,10,11,7,7,4,3,7,5,8,3,9,5,8,5,8,1,7,5,9,10,6,1,9,7,10,9,10,11,7,4,7,6,4,8,4,9,5,6,9,9,10~11,11,4,10,9,1,9,11,7,9,11,11,10,9,9,11,6,10,10,7,10,4,10,10,8,9,11,8,8,10,8,8,6,8,5,11,11,10,8,10,6,10,11,1,11,6,9,7,7,1,11,6,6,8,11,11,8,8,7,8,6,4,6,8,1,4,9,4,7,10,10,8,8,11,9,3,3,6,5,11,10,10,7,5,7,8,4,11,3,8,3,8,7,11,4,10,6,10,11,10,11,7,3,8,10,9~9,6,7,11,11,9,6,7,9,5,11,5,7,10,6,8,11,4,3,10,7,9,3,10,4,10,4,10,7,11,11,8,10,8,5,9,1,11,7,10,11,9~9,11,7,7,4,3,8,8,11,7,5,11,9,5,8,5,9,9,8,8,6,7,10,8,9,3,8,9,9,7,8,10,8,6,4,5,9,9,4,9,11,9,7,11,11,10,3,7,11,5,11,3,10,7,10,9,7,4,5,9,11,1,1,7,8,10,11,7,8,4,5,8,1,9,8,9,7,9,5,1,10,5,6,9,10,4,7,6,11,4,11,10,9,11,8~11,8,5,1,3,10,8,9,11,7,8,11,7,4,8,6,10,11,4,9,6,7,3,5,7,6,11,7,5,9,10&reel_set22=8,9,11,5,5,10,8,7,9,8,9,7,8,10,10,11,8,11,7,6,5,7,7,4,3,9,1,9~11,7,8,6,8,10,5,10,8,10,10,11,11,9,11,5,8,10,8,1,7,8,4,9,10,11,8,4,4,9,3,5,10,3,10,10,8,7,6,10,8,11,11,1,5,8,9,5,11,7,7,9,9,6,11,7,11,8,6,10,11,3,11,5,10,11,6,8~7,11,4,10,6,9,6,11,9,5,11,9,6,4,11,11,10,9,10,11,7,10,10,1,11,4,3,4,10,11,7,10,8,11,9,11,9,10,8,3,7,9,9,7,10,4,10,10,11,1,3,9,7,11,7,5,7,6,4,11,10,6,11,1,10,11,10,11,6,6,9,7,10,5,5,3,11,11,7,7,5,9,10,11,9,7,9,11,5,6,3,8,11,8,11,8,7,10,10,4,7,9,5,7,10,9,5,4,7,11,5,5,11,8,5,8,9,3,9,9,7,11,4,10,10,8,7~8,9,1,10,10,1,5,7,9,9,7,3,8,11,5,9,11,11,9,10,8,4,6,8,6,11,4,3,7,5,7~5,10,6,9,9,8,6,10,4,11,3,6,4,11,5,7,9,7,1,7,11,7,11,3,5,8,8,10,6,9,8&reel_set0=9,8,11,5,8,8,10,7,8,9,6,7,5,5,7,8,11,5,1,1,9,5,9,11,7,10,7,9,8,1,6,11,3,8,10,9,10,8,9,10,7,4,8,7,8,7,7,8,7,7,9,5,11,10,9,7,10,7,11,8,9,8,9,5,8,11,9,8,9,11,4,9,10,5,6,3,6,8,8,10,3,4,7,7,9,11,4,5,9,7,3~6,10,8,6,10,3,7,8,4,6,9,11,5,7,10,8,10,9,11,8,8,6,11,10,11,8,1,7,11,11,9,11,8,9,11,6,6,8,7,7,10,11,8,8,9,11,4,9,10,8,3,8,11,10,10,4,7,8,10,11,10,10,8,3,8,10,4,5,10,8,11,7,9,6,11,6,10,10,7,8,11,11,9~7,7,5,7,1,11,10,11,7,9,11,7,4,10,7,6,7,10,5,11,7,11,6,10,11,11,5,9,4,10,9,8,9,10,6,4,8,3,7,9,8,9,10,5,7,3,4,11,8,10,1,9,9,6,11,11,4,10,8,3,10,10,7,11,9,11,11,9,10,5,6,9~1,8,9,8,5,7,6,9,10,9,7,8,10,9,9,11,11,7,9,11,8,5,7,9,11,11,7,1,9,5,8,5,4,5,7,9,11,11,7,1,9,7,5,9,8,11,5,4,6,7,5,10,6,9,9,7,10,10,3,9,5,11,8,5,11,5,11,4,4,7,9,8,10,7,8,5,3,10,6,10,10,1,9,8,9,9,7,4,8,8,9,11,3,1,6,7,11,4,4,7,8,8,10,8,3,9,7,8,6,8,11~9,8,7,5,8,10,11,7,10,9,5,5,11,6,8,3,10,11,4,11,9,4,9,7,9,6,7,11,10,10,5,10,10,7,10,5,4,9,7,9,8,11,4,1,7,9,6,5,6,9,9,6,8,4,5,11,11,10,3,7,1,8,8,4,9,10,6,6,5,3,6,7,11,9,9,5,10,6,7,7,8,3,5,4,5,6,11,1,7,7,8,11,9,3,7,6,7,9,11,9,8,10,8,8,11,5,1,8,8,5,10,3,7&reel_set23=10,5,5,9,11,1,9,4,7,7,8,4,5,1,3,8,6,10,10,8,6,9,11,3,7,9,11,7,8,6,7,8,11,9~6,8,5,10,9,10,9,3,11,10,1,11,7,11,8,7,11,8,10,5,4,8,6,7,10,9,8,11~7,10,3,8,10,1,7,8,11,6,7,10,5,10,10,9,11,10,9,9,11,6,7,5,7,6,11,11,4,11,5,9,8,4,7,11,3,6,10,11,4,9,9~8,9,4,5,9,9,5,11,6,3,5,7,5,6,11,6,10,10,7,11,8,11,10,6,9,9,8,7,9,8,4,10,7,8,11,8,4,5,5,11,4,1,8,5,9,3,10,4,7,8,9,9,11,1,8,8,7,1,3,10,6,3,11,11,8,5,4,9,6,7,9,7,10,6,9,10,7,11,9,9,1,8,7,7,9,6,8,11~6,10,5,11,10,1,7,11,7,4,11,7,4,5,9,9,7,9,8,6,7,11,4,9,11,10,10,11,9,7,7,8,10,3,6,10,8,5,8,9,5,1,6,10,6,5,8,10,7,9,3,11,4,9,8,8,9,10,7,6,8,3,11,5,3&reel_set24=7,5,11,8,8,1,11,3,7,10,8,7,5,8,9,9,5,9,7,10,7,9,5,7,7,8,5,10,6,11,1,10,1,8,6,9,7,10,10,6,4,11,11,7,9,7,7,6,3,4,1,9,11,4,9,6,6,9,8,4,10,8,8,10,8,3,8,7,9,8,7,9,5,7,9,10,5,3,10,5,11,7,6,10,10,11,11,8,8~1,10,7,10,7,9,10,10,11,5,5,8,7,6,11,8,9,11,4,8,3,6,4,8,11~5,7,6,7,11,10,11,11,7,9,4,3,11,7,7,9,4,10,10,6,10,11,7,10,11,11,9,7,3,9,10,11,6,10,7,8,9,7,7,11,10,11,8,5,6,4,9,11,1,8,10,7,9,9,7,9,11,5,4,10,9,8,3,5,6,10,11,10,7,8,3,8,10,11,10,9,11,11,7,4,11,9,4,5,1,5,4,11,8,1,6,7,9,7,6,11,11,10,9,11,10,9,7,11,10,5~6,11,9,9,11,10,7,7,10,9,7,9,3,5,11,11,4,11,9,8,6,9,6,7,8,11,3,7,5,7,4,8,11,7,5,9,11,4,8,8,9,5,6,11,7,5,1,3,10,11,10,9,7,10,5,8,10,8,6,4,5,10,6,8,8,1,9,8,10,9,8,5,4,7,5,7,10,8,9,7,9,8,9,4,6,7,11,10,3,8,9,1,10,7,11~10,7,1,3,8,9,7,9,6,3,11,9,7,10,7,4,10,11,11,4,10,8,6,8,5,5,6&reel_set2=5,9,10,11,7,8,11,7,8,1,9,4,6,9,8,3,10,8,9,5,7~10,1,9,11,3,7,11,8,6,9,6,10,7,11,11,8,5,8,4,10~10,6,6,11,11,7,3,11,10,7,4,7,11,9,3,9,1,7,11,7,9,10,11,5,5,11,8,10,11,5,9,9,4,7,8,4,7,11,10,9,10,9,4,8,6,10,6,10,11~4,9,8,1,9,7,11,8,1,8,8,10,6,7,3,11,10,10,6,9,10,5,4,10,9,9,11,9,9,7,8,7,7,5,8,5,6,7,5,9,3,4,11,5,11,8,11,9~1,8,6,8,11,7,5,9,8,7,11,6,3,1,6,11,10,8,10,6,3,6,3,1,8,7,11,6,6,5,8,6,3,9,5,8,4,8,3,7,6,10,11,7,8,5,4,11,10,8,10,10,11,9,5,11,10,11,7,8,4,11,1,10,7,6,5,5,8,4,10,9,8,7,11,9,11,4,10,11,9,5,4,7,5,7,6,11,9,8,10,8,9,4,7,9,7,7,8,5,7,11,7,3,4,9&reel_set1=9,8,11,3,10,9,5,7,9,3,9,7,7,8,3,10,9,8,10,8,8,10,8,9,1,5,7,8,8,7,1,10,9,4,7,8,5,9,9,10,6,4,9,7,10,11,10,7,6,11,7,8,5,8,6,6,11,9,5,7,4,11,7,9,5,7,11,7,3,5,7,11,8,5,9,11,1,4,8,8,6,5,10,9,11~11,10,8,4,6,3,3,8,8,11,8,9,11,4,8,6,8,6,5,3,8,8,10,10,6,9,6,8,11,1,11,10,11,10,8,8,11,10,10,1,10,1,5,10,10,9,6,7,10,10,11,4,10,7,8,8,10,11,11,8,11,6,11,9,4,8,8,11,5,11,8,7,9,10,8,6,11,6,11,3,10,11,8,1,7,4,11,9,7,9,3,10,11,10,7,11,9,7,9,8,11,11,6,11,10,8,10,7,9,7,7,11,9,8,9,8,6,10,10,11,6,10~10,5,10,9,4,8,8,7,11,7,10,6,9,10,7,10,11,3,6,11,11,10,10,5,6,9,4,5,10,7,9,7,11,3,11,10,11,7,6,9,4,10,6,11,9,11,7,10,1,8,11,7,11,6,3,5,11,11,9,8,8,9,4,10,10,8,5,5,3,11,7,11,11,7,7,6,8,7,4,10,4,4,9,4,9,9,7,1,9,11,5,1,10,11,9,7,9,3,6,10,11,9,11,7,11,10~5,8,11,8,6,11,10,5,1,10,7,8,9,10,3,9,5,8,3,7,1,9,9,8,7,9,9,1,8,11,9,7,6,11,9,8,9,8,10,10,9,11,8,7,5,11,7,7,6,3,7,4,11,9,11,3,10,7,8,8,4,7,9,9,7,8,9,4,11,8,4,11,5,5,11,11,10,11,8,9,7,4,10,5,7,4,5,11,8,1,3,1,10,9,5,6,9,6,8,10,9,9,7,9,8,11,5,6,5,4,7,10,9,11,7~8,10,9,7,10,9,3,8,5,6,7,11,11,3,5,11,7,11,6,8,10,8,5,9,7,1,11,5,8,1,9,7,5,9,8,6,11,10,8,11,7,11,1,8,6,9,9,5,8,7,9,5,11,11,6,6,3,9,9,10,8,11,1,9,9,7,9,10,11,3,7,5,11,6,9,10,8,11,6,4,7,5,4,4,10,11,3,8,7,8,4,8,10,5,9,6,9,6,10,4,10,7,4,9,11,7,11,7,7,4,7,5,4,6,7&reel_set4=11,8,5,7,10,11,5,7,8,10,9,9,8,4,11,11,8,10,10,6,11,7,9,11,8,7,5,8,6,7,9,3,9,8,1,8,9,7,8,10,5,7,1,11,4,7,7,9,8,11,6,9,4,9,8,9,9,7,8,6,5,10,1,10,8,8,7,9,9,7,8,7,5,7,6,10,10,7,9,5,5,6,11,7,5,10,9,9,3,10,6,9,5,8,7,8,4,11,4,3,8,6,11,9,3,8,7,8,9,5,11,1,9,7,7,6,3~8,8,5,7,1,11,11,3,4,10,10,6,9~1,9,7,7,10,10,9,11,9,10,11,9,8,11,10,9,8,4,10,9,8,10,11,6,7,4,11,7,4,6,11,9,4,11,11,5,10,1,11,4,9,5,9,3,6,11,11,7,10,10,3,4,9,6,6,11,10,7,10,6,9,11,5,7,3,5,3,10,11,9,8,8,7,5,11,7,11,3,6,5,5,6,9,7,8,11,10,4,1,10,7,7,11,10,7,7,10,4,7,9,11,11,10,9,8~9,6,9,7,4,8,9,7,9,11,9,10,10,5,8,4,8,5,1,7,9,8,3,11,7,11,6,8,7,7,5,11,5,9,5,3,6,8,9,9,7,9,8,4,10,5,9,4,4,6,10,1,5,8,11,11,7,8,6,5,6,3,7,9,7,11,6,8,10,7,5,11,10,1,11,9,8,9,4,11,9,10,3,8,1,8,10,11,9~3,9,4,8,6,7,9,1,11,7,6,5,5,7,11,11,7,8,7,8,7,1,9,10,10,8,4,8,4,11,9,9,8,10,5,8,7,11,9,8,6,11,9,3,9,10,7,4,5,6,11,10,9,8,3,3,10,8,7,4,4,11,5,6,5,6,5,10,10,6,9,6,11,11,10,7,5,3,8,3,10,5,7,9,8,1,11,11,8,4,1,10,11,9,10,3,7,6,5,10,9,6,7,9,11,7&purInit=[{type:\"d\",bet:100},{type:\"fs\",bet:1000,fs_count:10}]&reel_set3=4,3,9,10,7,10,8,10,1,11,4,4,7,9,6,3,7,7,10,8,7,5,9,11,9,7,6,5,7,5,7,8,7,10,11,9,7,5,9,5,9,11,11,8,8,3,7,5,9,9,4,8,9,9,6,10,6,7,5,8,8,9,5,7,9,3,8,8,9,11,8,10,10,7,10,9,8,7,8,8,11,1,8,1,11,11,5~11,5,8,9,9,11,6,5,10,10,1,3,8,1,8,10,11,9,7,8,10,6,11,8,11,10,9,4,10,8,7,6,8,7,11,11,4,3,10,11~3,11,11,5,9,6,11,5,9,10,8,8,7,10,9,7,1,9,10,11,11,10,7,6,4,4,7~6,5,9,10,10,6,5,7,3,8,10,1,7,11,9,6,3,10,7,10,6,9,11,7,9,7,8,11,4,1,9,9,5,8,9,7,8,10,3,6,7,11,11,4,5,4,9,5,11,1,8,11,8,9,5,4,8,8,5,9,9,8,8,10,11,4,8,3,7,7,1,10,11,8,10,11,9,11,9,7,8,8,9,5,7,5,7,11,9,9,7,11,4,9~6,5,8,9,7,9,5,6,1,7,9,11,8,9,4,5,10,11,1,9,4,10,3,10,9,10,5,9,7,6,11,5,6,8,11,6,5,7,11,11,6,4,11,8,10,7,6,4,10,11,8,6,8,7,7,9,9,4,11,3,7,11,1,6,8,8,5,7,9,6,3,8,7,9,8,5,10,10,11,10,3,7&reel_set20=8,7,6,8,7,6,1,6,9,9,8,9,11,5,10,9,3,5,8,4,11,9,3,8,10,7,11,11,10,7,8,8,4,11,10,7,10,7,3,7,5,1,9,9~8,10,8,11,11,10,7,7,1,9,8,11,10,11,11,4,6,10,1,11,9,8,6,4,8,10,8,7,10,9,5,7,10,7,10,3,9,10,8,6,8,8,10,10,1,6,4,11,11,3,7,6,5,11,10,3,11,8,10,10,11,9,11,8,6,7,5,11,11,9,8,9,11,6,4,8,8,9,8,11,10,11,3,6~10,11,11,9,4,7,3,1,5,7,10,6,3,8,9,4,6,9,8,11,11,10,10,7,5~1,3,8,7,11,7,3,9,9,7,8,5,4,10,9,9,1,3,5,7,10,8,9,11,11,7,5,11,9,8,9,1,9,11,7,6,7,7,8,11,7,10,8,9,8,10,5,10,8,8,9,5,3,3,5,1,11,10,5,7,10,9,10,7,10,4,11,7,5,8,8,1,9,9,4,8,8,4,11,8,6,3,9,4,8,11,6,1,8,11,10,6,9,9,11,4,7,11,6,4,11,9,9,6,11,7,4,7,7,9,9,10,9,8,11,8,9~4,8,6,8,10,7,9,5,7,10,1,10,10,8,7,11,4,11,8,7,10,4,11,7,8,7,6,3,9,11,9,7,11,9,10,9,1,6,11,10,3,11,5,5,8,6,9,5,3,7,4,6,6,9,7,11,9,11,9&reel_set6=10,7,8,11,9,11,9,10,6,7,11,5,7,7,9,5,9,7,3,9,1,9,8,4,11,8,7,10,11,7,6,5,4,3,5,8,1,8,6,10,7,8,9,10,8~1,11,4,10,9,6,11,3,11,5,4,8,5,10,11,7,10,7,6,8,10,8,8,9~3,7,11,4,9,10,6,11,6,7,9,3,5,6,10,11,8,10,9,9,7,11,5,8,11,10,11,4,5,9,11,7,5,10,7,11,10,11,7,4,1,1,9,9,10,10,11,11,4,8,9,8,7,10,6,7~8,1,7,9,4,9,9,7,10,6,7,7,6,10,10,8,8,9,9,5,6,9,11,9,11,5,6,9,10,4,9,3,9,5,11,4,11,10,8,10,3,7,11,9,5,11,8,7,5,1,5,11,7,3,11,4,8,9,7,10,11,8,7,8,4,5,8,8,10,6,1,7,11,9,11,8,7,6,1,4,9,6,3,8,5,9,8~11,8,7,3,11,10,6,10,8,7,7,6,8,11,4,1,7,10,9,7,4,5,1,3,7,5,6,9,11,3,5,5,8,10,8,9,5,11,8,4,10,4,5,9,10,6,9,11,8,7,10,3,10,6,9&reel_set5=5,8,10,9,7,7,11,9,11,5,9,7,8,5,11,9,3,7,3,10,7,6,10,9,11,7,10,8,9,6,8,4,9,8,7,7,5,1,8,6,6,1,9,8,10,11,4~8,11,6,10,4,8,9,9,5,7,7,11,11,8,8,6,1,7,6,11,9,7,1,8,8,11,7,7,8,8,11,11,10,3,10,11,10,10,6,11,11,10,11,3,4,8,10,10,11,5,6,6,5,6,7,3,1,10,9,11,8,10,10,8,9,10,5,9,9,10,8,4~11,3,9,7,4,10,9,6,10,11,6,10,10,11,7,10,7,11,8,10,9,5,11,1,7,5,3,11,5,8,4,11,9,4,7,9,8,6,11,10,9,7~5,7,1,3,8,9,4,9,1,8,5,3,7,6,6,11,9,10,8,11,11,9,6,8,8,11,7,4,7,9,8,4,9,8,5,11,5,9,7,7,6,5,10,10,9,10,11~7,7,4,9,7,11,9,10,6,11,5,6,3,5,10,5,3,5,9,6,11,3,8,11,10,8,7,6,10,8,9,8,4,3,9,10,11,4,9,7,9,5,7,5,11,11,4,10,11,10,8,1,8,3,4,8,3,7,10,4,11,6,6,8,7,7,1,9,7,11,1,9,8,8,10,10,7,7,9,6,8,9,10,5,5,9,11,6,11&reel_set8=3,4,10,10,9,6,6,8,9,9,8,10,5,6,8,7,9,9,10,10,8,6,10,1,8,11,7,5,5,8,7,3,7,9,11,7,5,11,9,5,10,7,11,7,7,8,4,5,9,7,9,10,9,9,1,6,8,11,5,6,8,7,8,9,7,11,10,3,9,10,8,1,1,4,4,11,3~8,11,10,3,5,4,5,8,10,7,11,9,11,11,6,8,1,9,10,6,11,8,7,6,11,10,3,10,11,6,4,6,8,10,10,11,10,9,5,8,8,7,8,8,10,9,7,8,4,1,11,8,10,11,9,10,1,6,6,7,10,8,9,10,5,11,11,10,6,9,11,5,11,4,11,10,7,7,9,8,7,3,3,8,8,11,11~7,11,1,10,9,10,7,4,3,5,10,8,11,11,10,8,5,9,7,6,9,11,4,7,6,9~5,10,11,9,7,11,11,10,7,8,9,8,7,10,4,7,8,9,5,10,3,9,9,8,5,8,8,1,6,6,8,6,5,6,4,9,10,8,9,3,5,7,6,9,9,11,9,8,10,11,10,11,8,9,7,5,7,9,4,7,10,3,1,1,11,11,4~8,3,10,11,3,6,1,11,7,9,9,6,10,9,5,5,6,11,8,7,4,5,5,11,7,4,3,8,8,10,11,6,8,5,4,1,7,10,9,10,6,9,9,7,10,6,6&reel_set7=9,3,8,8,9,10,8,9,6,5,7,8,11,1,9,9,10,5,5,9,8,7,8,9,5,4,1,10,3,7,7,11,7,8,5,8,11,6,5,10,8,4,5,11,1,7,9,10,7,7,10,11,6,9,9,4,10,11,8,9,4,9,10,6,7,11,3,6,11,11,6,7,7,8,8,11,7,6,5,5,8,10,3,7,7,9,10,8,10,7,1,9,9,7~8,3,11,11,6,6,11,4,9,8,10,5,11,10,8,10,8,10,8,9,8,7,11,9,1,4,10,7,4,7,8,11,6,5,9,7,3,10,7,4,8,6,11,5,11,8,7,10,11,3,9,4,11,8,10,9,5,4,11,10,11,8,6,3,3,11,10,8,9,7,6,6,8,11,11,10,8,10,6,11,3,8,7,9,11,8,11,10,9,8,11,9,9,10,8,5,8,4,10,8,6,1,7,8,11,10,10,11,10,10,9,5,10,6,11,3,7,11,10,10,11,6,7,11,5,9,1~6,11,8,11,11,10,6,10,3,6,7,9,7,11,4,1,7,4,7,8,7,9,8,11,11,5,6,9,9,5,7,8,10,4,7,11,7,11,9,8,11,10,9,11,10,7,5,4,7,11,11,8,7,3,5,9,11,4,11,9,7,10,10,11,9,11,9,3,6,9,7,11,9,11,4,7,10,10,3,1,10,8,5,4,1,6,10,9,6,7,10,11,10,11,10,10,8,5,7,10,9,11,9,5,4,10,10,9~4,7,1,9,8,8,6,4,8,9,7,7,10,10,11,11,5,8,10,9,4,11,5,6,4,9,7,11,11,9,5,10,5,1,11,7,4,8,7,3,8,8,11,3,11,9,8,7,9,9,6,8,9,11,3,8,6,1,9,5,6,9,5,9,10,7,10,7,5~9,1,11,5,5,11,11,5,4,7,1,10,11,7,10,6,7,6,9,3,8,9,11,8,4,9,7,11,8,7,6,10,5,11,9,3,3,7,5,10,11,11,7,10,8,6,1,11,10,4,5,10,8,6,8,7,9,9,7,4,9,9,5,9,5,10,11,1,7,7,10,9,8,6,9,8,7,8,5,8,3,4,8,5,6,3,10,11,7,4,6,3,7,10,5,8,9,9,5,8,6,11,3,7,4,9,9,11,8&reel_set9=9,1,7,6,10,7,3,7,4,7,8,8,7,11,1,5,10,10,9,11,4,9,4,7,8,5,7,3,6,7,9,8,5,11,11,3,7,6,9,8,8,5,1,9,7,10,9,11,10,10,6,6,9,8,8,9,11,8,5,5,10,9,8,11~5,10,9,5,9,6,11,6,8,8,10,7,6,8,8,10,7,11,10,9,1,3,8,11,4,11,11,7,10~4,6,3,11,9,7,9,8,1,11,10,11,10,4,5,9,11,7,10,11,10,9,7,5,6,11,7,8,4,10,6,9,7,3~7,11,3,4,5,1,6,11,9,7,11,5,7,8,10,8,10,9,8,4,6,9~7,7,3,5,5,7,10,7,8,11,4,6,4,11,9,8,5,8,9,6,11,1,9,6,10,9,10,3,8,10,11&total_bet_min=20.00";
            }
        }
	
        protected override double PurchaseFreeMultiple
        {
            get { return 10; }
        }
        protected override bool SupportPurchaseFree
        {
            get { return true; }
        }
        protected override bool HasPurEnableOption
        {
            get { return true; }
        }
        protected override int FreeSpinTypeCount
        {
            get
            {
                return 9;
            }
        }
        protected int FreePurCount
        {
            get { return 10; }
        }
        #endregion
        public BookOfTheFallenGameLogic()
        {
            _gameID = GAMEID.BookOfTheFallen;
            GameName = "BookOfTheFallen";
        }
        protected override int[] PossibleFreeSpinTypes(int freeSpinGroup)
        {
            return new int[] { 200, 201, 202, 203, 204, 205, 206, 207, 208 };
        }
        public double[] PurchaseMultiples
        {
            get { return new double[] { 100, 10, 10, 10, 10, 10, 10, 10, 10, 10 }; }
        }
        protected override double getPurchaseMultiple(BasePPSlotBetInfo betInfo)
        {
            BookOfTheFallenBetInfo bookBetInfo = betInfo as BookOfTheFallenBetInfo;
            if (bookBetInfo.PurchaseType == 0)
                return 100.0;
            else
                return 10.0;
        }
        protected override async Task onLoadSpinData(BsonDocument infoDocument)
        {
            try
            {
                _spinDataDefaultBet = (double)  infoDocument["defaultbet"];
                _normalMaxID        = (int)     infoDocument["normalmaxid"];
                _emptySpinCount     = (int)     infoDocument["emptycount"];
                _naturalSpinCount   = (int)     infoDocument["normalselectcount"];

                _multiTotalFreeSpinWinRates = new double[FreePurCount];
                _multiMinFreeSpinWinRates   = new double[FreePurCount];

                if (SupportPurchaseFree)
                {
                    var purchaseOdds = infoDocument["purchaseodds"] as BsonArray;
                    for (int i = 0; i < FreePurCount; i++)
                    {
                        _multiMinFreeSpinWinRates[i] = (double)purchaseOdds[2 * i];
                        _multiTotalFreeSpinWinRates[i] = (double)purchaseOdds[2 * i + 1];

                        if (this.PurchaseMultiples[i] > _multiTotalFreeSpinWinRates[i])
                            _logger.Error("freespin win rate doesn't satisfy condition {0}", this.GameName);
                    }
                }
            }
            catch (Exception ex)
            {
                _logger.Error("Exception has been occured in loading spin data of game {0} {1}", GameName, ex);
            }
        }
        protected override void setupDefaultResultParams(Dictionary<string, string> dicParams, double userBalance, int index, int counter, string initString)
        {
            base.setupDefaultResultParams(dicParams, userBalance, index, counter, initString);
	    	dicParams["reel_set"] = "0";
        }
        protected override void convertWinsByBet(Dictionary<string, string> dicParams, float currentBet)
        {
            base.convertWinsByBet(dicParams, currentBet);
        }
        protected override void readBetInfoFromMessage(GITMessage message, string strUserID)
        {
            try
            {
                BookOfTheFallenBetInfo betInfo   = new BookOfTheFallenBetInfo();
                betInfo.BetPerLine               = (float)  message.Pop();
                betInfo.LineCount                = (int)    message.Pop();

                if (message.DataNum >= 3)
                {
                    betInfo.PurchaseFree = true;
                    if (message.DataNum >= 4)
                        betInfo.PurchaseType = (int)message.GetData(3) + 1;
                    else
                        betInfo.PurchaseType = 0;
                }
                else
                {
                    betInfo.PurchaseFree = false;
                }
                if (betInfo.BetPerLine <= 0.0f)
                {
                    _logger.Error("{0} betInfo.BetPerLine <= 0 in BookOfTheFallenGameLogic::readBetInfoFromMessage {1}", strUserID, betInfo.BetPerLine);
                    return;
                }
		
                if (betInfo.LineCount != this.ClientReqLineCount)
                {
                    _logger.Error("{0} betInfo.LineCount is not matched {1}", strUserID, betInfo.LineCount);
                    return;
                }

                BasePPSlotBetInfo oldBetInfo = null;
                if (_dicUserBetInfos.TryGetValue(strUserID, out oldBetInfo))
                {
                    if (oldBetInfo.HasRemainResponse)
                        return;

                    oldBetInfo.BetPerLine                               = betInfo.BetPerLine;
                    oldBetInfo.LineCount                                = betInfo.LineCount;
                    oldBetInfo.MoreBet                                  = betInfo.MoreBet;
                    oldBetInfo.PurchaseFree                             = betInfo.PurchaseFree;
                    (oldBetInfo as BookOfTheFallenBetInfo).PurchaseType = betInfo.PurchaseType;
                }
                else
                {
                    _dicUserBetInfos.Add(strUserID, betInfo);
                }
            }
            catch (Exception ex)
            {
                _logger.Error("Exception has been occurred in BookOfTheFallenGameLogic::readBetInfoFromMessage {0}", ex);
            }
        }
        protected override BasePPSlotBetInfo restoreBetInfo(string strUserID, BinaryReader reader)
        {
            BookOfTheFallenBetInfo betInfo = new BookOfTheFallenBetInfo();
            betInfo.SerializeFrom(reader);
            return betInfo;
        }

        protected override async Task<BasePPSlotSpinData> selectRangeSpinData(int websiteID, double minOdd, double maxOdd, BasePPSlotBetInfo betInfo)
        {
            var spinDataDocument = await Context.System.ActorSelection("/user/spinDBReaders").Ask<BsonDocument>(
                        new SelectSelFreeOnlyPuri0SpinRangeRequest(GameName, minOdd, maxOdd, getRangeID(minOdd, maxOdd)), TimeSpan.FromSeconds(10.0));

            if (spinDataDocument == null)
                return null;

            BasePPSlotSpinData spinData = convertBsonToSpinData(spinDataDocument);
            if (spinData is BasePPSlotStartSpinData)
            {
                BasePPSlotStartSpinData startSpinData = spinData as BasePPSlotStartSpinData;
                double minFreeOdd = minOdd - startSpinData.StartOdd;
                if (minFreeOdd < 0.0)
                    minFreeOdd = 0.0;
                double maxFreeOdd = maxOdd - startSpinData.StartOdd;
                if (maxFreeOdd < 0.0)
                    maxFreeOdd = 0.0;

                await buildStartFreeSpinData(startSpinData, StartSpinBuildTypes.IsRangeLimited, minFreeOdd, maxFreeOdd);
            }
            return spinData;
        }
        protected override async Task<BasePPSlotSpinData> selectPurchaseFreeSpin(int agentID, BasePPSlotBetInfo betInfo, double baseBet, UserBonus userBonus)
        {
            int purchaseType = (betInfo as BookOfTheFallenBetInfo).PurchaseType;
            double payoutRate = getPayoutRate(agentID);

            double targetC = PurchaseMultiples[purchaseType] * payoutRate / 100.0;
            if (targetC >= _multiTotalFreeSpinWinRates[purchaseType])
                targetC = _multiTotalFreeSpinWinRates[purchaseType];

            if (targetC < _multiMinFreeSpinWinRates[purchaseType])
                targetC = _multiMinFreeSpinWinRates[purchaseType];

            double x = (_multiTotalFreeSpinWinRates[purchaseType] - targetC) / (_multiTotalFreeSpinWinRates[purchaseType] - _multiMinFreeSpinWinRates[purchaseType]);
            double y = 1.0 - x;

            BasePPSlotSpinData spinData = null;
            if (Pcg.Default.NextDouble(0.0, 1.0) <= x)
                spinData = await selectMinStartFreeSpinData(betInfo);
            else
                spinData = await selectRandomStartFreeSpinData(betInfo);
            return spinData;
        }
        protected override async Task<BasePPSlotSpinData> selectMinStartFreeSpinData(BasePPSlotBetInfo betInfo)
        {
            try
            {
                BsonDocument spinDataDocument = null;
                int purchaseType = (betInfo as BookOfTheFallenBetInfo).PurchaseType;
                if(purchaseType > 0)
                {
                    spinDataDocument = await Context.System.ActorSelection("/user/spinDBReaders").Ask<BsonDocument>(
                            new SelectSpinTypeOddRangeRequestWithPuri(GameName, 0, PurchaseMultiples[purchaseType] * 0.2, PurchaseMultiples[purchaseType] * 0.5, purchaseType), TimeSpan.FromSeconds(10.0));
                }
                else
                {
                    spinDataDocument = await Context.System.ActorSelection("/user/spinDBReaders").Ask<BsonDocument>(
                            new SelectSelFreeMinStartRequest(GameName, purchaseType), TimeSpan.FromSeconds(10.0));
                }

                BasePPSlotSpinData spinData = convertBsonToSpinData(spinDataDocument);
                if(spinData is BasePPSlotStartSpinData)
                {
                    BasePPSlotStartSpinData startSpinData = spinData as BasePPSlotStartSpinData;
                    double minOdd = PurchaseMultiples[purchaseType] * 0.2 - startSpinData.StartOdd;
                    double maxOdd = PurchaseMultiples[purchaseType] * 0.5 - startSpinData.StartOdd;
                    if (minOdd < 0.0)
                        minOdd = 0.0;
                    if (maxOdd < 0.0)
                        maxOdd = 0.0;
                    await buildStartFreeSpinData(startSpinData, StartSpinBuildTypes.IsRangeLimited, minOdd, maxOdd);
                }
                return spinData;
            }
            catch (Exception ex)
            {
                _logger.Error("Exception has been occurred in BookOfTheFallenGameLogic::selectMinStartFreeSpinData {0}", ex);
                return null;
            }
        }
        protected override async Task<BasePPSlotSpinData> selectRandomStartFreeSpinData(BasePPSlotBetInfo betInfo)
        {
            try
            {
                int purchaseType = (betInfo as BookOfTheFallenBetInfo).PurchaseType;
                var spinDataDocument = await Context.System.ActorSelection("/user/spinDBReaders").Ask<BsonDocument>(
                        new SelectPurchaseSpinRequest(GameName, StartSpinSearchTypes.MULTISPECIFIC, purchaseType),
                        TimeSpan.FromSeconds(10.0));

                BasePPSlotSpinData spinData = convertBsonToSpinData(spinDataDocument);
                if (spinData is BasePPSlotStartSpinData)
                    await buildStartFreeSpinData(spinData as BasePPSlotStartSpinData, StartSpinBuildTypes.IsTotalRandom, -1.0, -1.0);

                return spinData;
            }
            catch (Exception ex)
            {
                _logger.Error("Exception has been occurred in BookOfTheFallenGameLogic::selectRandomStartFreeSpinData {0}", ex);
                return null;
            }
        }

        protected override async Task onProcMessage(string strUserID, int websiteID, GITMessage message, UserBonus userBonus, double userBalance, Currencies currency)
        {
            if (message.MsgCode == (ushort)CSMSG_CODE.CS_PP_DOMYSTERYSCATTER)
                onDoMysteryScatter(strUserID, websiteID, message, userBonus, userBalance);
            else
                await base.onProcMessage(strUserID, websiteID, message, userBonus, userBalance, currency);
        }
        protected void onDoMysteryScatter(string strUserID, int agentID, GITMessage message, UserBonus userBonus, double userBalance)
        {
            try
            {
                int index   = (int)message.Pop();
                int counter = (int)message.Pop();
                int ind     = (int)message.Pop();

                GITMessage responseMessage = new GITMessage((ushort)SCMSG_CODE.SC_PP_DOMYSTERYSCATTER);
                string strGlobalUserID = string.Format("{0}_{1}", agentID, strUserID);
                if (!_dicUserResultInfos.ContainsKey(strGlobalUserID) || !_dicUserBetInfos.ContainsKey(strGlobalUserID))
                {
                    responseMessage.Append("unlogged");
                }
                else
                {
                    BasePPSlotBetInfo       betInfo = _dicUserBetInfos[strGlobalUserID];
                    BasePPSlotSpinResult    result  = _dicUserResultInfos[strGlobalUserID];
                    if ((result.NextAction != ActionTypes.DOMYSTERY) || (betInfo.SpinData == null) || !(betInfo.SpinData is BasePPSlotStartSpinData))
                    {
                        responseMessage.Append("unlogged");
                    }
                    else
                    {
                        BasePPSlotStartSpinData startSpinData = betInfo.SpinData as BasePPSlotStartSpinData;
                        if (ind >= startSpinData.FreeSpins.Count)
                        {
                            responseMessage.Append("unlogged");
                        }
                        else
                        {
                            BasePPSlotSpinData freeSpinData = convertBsonToSpinData(startSpinData.FreeSpins[ind]);
                            preprocessSelectedFreeSpin(freeSpinData, betInfo);
                            betInfo.SpinData = freeSpinData;

                            List<string> freeSpinStrings = new List<string>();
                            for (int i = 0; i < freeSpinData.SpinStrings.Count; i++)
                                freeSpinStrings.Add(addStartWinToResponse(freeSpinData.SpinStrings[i], startSpinData.StartOdd));

                            string strSpinResponse = freeSpinStrings[0];
                            if (freeSpinStrings.Count > 1)
                                betInfo.RemainReponses = buildResponseList(freeSpinStrings);

                            double selectedWin = (startSpinData.StartOdd + freeSpinData.SpinOdd) * betInfo.TotalBet;
                            double maxWin = startSpinData.MaxOdd * betInfo.TotalBet;

                            //시작스핀시에 최대의 오드에 해당한 윈값을 더해주었으므로 그 차분을 보상해준다.
                            if (!startSpinData.IsEvent)
                                sumUpWebsiteBetWin(agentID, 0.0, selectedWin - maxWin);
                            else if (maxWin > selectedWin)
                                addEventLeftMoney(agentID, strUserID, maxWin - selectedWin);
                            Dictionary<string, string> dicParams = splitResponseToParams(strSpinResponse);

                            convertWinsByBet(dicParams, betInfo.TotalBet);
                            convertBetsByBet(dicParams, betInfo.BetPerLine, betInfo.TotalBet);
                            if (SupportMoreBet)
                            {
                                if (betInfo.MoreBet)
                                    dicParams["bl"] = "1";
                                else
                                    dicParams["bl"] = "0";
                            }
                            result.BonusResultString = convertKeyValuesToString(dicParams);
                            addDefaultParams(dicParams, userBalance, index, counter);
                            ActionTypes nextAction = convertStringToActionType(dicParams["na"]);
                            string strResponse = convertKeyValuesToString(dicParams);

                            responseMessage.Append(strResponse);

                            //히스토리보관 및 초기화
                            if (_dicUserHistory.ContainsKey(strGlobalUserID) && _dicUserHistory[strGlobalUserID].log.Count > 0)
                                addIndActionHistory(strGlobalUserID, "doMysteryScatter", strResponse, index, counter, ind);

                            result.NextAction = nextAction;
                        }
                        if (!betInfo.HasRemainResponse)
                            betInfo.RemainReponses = null;

                        saveBetResultInfo(strGlobalUserID);
                    }
                }
                Sender.Tell(new ToUserMessage((int)_gameID, responseMessage), Self);
            }
            catch (Exception ex)
            {
                _logger.Error("Exception has been occurred in BookOfTheFallenGameLogic::onFSOption {0}", ex);
            }
        }
        protected override Dictionary<string, string> mergeSpinToBonus(Dictionary<string, string> spinParams, Dictionary<string, string> bonusParams)
        {
            Dictionary<string, string> resultParams = new Dictionary<string, string>();
            foreach (KeyValuePair<string, string> pair in bonusParams)
                resultParams.Add(pair.Key, pair.Value);

            string[] toCopyParams = new string[] { "s", "sa", "sb", "fs", "fsmul", "fsmax", "fsres", "fswin", "fs_total", "fsmul_total", "fsres_total", "fswin_total", "reel_set" };
            for (int i = 0; i < toCopyParams.Length; i++)
            {
                if (!spinParams.ContainsKey(toCopyParams[i]))
                    continue;
                resultParams[toCopyParams[i]] = spinParams[toCopyParams[i]];
            }

            if (!resultParams.ContainsKey("g") && spinParams.ContainsKey("g"))
                resultParams["g"] = spinParams["g"];
            return resultParams;
        }
        protected override async Task buildStartFreeSpinData(BasePPSlotStartSpinData startSpinData, StartSpinBuildTypes buildType, double minOdd, double maxOdd)
        {
            if (buildType == StartSpinBuildTypes.IsNaturalRandom)
                await base.buildStartFreeSpinData(startSpinData, StartSpinBuildTypes.IsTotalRandom, minOdd, maxOdd);
            else
                await base.buildStartFreeSpinData(startSpinData, buildType, minOdd, maxOdd);
        }
        protected override UserSpinItem createUserSpinItem(int agentID, string strUserID, BasePPSlotBetInfo betInfo, double betMoney)
        {
            BookOfTheFallenBetInfo bookBetInfo = betInfo as BookOfTheFallenBetInfo;
            return new UserSpinItem(agentID, strUserID, this.SymbolName, betInfo.BetPerLine, betInfo.LineCount, -1, betInfo.PurchaseFree ? bookBetInfo.PurchaseType : -1, betMoney);
        }
        protected override bool addSpinResultToHistory(string strGlobalUserID, int index, int counter, string strSpinResult, BasePPSlotBetInfo betInfo, BasePPSlotSpinResult spinResult)
        {
            if (!_dicUserHistory.ContainsKey(strGlobalUserID))
                return false;

            BasePPHistoryItem historyItem = new BasePPHistoryItem();
            historyItem.cr = string.Format("symbol={0}&c={1}&repeat=0&action=doSpin&index={2}&counter={3}&l={4}", SymbolName, betInfo.BetPerLine, index, counter, ClientReqLineCount);
            if (SupportPurchaseFree && betInfo.PurchaseFree)
            {
                int purchaseType = (betInfo as BookOfTheFallenBetInfo).PurchaseType;
                if (purchaseType == 0)
                    historyItem.cr += "&pur=1";
                else
                    historyItem.cr += string.Format("&pur=0&ind={0}", purchaseType - 1);
            }
            if (SupportMoreBet)
            {
                if (betInfo.MoreBet)
                    historyItem.cr += "&bl=1";
                else
                    historyItem.cr += "&bl=0";
            }
            historyItem.sr = strSpinResult;

            _dicUserHistory[strGlobalUserID].log.Add(historyItem);
            if (betInfo.HasRemainResponse)
                return false;

            _dicUserHistory[strGlobalUserID].baseBet = betInfo.TotalBet;
            _dicUserHistory[strGlobalUserID].win = spinResult.TotalWin;

            //빈스핀인 경우이다.
            if (spinResult.NextAction == ActionTypes.DOSPIN)
                return true;

            return false;
        }
    }
}
