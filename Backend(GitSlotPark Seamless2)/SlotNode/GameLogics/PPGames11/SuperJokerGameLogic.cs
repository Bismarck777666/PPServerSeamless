using GITProtocol;
using PCGSharp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SlotGamesNode.GameLogics
{
    class SuperJokerGameLogic : BasePPSlotGame
    {
        #region 게임고유속성값
        protected override string SymbolName
        {
            get
            {
                return "vs5spjoker";
            }
        }
        protected override bool SupportReplay
        {
            get
            {
                return false;
            }
        }
        protected override int ClientReqLineCount
        {
            get { return 5; }
        }
        protected override int ServerResLineCount
        {
            get { return 5; }
        }
        protected override int ROWS
        {
            get
            {
                return 3;
            }
        }
        protected override string InitDataString
        {
            get
            {
                return "def_s=3,4,5,3,4,5,3,4,5&cfgs=2478&ver=2&reel_set_size=17&def_sb=3,4,5&def_sa=3,4,5&scatters=1~0,0,0~0,0,0~1,1,1&gmb=0,0,0&rt=d&reel_set10=5,5,5,6,3,7,8,4,6,4,4,4,7,2,2,4,10,7,8,9,2,10,10,10,7,6,6,6,2,2,9,9,9,7,10,10,6,7,3,3,3~5,5,5,6,3,7,8,4,6,4,4,4,7,2,2,4,10,7,8,9,2,10,10,10,7,6,6,6,2,2,9,9,9,7,10,10,6,7,3,3,3~5,5,5,6,3,7,8,4,6,4,4,4,7,2,2,4,10,7,8,9,2,10,10,10,7,6,6,6,2,2,9,9,9,7,10,10,6,7,3,3,3&sc=40.00,80.00,120.00,160.00,200.00,400.00,600.00,800.00,1000.00,1500.00,2000.00,3000.00,5000.00,10000.00,15000.00,20000.00&defc=200.00&reel_set11=3,3,9,5,5,5,4,6,4,4,4,8,8,8,7,9,3,9,10,7,4,5,10,6,6,7,6,2,2,2~3,3,9,5,5,5,4,6,4,4,4,8,8,8,7,9,3,9,10,7,4,5,10,6,6,7,6,2,2,2~3,3,9,2,2,2,5,5,5,4,6,4,4,4,7,9,3,9,10,7,4,5,10,6,8,8,8,6,7,6&reel_set12=6,7,8,3,4,6,8,2,2,4,5,5,5,10,8,3,9,2,10,10,10,8,4,4,4,2,6,6,6,2,9,9,9,8,10,10,6,8,7,7,7~6,7,8,3,4,6,8,2,2,4,5,5,5,10,8,3,9,2,10,10,10,8,4,4,4,2,6,6,6,2,9,9,9,8,10,10,6,8,7,7,7~6,7,8,3,4,6,8,2,2,4,5,5,5,10,8,3,9,2,10,10,10,8,4,4,4,2,6,6,6,2,9,9,9,8,10,10,6,8,7,7,7&reel_set13=8,8,3,5,5,5,4,6,4,4,4,7,3,8,3,10,7,4,5,10,6,9,9,9,6,7,6,2,2,2~8,8,3,5,5,5,4,6,4,4,4,9,9,9,7,3,8,2,2,2,3,10,7,4,5,10,6,6,7,6~8,8,3,2,2,2,5,5,5,4,6,4,4,4,7,3,8,3,10,7,4,5,10,6,9,9,9,6,7,6&wilds=2~75,0,0~1,1,1&bonuses=0&fsbonus=&reel_set14=7,7,7,6,7,9,8,4,3,3,3,4,4,4,6,9,2,2,4,10,9,8,3,2,10,10,10,9,6,6,6,2,5,5,5,2,9,10,10,6,9~7,7,7,6,7,9,8,4,3,3,3,4,4,4,6,9,2,2,4,10,9,8,3,2,10,10,10,9,6,6,6,2,5,5,5,2,9,10,10,6,9~7,7,7,6,7,9,8,4,3,3,3,4,4,4,6,9,2,2,4,10,9,8,3,2,10,10,10,9,6,6,6,2,5,5,5,2,9,10,10,6,9&paytable=0,0,0;0,0,0;0,0,0;25,0,0;15,0,0;10,0,0;7,0,0;6,0,0;5,0,0;3,0,0;2,0,0&reel_set15=8,8,9,5,5,5,4,6,4,4,4,10,10,10,7,9,8,9,3,7,4,5,3,6,6,7,6,2,2,2~8,8,9,5,5,5,4,6,4,4,4,10,10,10,7,9,8,9,3,7,4,5,3,6,6,7,6,2,2,2~8,8,9,2,2,2,5,5,5,4,6,4,4,4,7,9,8,9,3,7,4,5,3,6,10,10,10,6,7,6&reel_set16=6,7,10,8,4,6,10,9,9,9,6,6,6,2,2,4,3,10,8,9,2,3,3,3,10,4,4,4,2,5,5,5,2,10,3,3,6,10,7,7,7~6,7,10,8,4,6,10,4,4,4,6,6,6,2,2,4,3,10,8,9,2,3,3,3,10,2,5,5,5,2,7,7,7,9,9,9,10,3,3,6,10~6,7,10,8,4,6,10,6,6,6,9,9,9,2,2,4,3,10,8,9,2,3,3,3,10,4,4,4,2,5,5,5,2,7,7,7,10,3,3,6,10&reel_set0=6,2,7,8,8,8,2,2,2,5,5,5,6,6,6,7,7,7,4,4,4,9,9,9,8,8,8,3,3,3,6,2,8,7,7,7,10,10,10,6,6,6,2,2,2,8,8,8,9,9,9,4,4,4~2,2,2,6,6,6,7,7,7,10,10,10,5,5,5,6,6,6,9,9,9,9,4,5,7,7,7,4,10,9,8,8,8,2,2,2,5,5,5,4,4,4,8,8,8,5,2,4,3,3,3,6,6,6,8,8,8,5,5,5~10,10,10,3,3,3,7,7,7,9,9,9,6,6,6,2,2,2,5,5,5,8,2,7,8,8,8,6,6,6,8,9,7,4,4,4,9,9,9,7,7,7,2,2,2,5,5,5,9,9,9,8,8,8,4,4,4&reel_set2=6,7,3,8,4,6,3,2,7,7,7,2,4,10,3,8,9,2,6,6,6,10,10,10,3,2,5,5,5,2,9,9,9,4,4,4,3,10,10,6,3~6,7,3,8,4,6,3,7,7,7,6,6,6,2,2,4,10,3,8,9,2,4,4,4,10,10,10,3,2,5,5,5,2,9,9,9,3,10,10,6,3~6,7,3,8,4,6,3,6,6,6,2,10,10,10,2,4,10,3,8,9,2,3,4,4,4,7,7,7,2,5,5,5,2,9,9,9,3,10,10,6,3&reel_set1=8,8,9,5,5,5,4,6,3,3,3,7,9,8,9,10,7,4,4,4,4,5,10,6,6,7,6,2,2,2~8,8,9,4,6,4,4,4,7,9,8,9,10,7,4,5,10,6,3,3,3,6,7,6,2,2,2,5,5,5~8,8,9,5,5,5,4,6,4,4,4,3,3,3,7,9,8,9,10,7,4,5,10,6,6,2,2,2,7,6&reel_set4=6,7,4,8,3,6,4,2,7,7,7,2,3,10,4,8,9,2,10,10,10,6,6,6,4,3,3,3,2,5,5,5,2,9,9,9,4,10,10,6,4~6,7,4,8,3,6,4,7,7,7,6,6,6,2,2,3,10,4,8,9,2,10,10,10,4,3,3,3,2,5,5,5,2,9,9,9,4,10,10,6,4~6,7,4,8,3,6,4,6,6,6,2,7,7,7,9,9,9,2,3,10,4,8,9,2,4,3,3,3,2,5,5,5,2,10,10,10,4,10,10,6,4&reel_set3=8,8,9,5,5,5,3,6,3,3,3,7,9,8,9,10,7,3,5,10,6,4,4,4,6,7,6,2,2,2,4,4,4~8,8,9,3,6,5,5,5,3,3,3,4,4,4,7,9,8,9,10,7,3,5,10,6,4,4,4,6,7,6,2,2,2~8,8,9,3,6,3,3,3,4,4,4,5,5,5,7,9,8,2,2,2,9,10,7,3,5,10,6,4,4,4,6,7,6&reel_set6=6,7,5,8,4,6,5,6,6,6,2,4,4,4,7,7,7,9,9,9,2,4,10,5,8,9,2,10,10,10,5,2,3,3,3,2,5,10,10,6,5~6,7,5,8,4,6,5,6,6,6,2,2,4,10,5,8,9,2,10,10,10,7,7,7,5,4,4,4,2,2,9,9,9,5,10,10,6,5,3,3,3~6,7,5,8,4,6,5,10,10,10,6,6,6,2,7,7,7,2,4,10,5,8,9,2,5,9,9,9,4,4,4,2,3,3,3,2,5,10,10,6,5&reel_set5=8,8,9,4,6,4,4,4,7,9,8,2,2,2,9,10,7,4,3,10,6,5,5,5,3,3,3,6,7,6~8,8,9,2,2,2,3,3,3,4,6,4,4,4,7,9,8,9,10,7,4,3,10,6,5,5,5,6,7,6~8,8,9,3,3,3,4,6,5,5,5,7,9,8,9,10,7,4,3,10,6,5,5,5,4,4,4,6,7,6,2,2,2&reel_set8=3,7,6,8,4,3,6,2,7,7,7,2,4,10,6,8,9,2,10,10,10,3,3,3,6,4,4,4,2,5,5,5,2,9,9,9,6,10,10,3,6~3,7,6,8,4,3,6,10,10,10,3,3,3,2,7,7,7,2,4,10,6,8,9,2,6,4,4,4,2,5,5,5,2,9,9,9,6,10,10,3,6~3,7,6,8,4,3,6,3,3,3,2,2,4,10,6,8,9,2,10,10,10,6,4,4,4,2,5,5,5,2,9,9,9,6,10,10,3,6,7,7,7&reel_set7=8,8,9,5,5,5,4,3,7,9,8,9,10,7,4,5,10,3,6,6,6,3,7,3,2,2,2,4,4,4~8,8,9,2,2,2,5,5,5,4,3,4,4,4,7,9,8,9,10,7,4,5,10,3,6,6,6,3,7,3~8,8,9,5,5,5,4,3,6,6,6,7,9,8,2,2,2,9,10,7,4,5,10,3,3,7,3,4,4,4&reel_set9=8,8,9,5,5,5,4,6,4,4,4,3,9,8,9,10,3,4,5,10,6,7,7,7,6,3,6,2,2,2~8,8,9,5,5,5,4,6,4,4,4,7,7,7,3,9,8,9,10,3,4,5,10,6,6,3,6,2,2,2~8,8,9,2,2,2,5,5,5,4,6,4,4,4,3,9,8,9,10,3,4,5,10,6,7,7,7,6,3,6";
            }
        }
	
	
        #endregion
        public SuperJokerGameLogic()
        {
            _gameID = GAMEID.SuperJoker;
            GameName = "SuperJoker";
        }
        protected override void setupDefaultResultParams(Dictionary<string, string> dicParams, double userBalance, int index, int counter, string initString)
        {
            base.setupDefaultResultParams(dicParams, userBalance, index, counter, initString);
	    	dicParams["reel_set"] = "0";
        }
        protected override void convertWinsByBet(Dictionary<string, string> dicParams, float currentBet)
        {
            base.convertWinsByBet(dicParams, currentBet);
            if (dicParams.ContainsKey("rs_win"))
                dicParams["rs_win"] = convertWinByBet(dicParams["rs_win"], currentBet);

        }
        protected override Dictionary<string, string> mergeSpinToBonus(Dictionary<string, string> spinParams, Dictionary<string, string> bonusParams)
        {
            Dictionary<string, string> resultParams = new Dictionary<string, string>();
            foreach (KeyValuePair<string, string> pair in bonusParams)
                resultParams.Add(pair.Key, pair.Value);

            string[] toCopyParams = new string[] { "sa", "sb", "fs", "fsmul", "fsmax", "fsres", "fswin", "fs_total", "fsmul_total", "fsres_total", "fswin_total", "reel_set", "s" };
            for (int i = 0; i < toCopyParams.Length; i++)
            {
                if (!spinParams.ContainsKey(toCopyParams[i]) || resultParams.ContainsKey(toCopyParams[i]))
                    continue;
                resultParams[toCopyParams[i]] = spinParams[toCopyParams[i]];
            }
            return resultParams;
        }

    }
}
