<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Hocon</name>
    </assembly>
    <members>
        <member name="T:Hocon.Extensions.HoconElementExtensions">
            <summary>
                HoconElementExtensions
            </summary>
        </member>
        <member name="T:Hocon.HoconParser">
            <summary>
                This class contains methods used to parse HOCON (Human-Optimized Config Object Notation)
                configuration strings.
            </summary>
        </member>
        <member name="M:Hocon.HoconParser.Parse(System.String,Hocon.HoconIncludeCallbackAsync)">
            <summary>
                Parses the supplied HOCON configuration string into a root element.
            </summary>
            <param name="text">The string that contains a HOCON configuration string.</param>
            <param name="includeCallback">Callback used to resolve includes</param>
            <returns>The root element created from the supplied HOCON configuration string.</returns>
            <exception cref="T:Hocon.HoconParserException">
                This exception is thrown when an unresolved substitution is encountered.
                It also occurs when any error is encountered while tokenizing or parsing the configuration string.
            </exception>
        </member>
        <member name="M:Hocon.HoconParser.ParseValue(Hocon.IHoconElement)">
            <summary>
                Retrieves the next value token from the tokenizer and appends it
                to the supplied element <paramref name="owner" />.
            </summary>
            <param name="owner">The element to append the next token.</param>
            <exception cref="T:System.Exception">End of file reached while trying to read a value</exception>
        </member>
        <member name="M:Hocon.HoconParser.ParseArray(Hocon.IHoconElement)">
            <summary>
                Retrieves the next array token from the tokenizer.
            </summary>
            <returns>An array of elements retrieved from the token.</returns>
        </member>
        <member name="T:Hocon.HoconRoot">
            <summary>
                This class represents the root element in a HOCON (Human-Optimized Config Object Notation)
                configuration string.
            </summary>
        </member>
        <member name="M:Hocon.HoconRoot.#ctor">
            <inheritdoc />
            <summary>
                Initializes a new instance of the <see cref="T:Hocon.HoconRoot" /> class.
            </summary>
        </member>
        <member name="M:Hocon.HoconRoot.#ctor(Hocon.HoconValue)">
            <inheritdoc cref="M:Hocon.HoconRoot.#ctor" />
            <param name="value">The value to associate with this element.</param>
        </member>
        <member name="M:Hocon.HoconRoot.#ctor(Hocon.HoconValue,System.Collections.Generic.IEnumerable{Hocon.HoconSubstitution})">
            <inheritdoc cref="M:Hocon.HoconRoot.#ctor" />
            <param name="value">The value to associate with this element.</param>
            <param name="substitutions">An enumeration of substitutions to associate with this element.</param>
        </member>
        <member name="P:Hocon.HoconRoot.Value">
            <summary>
                Retrieves the value associated with this element.
            </summary>
        </member>
        <member name="P:Hocon.HoconRoot.Substitutions">
            <summary>
                Retrieves an enumeration of substitutions associated with this element.
            </summary>
        </member>
        <member name="M:Hocon.HoconRoot.HasPath(System.String)">
            <summary>
                Determine if a HOCON configuration element exists at the specified location
            </summary>
            <param name="path">The location to check for a configuration value.</param>
            <returns><c>true</c> if a value was found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Hocon.HoconRoot.HasPath(Hocon.HoconPath)">
            <summary>
                Determine if a HOCON configuration element exists at the specified location
            </summary>
            <param name="path">The location to check for a configuration value.</param>
            <returns><c>true</c> if a value was found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Hocon.HoconRoot.Normalize">
            <summary>
                Normalize the values inside all Hocon fields to the simplest value possible under Hocon spec.
                NOTE: You might not be able to reproduce a clean reproduction of the original configuration file after this
                normalization.
            </summary>
        </member>
        <member name="M:Hocon.HoconRoot.AsEnumerable">
            <summary>
                Retrieves an enumerable key value pair representation of the current configuration.
            </summary>
            <returns>The current configuration represented as an enumerable key value pair.</returns>
        </member>
        <member name="M:Hocon.HoconRoot.ToString">
            <summary>
                Converts the current configuration to a string.
            </summary>
            <returns>A string containing the current configuration.</returns>
        </member>
        <member name="M:Hocon.HoconRoot.PrettyPrint(System.Int32)">
            <summary>
                Converts the current configuration to a pretty printed string.
            </summary>
            <param name="indentSize">The number of spaces used for each indent.</param>
            <returns>A string containing the current configuration.</returns>
        </member>
        <member name="M:Hocon.HoconRoot.WrapWithValueException``1(System.String,System.Func{``0})">
            <summary>
                Wraps any exception into <see cref="T:Hocon.HoconValueException" /> with failure path specified
            </summary>
        </member>
        <member name="M:Hocon.HoconRoot.GetString(System.String)">
            <summary>
                Retrieves a string value from the specified path in the configuration.
            </summary>
            <param name="path">The path that contains the value to retrieve.</param>
            <returns>The string value defined in the specified path.</returns>
        </member>
        <member name="M:Hocon.HoconRoot.GetString(System.String,System.String)">
            <summary>
                Retrieves a string value from the specified path in the configuration.
            </summary>
            <param name="path">The path that contains the value to retrieve.</param>
            <param name="default">The default value to return if the value doesn't exist.</param>
            <returns>The string value defined in the specified path.</returns>
        </member>
        <member name="M:Hocon.HoconRoot.GetString(Hocon.HoconPath,System.String)">
            <inheritdoc cref="M:Hocon.HoconRoot.GetString(System.String,System.String)" />
        </member>
        <member name="M:Hocon.HoconRoot.GetBoolean(System.String,System.Boolean)">
            <summary>
                Retrieves a boolean value from the specified path in the configuration.
            </summary>
            <param name="path">The path that contains the value to retrieve.</param>
            <param name="default">The default value to return if the value doesn't exist.</param>
            <returns>The boolean value defined in the specified path.</returns>
        </member>
        <member name="M:Hocon.HoconRoot.GetBoolean(Hocon.HoconPath,System.Boolean)">
            <inheritdoc cref="M:Hocon.HoconRoot.GetBoolean(System.String,System.Boolean)" />
        </member>
        <member name="M:Hocon.HoconRoot.GetByteSize(System.String)">
            <summary>
                Retrieves a long value, optionally suffixed with a 'b', from the specified path in the configuration.
            </summary>
            <param name="path">The path that contains the value to retrieve.</param>
            <returns>The long value defined in the specified path, or null if path was not found.</returns>
        </member>
        <member name="M:Hocon.HoconRoot.GetByteSize(Hocon.HoconPath)">
            <inheritdoc cref="M:Hocon.HoconRoot.GetByteSize(System.String)" />
        </member>
        <member name="M:Hocon.HoconRoot.GetByteSize(Hocon.HoconPath,System.Nullable{System.Int64})">
            <inheritdoc cref="M:Hocon.HoconRoot.GetByteSize(System.String)" />
        </member>
        <member name="M:Hocon.HoconRoot.GetInt(System.String)">
            <summary>
                Retrieves an integer value from the specified path in the configuration.
            </summary>
            <param name="path">The path that contains the value to retrieve.</param>
            <returns>The integer value defined in the specified path.</returns>
        </member>
        <member name="M:Hocon.HoconRoot.GetInt(System.String,System.Int32)">
            <summary>
                Retrieves an integer value from the specified path in the configuration.
            </summary>
            <param name="path">The path that contains the value to retrieve.</param>
            <param name="default">The default value to return if the value doesn't exist.</param>
            <returns>The integer value defined in the specified path.</returns>
        </member>
        <member name="M:Hocon.HoconRoot.GetInt(Hocon.HoconPath,System.Int32)">
            <inheritdoc cref="M:Hocon.HoconRoot.GetInt(System.String,System.Int32)" />
        </member>
        <member name="M:Hocon.HoconRoot.GetLong(System.String,System.Int64)">
            <summary>
                Retrieves a long value from the specified path in the configuration.
            </summary>
            <param name="path">The path that contains the value to retrieve.</param>
            <param name="default">The default value to return if the value doesn't exist.</param>
            <returns>The long value defined in the specified path.</returns>
        </member>
        <member name="M:Hocon.HoconRoot.GetLong(Hocon.HoconPath,System.Int64)">
            <inheritdoc cref="M:Hocon.HoconRoot.GetLong(System.String,System.Int64)" />
        </member>
        <member name="M:Hocon.HoconRoot.GetByte(System.String,System.Byte)">
            <summary>
                Retrieves a byte value from the specified path in the configuration.
            </summary>
            <param name="path">The path that contains the value to retrieve.</param>
            <param name="default">The default value to return if the value doesn't exist.</param>
            <returns>The byte value defined in the specified path.</returns>
        </member>
        <member name="M:Hocon.HoconRoot.GetByte(Hocon.HoconPath,System.Byte)">
            <inheritdoc cref="M:Hocon.HoconRoot.GetByte(System.String,System.Byte)" />
        </member>
        <member name="M:Hocon.HoconRoot.GetFloat(System.String,System.Single)">
            <summary>
                Retrieves a float value from the specified path in the configuration.
            </summary>
            <param name="path">The path that contains the value to retrieve.</param>
            <param name="default">The default value to return if the value doesn't exist.</param>
            <returns>The float value defined in the specified path.</returns>
        </member>
        <member name="M:Hocon.HoconRoot.GetFloat(Hocon.HoconPath,System.Single)">
            <inheritdoc cref="M:Hocon.HoconRoot.GetFloat(System.String,System.Single)" />
        </member>
        <member name="M:Hocon.HoconRoot.GetDecimal(System.String,System.Decimal)">
            <summary>
                Retrieves a decimal value from the specified path in the configuration.
            </summary>
            <param name="path">The path that contains the value to retrieve.</param>
            <param name="default">The default value to return if the value doesn't exist.</param>
            <returns>The decimal value defined in the specified path.</returns>
        </member>
        <member name="M:Hocon.HoconRoot.GetDecimal(Hocon.HoconPath,System.Decimal)">
            <inheritdoc cref="M:Hocon.HoconRoot.GetDecimal(System.String,System.Decimal)" />
        </member>
        <member name="M:Hocon.HoconRoot.GetDouble(System.String,System.Double)">
            <summary>
                Retrieves a double value from the specified path in the configuration.
            </summary>
            <param name="path">The path that contains the value to retrieve.</param>
            <param name="default">The default value to return if the value doesn't exist.</param>
            <returns>The double value defined in the specified path.</returns>
        </member>
        <member name="M:Hocon.HoconRoot.GetDouble(Hocon.HoconPath,System.Double)">
            <inheritdoc cref="M:Hocon.HoconRoot.GetDouble(System.String,System.Double)" />
        </member>
        <member name="M:Hocon.HoconRoot.GetObject(System.String,Hocon.HoconObject)">
            <summary>
                Retrieves an object from the specified path in the configuration.
            </summary>
            <param name="path">The path that contains the value to retrieve.</param>
            <param name="default">The default value to return if the value doesn't exist.</param>
            <returns>The double value defined in the specified path.</returns>
        </member>
        <member name="M:Hocon.HoconRoot.GetObject(Hocon.HoconPath,Hocon.HoconObject)">
            <inheritdoc cref="M:Hocon.HoconRoot.GetObject(System.String,Hocon.HoconObject)" />
        </member>
        <member name="M:Hocon.HoconRoot.GetBooleanList(System.String)">
            <summary>
                Retrieves a list of boolean values from the specified path in the configuration.
            </summary>
            <param name="path">The path that contains the values to retrieve.</param>
            <returns>The list of boolean values defined in the specified path.</returns>
            <exception cref="T:Hocon.HoconParserException">Thrown if path does not exist</exception>
        </member>
        <member name="M:Hocon.HoconRoot.GetBooleanList(System.String,System.Collections.Generic.IList{System.Boolean})">
            <inheritdoc cref="M:Hocon.HoconRoot.GetBooleanList(System.String)" />
            <param name="path">The path that contains the values to retrieve.</param>
            <param name="default">The default value to return if the value doesn't exist.</param>
        </member>
        <member name="M:Hocon.HoconRoot.GetBooleanList(Hocon.HoconPath,System.Collections.Generic.IList{System.Boolean})">
            <inheritdoc cref="M:Hocon.HoconRoot.GetBooleanList(System.String)" />
            <param name="path">The path that contains the values to retrieve.</param>
            <param name="default">The default value to return if the value doesn't exist.</param>
        </member>
        <member name="M:Hocon.HoconRoot.GetDecimalList(System.String)">
            <summary>
                Retrieves a list of decimal values from the specified path in the configuration.
            </summary>
            <param name="path">The path that contains the values to retrieve.</param>
            <returns>The list of decimal values defined in the specified path.</returns>
            <exception cref="T:Hocon.HoconParserException">Thrown if path does not exist</exception>
        </member>
        <member name="M:Hocon.HoconRoot.GetDecimalList(System.String,System.Collections.Generic.IList{System.Decimal})">
            <summary>
                Retrieves a list of decimal values from the specified path in the configuration.
            </summary>
            <param name="path">The path that contains the values to retrieve.</param>
            <param name="default">The default value to return if the value doesn't exist.</param>
            <returns>The list of decimal values defined in the specified path.</returns>
        </member>
        <member name="M:Hocon.HoconRoot.GetDecimalList(Hocon.HoconPath,System.Collections.Generic.IList{System.Decimal})">
            <inheritdoc cref="M:Hocon.HoconRoot.GetDecimalList(System.String)" />
        </member>
        <member name="M:Hocon.HoconRoot.GetFloatList(System.String)">
            <summary>
                Retrieves a list of float values from the specified path in the configuration.
            </summary>
            <param name="path">The path that contains the values to retrieve.</param>
            <returns>The list of float values defined in the specified path.</returns>
            <exception cref="T:Hocon.HoconParserException">Thrown if path does not exist</exception>
        </member>
        <member name="M:Hocon.HoconRoot.GetFloatList(System.String,System.Collections.Generic.IList{System.Single})">
            <summary>
                Retrieves a list of float values from the specified path in the configuration.
            </summary>
            <param name="path">The path that contains the values to retrieve.</param>
            <param name="default">The default value to return if the value doesn't exist.</param>
            <returns>The list of float values defined in the specified path.</returns>
        </member>
        <member name="M:Hocon.HoconRoot.GetFloatList(Hocon.HoconPath,System.Collections.Generic.IList{System.Single})">
            <inheritdoc cref="M:Hocon.HoconRoot.GetFloatList(System.String)" />
        </member>
        <member name="M:Hocon.HoconRoot.GetDoubleList(System.String)">
            <summary>
                Retrieves a list of double values from the specified path in the configuration.
            </summary>
            <param name="path">The path that contains the values to retrieve.</param>
            <returns>The list of double values defined in the specified path.</returns>
            <exception cref="T:Hocon.HoconParserException">Thrown if path does not exist</exception>
        </member>
        <member name="M:Hocon.HoconRoot.GetDoubleList(System.String,System.Collections.Generic.IList{System.Double})">
            <summary>
                Retrieves a list of double values from the specified path in the configuration.
            </summary>
            <param name="path">The path that contains the values to retrieve.</param>
            <param name="default">The default value to return if the value doesn't exist.</param>
            <returns>The list of double values defined in the specified path.</returns>
        </member>
        <member name="M:Hocon.HoconRoot.GetDoubleList(Hocon.HoconPath,System.Collections.Generic.IList{System.Double})">
            <inheritdoc cref="M:Hocon.HoconRoot.GetDoubleList(System.String)" />
        </member>
        <member name="M:Hocon.HoconRoot.GetIntList(System.String)">
            <summary>
                Retrieves a list of int values from the specified path in the configuration.
            </summary>
            <param name="path">The path that contains the values to retrieve.</param>
            <returns>The list of int values defined in the specified path.</returns>
            <exception cref="T:Hocon.HoconParserException">Thrown if path does not exist</exception>
        </member>
        <member name="M:Hocon.HoconRoot.GetIntList(System.String,System.Collections.Generic.IList{System.Int32})">
            <summary>
                Retrieves a list of int values from the specified path in the configuration.
            </summary>
            <param name="path">The path that contains the values to retrieve.</param>
            <param name="default">The default value to return if the value doesn't exist.</param>
            <returns>The list of int values defined in the specified path.</returns>
        </member>
        <member name="M:Hocon.HoconRoot.GetIntList(Hocon.HoconPath,System.Collections.Generic.IList{System.Int32})">
            <inheritdoc cref="M:Hocon.HoconRoot.GetIntList(System.String)" />
        </member>
        <member name="M:Hocon.HoconRoot.GetLongList(System.String)">
            <summary>
                Retrieves a list of long values from the specified path in the configuration.
            </summary>
            <param name="path">The path that contains the values to retrieve.</param>
            <returns>The list of long values defined in the specified path.</returns>
            <exception cref="T:Hocon.HoconParserException">Thrown if path does not exist</exception>
        </member>
        <member name="M:Hocon.HoconRoot.GetLongList(System.String,System.Collections.Generic.IList{System.Int64})">
            <summary>
                Retrieves a list of long values from the specified path in the configuration.
            </summary>
            <param name="path">The path that contains the values to retrieve.</param>
            <param name="default">The default value to return if the value doesn't exist.</param>
            <returns>The list of long values defined in the specified path.</returns>
        </member>
        <member name="M:Hocon.HoconRoot.GetLongList(Hocon.HoconPath,System.Collections.Generic.IList{System.Int64})">
            <inheritdoc cref="M:Hocon.HoconRoot.GetLongList(System.String)" />
        </member>
        <member name="M:Hocon.HoconRoot.GetByteList(System.String)">
            <summary>
                Retrieves a list of byte values from the specified path in the configuration.
            </summary>
            <param name="path">The path that contains the values to retrieve.</param>
            <returns>The list of byte values defined in the specified path.</returns>
            <exception cref="T:Hocon.HoconParserException">Thrown if path does not exist</exception>
        </member>
        <member name="M:Hocon.HoconRoot.GetByteList(System.String,System.Collections.Generic.IList{System.Byte})">
            <summary>
                Retrieves a list of byte values from the specified path in the configuration.
            </summary>
            <param name="path">The path that contains the values to retrieve.</param>
            <param name="default">The default value to return if the value doesn't exist.</param>
            <returns>The list of byte values defined in the specified path.</returns>
        </member>
        <member name="M:Hocon.HoconRoot.GetByteList(Hocon.HoconPath,System.Collections.Generic.IList{System.Byte})">
            <inheritdoc cref="M:Hocon.HoconRoot.GetByteList(System.String)" />
        </member>
        <member name="M:Hocon.HoconRoot.GetStringList(System.String)">
            <summary>
                Retrieves a list of string values from the specified path in the configuration.
            </summary>
            <param name="path">The path that contains the values to retrieve.</param>
            <returns>The list of string values defined in the specified path.</returns>
        </member>
        <member name="M:Hocon.HoconRoot.GetStringList(System.String,System.Collections.Generic.IList{System.String})">
            <summary>
                Retrieves a list of string values from the specified path in the configuration.
            </summary>
            <param name="path">The path that contains the values to retrieve.</param>
            <param name="default">The default value to return if the value doesn't exist.</param>
            <returns>The list of string values defined in the specified path.</returns>
        </member>
        <member name="M:Hocon.HoconRoot.GetStringList(Hocon.HoconPath,System.Collections.Generic.IList{System.String})">
            <inheritdoc cref="M:Hocon.HoconRoot.GetStringList(System.String)" />
        </member>
        <member name="M:Hocon.HoconRoot.GetObjectList(System.String)">
            <summary>
                Retrieves a list of objects from the specified path in the configuration.
            </summary>
            <param name="path">The path that contains the objects to retrieve.</param>
            <returns>The list of objects defined in the specified path.</returns>
            <exception cref="T:Hocon.HoconParserException">Thrown if path does not exist</exception>
        </member>
        <member name="M:Hocon.HoconRoot.GetObjectList(System.String,System.Collections.Generic.IList{Hocon.HoconObject})">
            <summary>
                Retrieves a list of objects from the specified path in the configuration.
            </summary>
            <param name="path">The path that contains the objects to retrieve.</param>
            <param name="default">The default value to return if the value doesn't exist.</param>
            <returns>The list of objects defined in the specified path.</returns>
        </member>
        <member name="M:Hocon.HoconRoot.GetObjectList(Hocon.HoconPath,System.Collections.Generic.IList{Hocon.HoconObject})">
            <inheritdoc cref="M:Hocon.HoconRoot.GetObjectList(System.String)" />
        </member>
        <member name="M:Hocon.HoconRoot.GetValue(System.String)">
            <summary>
                Retrieves a <see cref="T:Hocon.HoconValue" /> from a specific path.
            </summary>
            <param name="path">The path that contains the value to retrieve.</param>
            <returns>The <see cref="T:Hocon.HoconValue" /> found at the location if one exists, otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Hocon.HoconRoot.GetValue(Hocon.HoconPath)">
            <inheritdoc cref="M:Hocon.HoconRoot.GetValue(System.String)" />
        </member>
        <member name="M:Hocon.HoconRoot.GetTimeSpan(System.String,System.Boolean)">
            <summary>
                Retrieves a <see cref="T:System.TimeSpan" /> value from the specified path in the configuration.
            </summary>
            <param name="path">The path that contains the value to retrieve.</param>
            <param name="default">The default value to return if the value doesn't exist.</param>
            <param name="allowInfinite"><c>true</c> if infinite timespans are allowed; otherwise <c>false</c>.</param>
            <returns>The <see cref="T:System.TimeSpan" /> value defined in the specified path.</returns>
        </member>
        <member name="M:Hocon.HoconParserException.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Hocon.HoconParserException" /> class.
            </summary>
        </member>
        <member name="M:Hocon.HoconParserException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Hocon.HoconParserException" /> class
                with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Hocon.HoconParserException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:Hocon.HoconParserException" /> class
                with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">
                The exception that is the cause of the current exception, or <c>null</c> if no inner
                exception is specified.
            </param>
        </member>
        <member name="M:Hocon.HoconValueException.#ctor(System.String,System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="P:Hocon.HoconValueException.FailPath">
            <summary>
                Gets HOCON path of the value which caused failure
            </summary>
        </member>
        <member name="T:Hocon.HoconArray">
            <summary>
                This class represents an array element in a HOCON (Human-Optimized Config Object Notation)
                configuration string.
                <code>
            root {
                items = [
                  "1",
                  "2"]
            }
            </code>
            </summary>
        </member>
        <member name="M:Hocon.HoconArray.GetString">
            <inheritdoc />
            <exception cref="T:Hocon.HoconException">
                This element is an array. It is not a string.
                Therefore this method will throw an exception.
            </exception>
        </member>
        <member name="M:Hocon.HoconArray.GetArray">
            <inheritdoc />
        </member>
        <member name="M:Hocon.HoconArray.ToString">
            <summary>
                Returns a HOCON string representation of this element.
            </summary>
            <returns>A HOCON string representation of this element.</returns>
        </member>
        <member name="T:Hocon.HoconEmptyValue">
            <summary>
                This class represents an empty <see cref="T:Hocon.HoconValue" />,
                it masquerades as all other types and are usually used to represent empty or unresolved substitution.
            </summary>
        </member>
        <member name="T:Hocon.HoconField">
            <summary>
                This class represents a key and value tuple representing a Hocon field.
                <code>
            root {
                items = [
                  "1",
                  "2"]
            }
            </code>
            </summary>
        </member>
        <member name="P:Hocon.HoconField.HasOldValues">
            <summary>
                Returns true if there are old values stored.
            </summary>
        </member>
        <member name="P:Hocon.HoconField.Parent">
            <inheritdoc />
        </member>
        <member name="P:Hocon.HoconField.Type">
            <inheritdoc />
        </member>
        <member name="P:Hocon.HoconField.Raw">
            <inheritdoc />
        </member>
        <member name="M:Hocon.HoconField.GetObject">
            <inheritdoc />
        </member>
        <member name="M:Hocon.HoconField.GetString">
            <inheritdoc />
        </member>
        <member name="T:Hocon.HoconLiteral">
            <summary>
                This class represents a literal element in a HOCON (Human-Optimized Config Object Notation)
                configuration string.
                <code>
            akka {  
              actor {
                provider = "Akka.Remote.RemoteActorRefProvider, Akka.Remote"
              }
            }
            </code>
            </summary>
        </member>
        <member name="P:Hocon.HoconLiteral.Value">
            <summary>
                Gets or sets the value of this element.
            </summary>
        </member>
        <member name="P:Hocon.HoconLiteral.Raw">
            <summary>
                Retrieves the raw string representation of this element.
            </summary>
            <returns>The raw value of this element.</returns>
        </member>
        <member name="M:Hocon.HoconLiteral.GetObject">
            <inheritdoc />
            <exception cref="T:Hocon.HoconException">
                This element is a string literal. It is not an object.
                Therefore this method will throw an exception.
            </exception>
        </member>
        <member name="M:Hocon.HoconLiteral.GetString">
            <inheritdoc />
        </member>
        <member name="M:Hocon.HoconLiteral.GetArray">
            <summary>
                Retrieves a list of elements associated with this element.
            </summary>
            <returns>
                A list of elements associated with this element.
            </returns>
            <exception cref="T:Hocon.HoconException">
                This element is a string literal. It is not an array.
                Therefore this method will throw an exception.
            </exception>
        </member>
        <member name="M:Hocon.HoconLiteral.ToString(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Hocon.HoconLiteral.ToString">
            <summary>
                Returns the string representation of this element.
            </summary>
            <returns>The value of this element.</returns>
        </member>
        <member name="T:Hocon.HoconObject">
            <summary>
                This class represents an object element in a HOCON (Human-Optimized Config Object Notation)
                configuration string.
                <code>
            akka {  
              actor {
                debug {  
                  receive = on 
                  autoreceive = on
                  lifecycle = on
                  event-stream = on
                  unhandled = on
                }
              }
            }
            </code>
            </summary>
        </member>
        <member name="M:Hocon.HoconObject.#ctor(Hocon.IHoconElement)">
            <summary>
                Initializes a new instance of the <see cref="T:Hocon.HoconObject" /> class.
            </summary>
        </member>
        <member name="P:Hocon.HoconObject.Unwrapped">
            <summary>
                Retrieves the underlying map that contains the barebones
                object values.
            </summary>
        </member>
        <member name="P:Hocon.HoconObject.Type">
            <inheritdoc />
            <returns><see cref="F:Hocon.HoconType.Object" />.</returns>
        </member>
        <member name="M:Hocon.HoconObject.GetObject">
            <inheritdoc />
            <summary>
                Retrieves a list of elements associated with this element.
            </summary>
        </member>
        <member name="M:Hocon.HoconObject.GetString">
            <inheritdoc />
            <exception cref="T:Hocon.HoconException">
                This element is an object, it is not a string, therefore this method will throw an exception.
            </exception>
        </member>
        <member name="M:Hocon.HoconObject.GetArray">
            <inheritdoc />
            <summary>
                Converts a numerically indexed object into an array where its elements are sorted
                based on the numerically sorted order of the key.
            </summary>
        </member>
        <member name="M:Hocon.HoconObject.ToString(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Hocon.HoconObject.Clone(Hocon.IHoconElement)">
            <inheritdoc />
        </member>
        <member name="M:Hocon.HoconObject.GetField(System.String)">
            <summary>
                Retrieves the <see cref="T:Hocon.HoconField" /> field associated with the supplied <see cref="T:System.String" /> key.
            </summary>
            <param name="key">The <see cref="T:System.String" /> key associated with the field to retrieve.</param>
            <returns>
                The <see cref="T:Hocon.HoconField" /> associated with the supplied key.
            </returns>
            <exception cref="T:System.ArgumentNullException">key is null</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The key does not exist in the <see cref="T:Hocon.HoconObject" /></exception>
        </member>
        <member name="M:Hocon.HoconObject.TryGetField(System.String,Hocon.HoconField@)">
            <summary>
                Retrieves the <see cref="T:Hocon.HoconField" /> field associated with the supplied <see cref="T:System.String" /> key.
            </summary>
            <param name="key">The <see cref="T:System.String" /> key associated with the field to retrieve.</param>
            <param name="result">
                When this method returns, contains the <see cref="T:Hocon.HoconField" />
                associated with the specified key, if the key is found;
                otherwise, null. This parameter is passed uninitialized.
            </param>
            <returns>
                <c>true</c> if the <see cref="T:Hocon.HoconObject" /> contains a field with the the specified key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Hocon.HoconObject.GetObject(System.String)">
            <summary>
                Retrieves the merged <see cref="T:Hocon.HoconObject" /> backing the <see cref="T:Hocon.HoconField" /> field
                associated with the supplied <see cref="T:System.String" /> key.
            </summary>
            <param name="key">The <see cref="T:System.String" /> key associated with the field to retrieve.</param>
            <returns>
                The <see cref="T:Hocon.HoconObject" /> backing the <see cref="T:Hocon.HoconField" /> field associated with the supplied key.
            </returns>
            <exception cref="T:System.ArgumentNullException">key is null</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The key does not exist in the <see cref="T:Hocon.HoconObject" /></exception>
            <exception cref="T:Hocon.HoconException">
                The <see cref="P:Hocon.HoconField.Type" /> is not of type <see cref="F:Hocon.HoconType.Object" />
            </exception>
        </member>
        <member name="M:Hocon.HoconObject.TryGetObject(System.String,Hocon.HoconObject@)">
            <summary>
                Retrieves the merged <see cref="T:Hocon.HoconObject" /> backing the <see cref="T:Hocon.HoconField" /> field
                associated with the supplied <see cref="T:System.String" /> key.
            </summary>
            <param name="key">The <see cref="T:System.String" /> key associated with the field to retrieve.</param>
            <param name="result">
                When this method returns, contains the backing <see cref="T:Hocon.HoconObject" />
                of the <see cref="T:Hocon.HoconField" /> associated with the specified key, if the key is found;
                otherwise, null. This parameter is passed uninitialized.
            </param>
            <returns>
                <c>true</c> if the <see cref="T:Hocon.HoconObject" /> contains a <see cref="T:Hocon.HoconField" /> field with the the specified key
                and the <see cref="P:Hocon.HoconField.Type" /> is of type <see cref="F:Hocon.HoconType.Object" />; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Hocon.HoconObject.GetValue(Hocon.HoconPath)">
            <summary>
                Retrieves the backing <see cref="T:Hocon.HoconValue" /> value of the <see cref="T:Hocon.HoconField" /> associated with
                the supplied <see cref="T:Hocon.HoconPath" /> path, relative to this object.
            </summary>
            <param name="path">
                The relative <see cref="T:Hocon.HoconPath" /> path associated with
                the <see cref="T:Hocon.HoconField" /> of the <see cref="T:Hocon.HoconValue" /> value to retrieve.
            </param>
            <returns>
                The <see cref="T:Hocon.HoconValue" /> value backing the <see cref="T:Hocon.HoconField" /> field associated
                with the supplied key.
            </returns>
            <exception cref="T:System.ArgumentNullException">path is null</exception>
            <exception cref="T:System.ArgumentException">path is empty</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The key does not exist in the <see cref="T:Hocon.HoconObject" /></exception>
        </member>
        <member name="M:Hocon.HoconObject.TryGetValue(Hocon.HoconPath,Hocon.HoconValue@)">
            <summary>
                Retrieves the backing <see cref="T:Hocon.HoconValue" /> value of the <see cref="T:Hocon.HoconField" /> associated with
                the supplied <see cref="T:Hocon.HoconPath" /> path, relative to this object.
            </summary>
            <param name="path">
                The relative <see cref="T:Hocon.HoconPath" /> path associated with
                the <see cref="T:Hocon.HoconField" /> of the <see cref="T:Hocon.HoconValue" /> value to retrieve.
            </param>
            <param name="result">
                When this method returns, contains the backing <see cref="T:Hocon.HoconValue" />
                of the <see cref="T:Hocon.HoconField" /> associated with the specified <see cref="T:Hocon.HoconPath" /> path,
                if the path is resolveable; otherwise, null. This parameter is passed uninitialized.
            </param>
            <returns>
                <c>true</c> if the <see cref="T:Hocon.HoconObject" /> children contains a <see cref="T:Hocon.HoconField" /> field resolveable
                with the the specified relative <see cref="T:Hocon.HoconPath" /> path; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Hocon.HoconObject.GetOrCreateKey(System.String)">
            <summary>
                Retrieves the value associated with the supplied key.
                If the supplied key is not found, then one is created
                with a blank value.
            </summary>
            <param name="key">The path associated with the value to retrieve.</param>
            <returns>The value associated with the supplied key.</returns>
        </member>
        <member name="M:Hocon.HoconObject.ToString">
            <summary>
                Returns a HOCON string representation of this element.
            </summary>
            <returns>A HOCON string representation of this element.</returns>
        </member>
        <member name="T:Hocon.HoconSubstitution">
            <summary>
                This class represents a substitution element in a HOCON (Human-Optimized Config Object Notation)
                configuration string.
                <code>
            akka {  
              defaultInstances = 10
              deployment{
                /user/time{
                  nr-of-instances = ${defaultInstances}
                }
              }
            }
            </code>
            </summary>
        </member>
        <member name="M:Hocon.HoconSubstitution.#ctor(Hocon.IHoconElement,Hocon.HoconPath,Hocon.IHoconLineInfo,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:Hocon.HoconSubstitution" /> class.
            </summary>
            <param name="parent">The <see cref="T:Hocon.HoconValue" /> parent of this substitution.</param>
            <param name="path">The <see cref="T:Hocon.HoconPath" /> that this substitution is pointing to.</param>
            <param name="required">Marks wether this substitution uses the ${? notation or not.</param>
            ///
            <param name="lineInfo">The <see cref="T:Hocon.IHoconLineInfo" /> of this substitution, used for exception generation purposes.</param>
        </member>
        <member name="P:Hocon.HoconSubstitution.Path">
            <summary>
                The full path to the value which should substitute this instance.
            </summary>
        </member>
        <member name="P:Hocon.HoconSubstitution.ResolvedValue">
            <summary>
                The evaluated value from the Path property
            </summary>
        </member>
        <member name="P:Hocon.HoconSubstitution.Parent">
            <summary>
                The Hocon node that owned this substitution node
            </summary>
        </member>
        <member name="M:Hocon.HoconSubstitution.GetString">
            <inheritdoc />
        </member>
        <member name="M:Hocon.HoconSubstitution.GetArray">
            <inheritdoc />
        </member>
        <member name="M:Hocon.HoconSubstitution.GetObject">
            <inheritdoc />
        </member>
        <member name="M:Hocon.HoconSubstitution.ToString(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Hocon.HoconSubstitution.Clone(Hocon.IHoconElement)">
            <summary>
            Returns substitution, that is safe to use as a copy (it's immutable anyway)
            </summary>
            <remarks>
            Reference to this substitution instance is already stored in parser, and it's value will be resolved
            at the end of parsing process.
            Now, one more parent is referencing this substitution as a child - so we need to register this
            parent here, and all parents will be notified about subsitution resolution via <see cref="P:Hocon.HoconSubstitution.ResolvedValue"/>
            setter.
            </remarks>
        </member>
        <member name="M:Hocon.HoconSubstitution.ToString">
            <summary>
                Returns the string representation of this element.
            </summary>
            <returns>The value of this element.</returns>
        </member>
        <member name="T:Hocon.TokenType">
            <summary>
                This enumeration defines the different types of tokens found within
                a HOCON (Human-Optimized Config Object Notation) configuration string.
            </summary>
        </member>
        <member name="F:Hocon.TokenType.EndOfFile">
            <summary>
                This token type represents the end of the configuration string.
            </summary>
        </member>
        <member name="F:Hocon.TokenType.StartOfObject">
            <summary>
                This token type represents the beginning of an object, <c>{</c> .
            </summary>
        </member>
        <member name="F:Hocon.TokenType.EndOfObject">
            <summary>
                This token type represents the end of an object, <c>}</c> .
            </summary>
        </member>
        <member name="F:Hocon.TokenType.StartOfArray">
            <summary>
                This token type represents the beginning of an array, <c>[</c> .
            </summary>
        </member>
        <member name="F:Hocon.TokenType.EndOfArray">
            <summary>
                This token type represents the end of an array, <c>]</c> .
            </summary>
        </member>
        <member name="F:Hocon.TokenType.ParenthesisStart">
            <summary>
                This token type represents the opening parenthesis, <c>(</c> .
            </summary>
        </member>
        <member name="F:Hocon.TokenType.ParenthesisEnd">
            <summary>
                This token type represents the closing parenthesis, <c>)</c> .
            </summary>
        </member>
        <member name="F:Hocon.TokenType.Comment">
            <summary>
                This token type represents a comment.
            </summary>
        </member>
        <member name="F:Hocon.TokenType.LiteralValue">
            <summary>
                This token type represents the value portion of a key-value pair.
            </summary>
        </member>
        <member name="F:Hocon.TokenType.PlusEqualAssign">
            <summary>
                This token type represents the assignment operator, <c>+=</c>.
            </summary>
        </member>
        <member name="F:Hocon.TokenType.Assign">
            <summary>
                This token type represents the assignment operator, <c>=</c> or <c>:</c> .
            </summary>
        </member>
        <member name="F:Hocon.TokenType.Comma">
            <summary>
                This token type represents the separator in an array, <c>,</c> .
            </summary>
        </member>
        <member name="F:Hocon.TokenType.SubstituteRequired">
            <summary>
                This token type represents the start of a replacement variable, <c>${</c> .
            </summary>
        </member>
        <member name="F:Hocon.TokenType.SubstituteOptional">
            <summary>
                This token type represents the start of a replacement variable with question mark, <c>${?</c> .
            </summary>
        </member>
        <member name="F:Hocon.TokenType.EndOfLine">
            <summary>
                This token type represents a newline character, <c>\n</c> .
            </summary>
        </member>
        <member name="F:Hocon.TokenType.Include">
            <summary>
                This token type represents the include directive.
            </summary>
        </member>
        <member name="F:Hocon.TokenType.Required">
            <summary>
                This token type represents the required() directive.
            </summary>
        </member>
        <member name="F:Hocon.TokenType.Url">
            <summary>
                This token type represents the url() directive.
            </summary>
        </member>
        <member name="F:Hocon.TokenType.File">
            <summary>
                This token type represents the file() directive.
            </summary>
        </member>
        <member name="F:Hocon.TokenType.Classpath">
            <summary>
                This token type represents the classpath() directive.
            </summary>
        </member>
        <member name="F:Hocon.TokenType.Error">
            <summary>
                This token type represents a tokenizer error.
            </summary>
        </member>
        <member name="T:Hocon.Token">
            <summary>
                This class represents a token within a HOCON (Human-Optimized Config Object Notation)
                configuration string.
            </summary>
        </member>
        <member name="P:Hocon.Token.Value">
            <summary>
                The value associated with this token. If this token is
                a <see cref="F:Hocon.TokenType.LiteralValue" />, then this property
                holds the string literal.
            </summary>
        </member>
        <member name="P:Hocon.Token.Type">
            <summary>
                The type that represents this token.
            </summary>
        </member>
        <member name="M:Hocon.Token.Substitution(System.String,Hocon.IHoconLineInfo,System.Boolean)">
            <summary>
                Creates a substitution token with a given <paramref name="path" />.
            </summary>
            <param name="path">The path to associate with this token.</param>
            <param name="source">
                The <see cref="T:Hocon.IHoconLineInfo" /> of this <see cref="T:Hocon.Token" />, used for exception generation
                purposes.
            </param>
            <param name="questionMarked">Designate whether the substitution <see cref="T:Hocon.Token" /> was declared as `${?`.</param>
            <returns>A substitution token with the given path.</returns>
        </member>
        <member name="M:Hocon.Token.LiteralValue(System.String,Hocon.TokenLiteralType,Hocon.IHoconLineInfo)">
            <summary>
                Creates a string literal token with a given <paramref name="value" />.
            </summary>
            <param name="value">The value to associate with this token.</param>
            <param name="literalType">The <see cref="T:Hocon.TokenLiteralType" /> of this <see cref="T:Hocon.Token" />.</param>
            <param name="source">
                The <see cref="T:Hocon.IHoconLineInfo" /> of this <see cref="T:Hocon.Token" />, used for exception generation
                purposes.
            </param>
            <returns>A string literal token with the given value.</returns>
        </member>
        <member name="T:Hocon.Tokenizer">
            <summary>
                This class contains methods used to tokenize a string.
            </summary>
        </member>
        <member name="M:Hocon.Tokenizer.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Hocon.Tokenizer" /> class.
            </summary>
            <param name="text">The string that contains the text to tokenize.</param>
        </member>
        <member name="P:Hocon.Tokenizer.EoF">
            <summary>
                A value indicating whether the tokenizer has reached the end of the string.
            </summary>
        </member>
        <member name="P:Hocon.Tokenizer.Peek">
            <summary>
                Retrieves the next character in the tokenizer without advancing its position.
            </summary>
            <returns>The character at the tokenizer's current position.</returns>
        </member>
        <member name="M:Hocon.Tokenizer.Matches(System.String)">
            <summary>
                Determines whether the given pattern matches the value at the current
                position of the tokenizer.
            </summary>
            <param name="pattern">The string that contains the characters to match.</param>
            <returns><c>true</c> if the pattern matches, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Hocon.Tokenizer.Matches(System.String[])">
            <summary>
                Determines whether any of the given patterns match the value at the current
                position of the tokenizer.
            </summary>
            <param name="patterns">The string array that contains the characters to match.</param>
            <returns><c>true</c> if any one of the patterns match, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Hocon.Tokenizer.Take">
            <summary>
                Retrieves the next character in the tokenizer.
            </summary>
            <returns>The character at the tokenizer's current position.</returns>
        </member>
        <member name="M:Hocon.Tokenizer.Take(System.Int32)">
            <summary>
                Retrieves a string of the given length from the current position of the tokenizer.
            </summary>
            <param name="length">The length of the string to return.</param>
            <returns>
                The string of the given length. If the length exceeds where the
                current index is located, then null is returned.
            </returns>
        </member>
        <member name="T:Hocon.HoconTokenizer">
            <summary>
                This class contains methods used to tokenize HOCON (Human-Optimized Config Object Notation)
                configuration strings.
            </summary>
        </member>
        <member name="M:Hocon.HoconTokenizer.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Hocon.HoconTokenizer" /> class.
            </summary>
            <param name="text">The string that contains the text to tokenize.</param>
        </member>
        <member name="M:Hocon.HoconTokenizer.PullPlusEqualAssignment(Hocon.HoconTokenizerResult)">
            <summary>
                Retrieves a <see cref="F:Hocon.TokenType.PlusEqualAssign" /> token from the tokenizer's current position.
            </summary>
            <returns>A <see cref="F:Hocon.TokenType.PlusEqualAssign" /> token from the tokenizer's current position.</returns>
        </member>
        <member name="M:Hocon.HoconTokenizer.PullComment(Hocon.HoconTokenizerResult)">
            <summary>
                Retrieves a <see cref="F:Hocon.TokenType.Comment" /> token from the tokenizer's current position.
            </summary>
            <returns>A <see cref="F:Hocon.TokenType.EndOfLine" /> token from the tokenizer's last position, discarding the comment.</returns>
        </member>
        <member name="M:Hocon.HoconTokenizer.PullSubstitution(Hocon.HoconTokenizerResult)">
            <summary>
                Retrieves a <see cref="F:Hocon.TokenType.SubstituteRequired" /> token from the tokenizer's current position.
            </summary>
            <returns>A <see cref="F:Hocon.TokenType.SubstituteRequired" /> token from the tokenizer's current position.</returns>
        </member>
        <member name="M:Hocon.HoconTokenizer.PullQuotedText(Hocon.HoconTokenizerResult)">
            <summary>
                Retrieves a quoted <see cref="F:Hocon.TokenType.LiteralValue" /> token from the tokenizer's current position.
            </summary>
            <returns>A <see cref="F:Hocon.TokenType.LiteralValue" /> token from the tokenizer's current position.</returns>
        </member>
        <member name="M:Hocon.HoconTokenizer.PullTripleQuotedText(Hocon.HoconTokenizerResult)">
            <summary>
                Retrieves a triple quoted <see cref="F:Hocon.TokenType.LiteralValue" /> token from the tokenizer's current position.
            </summary>
            <returns>A <see cref="F:Hocon.TokenType.LiteralValue" /> token from the tokenizer's current position.</returns>
        </member>
        <member name="M:Hocon.HoconTokenizer.DiscardRestOfLine">
            <summary>
                Retrieves the current line from where the current token
                is located in the string.
            </summary>
            <returns>The current line from where the current token is located.</returns>
        </member>
        <member name="T:Hocon.HoconValue">
            <summary>
                This class represents the root type for a HOCON (Human-Optimized Config Object Notation)
                configuration object.
            </summary>
        </member>
        <member name="M:Hocon.HoconValue.#ctor(Hocon.IHoconElement)">
            <summary>
                Initializes a new instance of the <see cref="T:Hocon.HoconValue" /> class.
            </summary>
        </member>
        <member name="M:Hocon.HoconValue.GetObject">
            <inheritdoc />
        </member>
        <member name="M:Hocon.HoconValue.GetString">
            <summary>
                Retrieves the string value from this <see cref="T:Hocon.HoconValue" />.
            </summary>
            <returns>The string value represented by this <see cref="T:Hocon.HoconValue" />.</returns>
        </member>
        <member name="M:Hocon.HoconValue.GetArray">
            <summary>
                Retrieves a list of values from this <see cref="T:Hocon.HoconValue" />.
            </summary>
            <returns>A list of values represented by this <see cref="T:Hocon.HoconValue" />.</returns>
        </member>
        <member name="M:Hocon.HoconValue.ToString(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Hocon.HoconValue.AtKey(System.String)">
            <summary>
                Wraps this <see cref="T:Hocon.HoconValue" /> into a new <see cref="T:Hocon.HoconObject" /> at the specified key.
            </summary>
            <param name="key">The key designated to be the new root element.</param>
            <returns>A new HOCON root.</returns>
            <remarks>
                Immutable. Performs a deep copy on this <see cref="T:Hocon.HoconValue" /> first.
            </remarks>
        </member>
        <member name="M:Hocon.HoconValue.Add(Hocon.IHoconElement)">
            <summary>
                Merge an <see cref="T:Hocon.IHoconElement" /> into this <see cref="T:Hocon.HoconValue" />.
            </summary>
            <param name="value">The <see cref="T:Hocon.IHoconElement" /> value to be merged into this <see cref="T:Hocon.HoconValue" /></param>
            <exception cref="T:Hocon.HoconParserException">
                Throws when the merged <see cref="P:Hocon.IHoconElement.Type" /> type did not match <see cref="P:Hocon.HoconValue.Type" />,
                if <see cref="P:Hocon.HoconValue.Type" /> is not <see cref="F:Hocon.HoconType.Empty" />.
            </exception>
        </member>
        <member name="M:Hocon.HoconValue.ToString">
            <summary>
                Returns a HOCON string representation of this <see cref="T:Hocon.HoconValue" />.
            </summary>
            <returns>A HOCON string representation of this <see cref="T:Hocon.HoconValue" />.</returns>
        </member>
        <member name="M:Hocon.HoconValue.GetBoolean">
            <summary>
                Retrieves the boolean value from this <see cref="T:Hocon.HoconValue" />.
            </summary>
            <returns>The boolean value represented by this <see cref="T:Hocon.HoconValue" />.</returns>
            <exception cref="T:System.NotSupportedException">
                This exception occurs when the <see cref="T:Hocon.HoconValue" /> doesn't
                conform to the standard boolean values: "on", "off", "true", or "false"
            </exception>
        </member>
        <member name="M:Hocon.HoconValue.GetDecimal">
            <summary>
                Retrieves the decimal value from this <see cref="T:Hocon.HoconValue" />.
            </summary>
            <returns>The decimal value represented by this <see cref="T:Hocon.HoconValue" />.</returns>
        </member>
        <member name="M:Hocon.HoconValue.GetFloat">
            <summary>
                Retrieves the float value from this <see cref="T:Hocon.HoconValue" />.
            </summary>
            <returns>The float value represented by this <see cref="T:Hocon.HoconValue" />.</returns>
        </member>
        <member name="M:Hocon.HoconValue.GetDouble">
            <summary>
                Retrieves the double value from this <see cref="T:Hocon.HoconValue" />.
            </summary>
            <returns>The double value represented by this <see cref="T:Hocon.HoconValue" />.</returns>
        </member>
        <member name="M:Hocon.HoconValue.GetLong">
            <summary>
                Retrieves the long value from this <see cref="T:Hocon.HoconValue" />.
            </summary>
            <returns>The long value represented by this <see cref="T:Hocon.HoconValue" />.</returns>
        </member>
        <member name="M:Hocon.HoconValue.GetInt">
            <summary>
                Retrieves the integer value from this <see cref="T:Hocon.HoconValue" />.
            </summary>
            <returns>The integer value represented by this <see cref="T:Hocon.HoconValue" />.</returns>
        </member>
        <member name="M:Hocon.HoconValue.GetByte">
            <summary>
                Retrieves the byte value from this <see cref="T:Hocon.HoconValue" />.
            </summary>
            <returns>The byte value represented by this <see cref="T:Hocon.HoconValue" />.</returns>
        </member>
        <member name="M:Hocon.HoconValue.GetByteList">
            <summary>
                Retrieves a list of byte values from this <see cref="T:Hocon.HoconValue" />.
            </summary>
            <returns>A list of byte values represented by this <see cref="T:Hocon.HoconValue" />.</returns>
        </member>
        <member name="M:Hocon.HoconValue.GetIntList">
            <summary>
                Retrieves a list of integer values from this <see cref="T:Hocon.HoconValue" />.
            </summary>
            <returns>A list of integer values represented by this <see cref="T:Hocon.HoconValue" />.</returns>
        </member>
        <member name="M:Hocon.HoconValue.GetLongList">
            <summary>
                Retrieves a list of long values from this <see cref="T:Hocon.HoconValue" />.
            </summary>
            <returns>A list of long values represented by this <see cref="T:Hocon.HoconValue" />.</returns>
        </member>
        <member name="M:Hocon.HoconValue.GetBooleanList">
            <summary>
                Retrieves a list of boolean values from this <see cref="T:Hocon.HoconValue" />.
            </summary>
            <returns>A list of boolean values represented by this <see cref="T:Hocon.HoconValue" />.</returns>
        </member>
        <member name="M:Hocon.HoconValue.GetFloatList">
            <summary>
                Retrieves a list of float values from this <see cref="T:Hocon.HoconValue" />.
            </summary>
            <returns>A list of float values represented by this <see cref="T:Hocon.HoconValue" />.</returns>
        </member>
        <member name="M:Hocon.HoconValue.GetDoubleList">
            <summary>
                Retrieves a list of double values from this <see cref="T:Hocon.HoconValue" />.
            </summary>
            <returns>A list of double values represented by this <see cref="T:Hocon.HoconValue" />.</returns>
        </member>
        <member name="M:Hocon.HoconValue.GetDecimalList">
            <summary>
                Retrieves a list of decimal values from this <see cref="T:Hocon.HoconValue" />.
            </summary>
            <returns>A list of decimal values represented by this <see cref="T:Hocon.HoconValue" />.</returns>
        </member>
        <member name="M:Hocon.HoconValue.GetStringList">
            <summary>
                Retrieves a list of string values from this <see cref="T:Hocon.HoconValue" />.
            </summary>
            <returns>A list of string values represented by this <see cref="T:Hocon.HoconValue" />.</returns>
        </member>
        <member name="M:Hocon.HoconValue.GetObjectList">
            <summary>
                Retrieves a list of objects from this <see cref="T:Hocon.HoconValue" />.
            </summary>
            <returns>A list of objects represented by this <see cref="T:Hocon.HoconValue" />.</returns>
        </member>
        <member name="M:Hocon.HoconValue.GetTimeSpan(System.Boolean)">
            <summary>
                Retrieves the time span value from this <see cref="T:Hocon.HoconValue" />.
            </summary>
            <param name="allowInfinite">A flag used to set inifinite durations.</param>
            <returns>The time span value represented by this <see cref="T:Hocon.HoconValue" />.</returns>
        </member>
        <member name="M:Hocon.HoconValue.GetByteSize">
            <summary>
                Retrieves the long value, optionally suffixed with a 'b', from this <see cref="T:Hocon.HoconValue" />.
            </summary>
            <returns>The long value represented by this <see cref="T:Hocon.HoconValue" />.</returns>
        </member>
        <member name="T:Hocon.IHoconElement">
            <summary>
                This interface defines the contract needed to implement
                a HOCON (Human-Optimized Config Object Notation) element.
            </summary>
        </member>
        <member name="M:Hocon.IHoconElement.GetObject">
            <summary>
                Retrieves the HOCON object representation of this element.
            </summary>
            <returns>The HOCON object representation of this element.</returns>
        </member>
        <member name="M:Hocon.IHoconElement.GetString">
            <summary>
                Retrieves the string representation of this element.
            </summary>
            <returns>The string representation of this element.</returns>
            <remarks>
            NOTE: this returns an unquoted string. If you want the raw, underlying string
            including quotes call <see cref="M:System.Object.ToString"/> instead.
            </remarks>
        </member>
        <member name="M:Hocon.IHoconElement.GetArray">
            <summary>
                Retrieves a list of elements associated with this element.
            </summary>
            <returns>A list of elements associated with this element.</returns>
        </member>
        <member name="M:Hocon.IHoconElement.Clone(Hocon.IHoconElement)">
            <summary>
                Do deep copy of this element.
            </summary>
            <returns>A deep company of this element.</returns>
        </member>
        <member name="M:Hocon.IHoconElement.ToString(System.Int32,System.Int32)">
            <summary>
                Retrieves the string representation of this element, indented for pretty printing.
            </summary>
            <param name="indent">The number indents this element.</param>
            <param name="indentSize">The number of spaces for each indent.</param>
            <returns>A pretty printed HOCON string representation of this element.</returns>
        </member>
    </members>
</doc>
